
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f80  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406f80  00406f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00406f88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002a4  204009b8  00407940  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400c5c  00407be4  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c60  00409be8  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000200be  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000040e3  00000000  00000000  00040afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000098d5  00000000  00000000  00044be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ef0  00000000  00000000  0004e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011e8  00000000  00000000  0004f3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022e10  00000000  00000000  0005058d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010c6d  00000000  00000000  0007339d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009b99f  00000000  00000000  0008400a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000314c  00000000  00000000  0011f9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 2c 40 20 b1 0c 40 00 af 0c 40 00 af 0c 40 00     `,@ ..@...@...@.
  400010:	af 0c 40 00 af 0c 40 00 af 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 10 40 00 af 0c 40 00 00 00 00 00 41 11 40 00     ..@...@.....A.@.
  40003c:	a5 11 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40004c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40005c:	af 0c 40 00 af 0c 40 00 00 00 00 00 09 07 40 00     ..@...@.......@.
  40006c:	1d 07 40 00 31 07 40 00 af 0c 40 00 0d 36 40 00     ..@.1.@...@..6@.
  40007c:	af 0c 40 00 45 07 40 00 59 07 40 00 af 0c 40 00     ..@.E.@.Y.@...@.
  40008c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40009c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000ac:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000bc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000cc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000dc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000ec:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  4000fc:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40010c:	af 0c 40 00 af 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ......@...@...@.
  40012c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40013c:	af 0c 40 00 af 0c 40 00 af 0c 40 00 af 0c 40 00     ..@...@...@...@.
  40014c:	af 0c 40 00 af 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00406f88 	.word	0x00406f88

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406f88 	.word	0x00406f88
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00406f88 	.word	0x00406f88
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400e85 	.word	0x00400e85
  400220:	00400809 	.word	0x00400809
  400224:	0040085d 	.word	0x0040085d
  400228:	0040086d 	.word	0x0040086d
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	0040087d 	.word	0x0040087d
  400238:	0040076d 	.word	0x0040076d
  40023c:	004007a5 	.word	0x004007a5
  400240:	00400d79 	.word	0x00400d79

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400bdc 	.word	0x20400bdc
  40027c:	20400bd4 	.word	0x20400bd4

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400bd8 	.word	0x20400bd8
  4002cc:	20400bdc 	.word	0x20400bdc

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	0040088d 	.word	0x0040088d
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40046c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400470:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400474:	d105      	bne.n	400482 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400476:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400478:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40047a:	bf14      	ite	ne
  40047c:	2001      	movne	r0, #1
  40047e:	2000      	moveq	r0, #0
  400480:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400482:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400484:	e7f8      	b.n	400478 <pio_get+0xc>

00400486 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400486:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400488:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40048c:	d03a      	beq.n	400504 <pio_set_peripheral+0x7e>
  40048e:	d813      	bhi.n	4004b8 <pio_set_peripheral+0x32>
  400490:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400494:	d025      	beq.n	4004e2 <pio_set_peripheral+0x5c>
  400496:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40049a:	d10a      	bne.n	4004b2 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40049c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40049e:	4313      	orrs	r3, r2
  4004a0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004a6:	400b      	ands	r3, r1
  4004a8:	ea23 0302 	bic.w	r3, r3, r2
  4004ac:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4004ae:	6042      	str	r2, [r0, #4]
  4004b0:	4770      	bx	lr
	switch (ul_type) {
  4004b2:	2900      	cmp	r1, #0
  4004b4:	d1fb      	bne.n	4004ae <pio_set_peripheral+0x28>
  4004b6:	4770      	bx	lr
  4004b8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004bc:	d021      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004be:	d809      	bhi.n	4004d4 <pio_set_peripheral+0x4e>
  4004c0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004c4:	d1f3      	bne.n	4004ae <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004c8:	4313      	orrs	r3, r2
  4004ca:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004ce:	4313      	orrs	r3, r2
  4004d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004d2:	e7ec      	b.n	4004ae <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004d8:	d013      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004de:	d010      	beq.n	400502 <pio_set_peripheral+0x7c>
  4004e0:	e7e5      	b.n	4004ae <pio_set_peripheral+0x28>
{
  4004e2:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004e4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004e6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004e8:	43d3      	mvns	r3, r2
  4004ea:	4021      	ands	r1, r4
  4004ec:	461c      	mov	r4, r3
  4004ee:	4019      	ands	r1, r3
  4004f0:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004f6:	400b      	ands	r3, r1
  4004f8:	4023      	ands	r3, r4
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004fc:	6042      	str	r2, [r0, #4]
}
  4004fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400502:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400504:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400506:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400508:	400b      	ands	r3, r1
  40050a:	ea23 0302 	bic.w	r3, r3, r2
  40050e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400510:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400512:	4313      	orrs	r3, r2
  400514:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400516:	e7ca      	b.n	4004ae <pio_set_peripheral+0x28>

00400518 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400518:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40051a:	f012 0f01 	tst.w	r2, #1
  40051e:	d10d      	bne.n	40053c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400520:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400522:	f012 0f0a 	tst.w	r2, #10
  400526:	d00b      	beq.n	400540 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400528:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40052a:	f012 0f02 	tst.w	r2, #2
  40052e:	d109      	bne.n	400544 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400530:	f012 0f08 	tst.w	r2, #8
  400534:	d008      	beq.n	400548 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400536:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40053a:	e005      	b.n	400548 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40053c:	6641      	str	r1, [r0, #100]	; 0x64
  40053e:	e7f0      	b.n	400522 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400540:	6241      	str	r1, [r0, #36]	; 0x24
  400542:	e7f2      	b.n	40052a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400544:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400548:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40054a:	6001      	str	r1, [r0, #0]
  40054c:	4770      	bx	lr

0040054e <pio_set_output>:
{
  40054e:	b410      	push	{r4}
  400550:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400552:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400554:	b94c      	cbnz	r4, 40056a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400556:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400558:	b14b      	cbz	r3, 40056e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40055a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40055c:	b94a      	cbnz	r2, 400572 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40055e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400560:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400562:	6001      	str	r1, [r0, #0]
}
  400564:	f85d 4b04 	ldr.w	r4, [sp], #4
  400568:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40056a:	6641      	str	r1, [r0, #100]	; 0x64
  40056c:	e7f4      	b.n	400558 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40056e:	6541      	str	r1, [r0, #84]	; 0x54
  400570:	e7f4      	b.n	40055c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400572:	6301      	str	r1, [r0, #48]	; 0x30
  400574:	e7f4      	b.n	400560 <pio_set_output+0x12>
	...

00400578 <pio_configure>:
{
  400578:	b570      	push	{r4, r5, r6, lr}
  40057a:	b082      	sub	sp, #8
  40057c:	4605      	mov	r5, r0
  40057e:	4616      	mov	r6, r2
  400580:	461c      	mov	r4, r3
	switch (ul_type) {
  400582:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400586:	d014      	beq.n	4005b2 <pio_configure+0x3a>
  400588:	d90a      	bls.n	4005a0 <pio_configure+0x28>
  40058a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40058e:	d024      	beq.n	4005da <pio_configure+0x62>
  400590:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400594:	d021      	beq.n	4005da <pio_configure+0x62>
  400596:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40059a:	d017      	beq.n	4005cc <pio_configure+0x54>
		return 0;
  40059c:	2000      	movs	r0, #0
  40059e:	e01a      	b.n	4005d6 <pio_configure+0x5e>
	switch (ul_type) {
  4005a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4005a4:	d005      	beq.n	4005b2 <pio_configure+0x3a>
  4005a6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005aa:	d002      	beq.n	4005b2 <pio_configure+0x3a>
  4005ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005b0:	d1f4      	bne.n	40059c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4005b2:	4632      	mov	r2, r6
  4005b4:	4628      	mov	r0, r5
  4005b6:	4b11      	ldr	r3, [pc, #68]	; (4005fc <pio_configure+0x84>)
  4005b8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005ba:	f014 0f01 	tst.w	r4, #1
  4005be:	d102      	bne.n	4005c6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4005c0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4005c2:	2001      	movs	r0, #1
  4005c4:	e007      	b.n	4005d6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4005c6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4005c8:	2001      	movs	r0, #1
  4005ca:	e004      	b.n	4005d6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4005cc:	461a      	mov	r2, r3
  4005ce:	4631      	mov	r1, r6
  4005d0:	4b0b      	ldr	r3, [pc, #44]	; (400600 <pio_configure+0x88>)
  4005d2:	4798      	blx	r3
	return 1;
  4005d4:	2001      	movs	r0, #1
}
  4005d6:	b002      	add	sp, #8
  4005d8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4005da:	f004 0301 	and.w	r3, r4, #1
  4005de:	9300      	str	r3, [sp, #0]
  4005e0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005e4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005e8:	bf14      	ite	ne
  4005ea:	2200      	movne	r2, #0
  4005ec:	2201      	moveq	r2, #1
  4005ee:	4631      	mov	r1, r6
  4005f0:	4628      	mov	r0, r5
  4005f2:	4c04      	ldr	r4, [pc, #16]	; (400604 <pio_configure+0x8c>)
  4005f4:	47a0      	blx	r4
	return 1;
  4005f6:	2001      	movs	r0, #1
		break;
  4005f8:	e7ed      	b.n	4005d6 <pio_configure+0x5e>
  4005fa:	bf00      	nop
  4005fc:	00400487 	.word	0x00400487
  400600:	00400519 	.word	0x00400519
  400604:	0040054f 	.word	0x0040054f

00400608 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400608:	f012 0f10 	tst.w	r2, #16
  40060c:	d012      	beq.n	400634 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40060e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400612:	f012 0f20 	tst.w	r2, #32
  400616:	d007      	beq.n	400628 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400618:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40061c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400620:	d005      	beq.n	40062e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400622:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400626:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400628:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40062c:	e7f6      	b.n	40061c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40062e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400632:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400634:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400638:	4770      	bx	lr

0040063a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40063a:	6401      	str	r1, [r0, #64]	; 0x40
  40063c:	4770      	bx	lr

0040063e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40063e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400640:	4770      	bx	lr

00400642 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400642:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400644:	4770      	bx	lr
	...

00400648 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40064c:	4604      	mov	r4, r0
  40064e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400650:	4b0e      	ldr	r3, [pc, #56]	; (40068c <pio_handler_process+0x44>)
  400652:	4798      	blx	r3
  400654:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400656:	4620      	mov	r0, r4
  400658:	4b0d      	ldr	r3, [pc, #52]	; (400690 <pio_handler_process+0x48>)
  40065a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40065c:	4005      	ands	r5, r0
  40065e:	d013      	beq.n	400688 <pio_handler_process+0x40>
  400660:	4c0c      	ldr	r4, [pc, #48]	; (400694 <pio_handler_process+0x4c>)
  400662:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400666:	e003      	b.n	400670 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400668:	42b4      	cmp	r4, r6
  40066a:	d00d      	beq.n	400688 <pio_handler_process+0x40>
  40066c:	3410      	adds	r4, #16
		while (status != 0) {
  40066e:	b15d      	cbz	r5, 400688 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400670:	6820      	ldr	r0, [r4, #0]
  400672:	4540      	cmp	r0, r8
  400674:	d1f8      	bne.n	400668 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400676:	6861      	ldr	r1, [r4, #4]
  400678:	4229      	tst	r1, r5
  40067a:	d0f5      	beq.n	400668 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40067c:	68e3      	ldr	r3, [r4, #12]
  40067e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400680:	6863      	ldr	r3, [r4, #4]
  400682:	ea25 0503 	bic.w	r5, r5, r3
  400686:	e7ef      	b.n	400668 <pio_handler_process+0x20>
  400688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40068c:	0040063f 	.word	0x0040063f
  400690:	00400643 	.word	0x00400643
  400694:	204009d4 	.word	0x204009d4

00400698 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40069a:	4c18      	ldr	r4, [pc, #96]	; (4006fc <pio_handler_set+0x64>)
  40069c:	6826      	ldr	r6, [r4, #0]
  40069e:	2e06      	cmp	r6, #6
  4006a0:	d82a      	bhi.n	4006f8 <pio_handler_set+0x60>
  4006a2:	f04f 0c00 	mov.w	ip, #0
  4006a6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006a8:	4f15      	ldr	r7, [pc, #84]	; (400700 <pio_handler_set+0x68>)
  4006aa:	e004      	b.n	4006b6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006ac:	3401      	adds	r4, #1
  4006ae:	b2e4      	uxtb	r4, r4
  4006b0:	46a4      	mov	ip, r4
  4006b2:	42a6      	cmp	r6, r4
  4006b4:	d309      	bcc.n	4006ca <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4006b6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b8:	0125      	lsls	r5, r4, #4
  4006ba:	597d      	ldr	r5, [r7, r5]
  4006bc:	428d      	cmp	r5, r1
  4006be:	d1f5      	bne.n	4006ac <pio_handler_set+0x14>
  4006c0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006c4:	686d      	ldr	r5, [r5, #4]
  4006c6:	4295      	cmp	r5, r2
  4006c8:	d1f0      	bne.n	4006ac <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006ca:	4d0d      	ldr	r5, [pc, #52]	; (400700 <pio_handler_set+0x68>)
  4006cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006d0:	eb05 040e 	add.w	r4, r5, lr
  4006d4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006d8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006da:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006dc:	9906      	ldr	r1, [sp, #24]
  4006de:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006e0:	3601      	adds	r6, #1
  4006e2:	4566      	cmp	r6, ip
  4006e4:	d005      	beq.n	4006f2 <pio_handler_set+0x5a>
  4006e6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006e8:	461a      	mov	r2, r3
  4006ea:	4b06      	ldr	r3, [pc, #24]	; (400704 <pio_handler_set+0x6c>)
  4006ec:	4798      	blx	r3

	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4006f2:	4902      	ldr	r1, [pc, #8]	; (4006fc <pio_handler_set+0x64>)
  4006f4:	600e      	str	r6, [r1, #0]
  4006f6:	e7f6      	b.n	4006e6 <pio_handler_set+0x4e>
		return 1;
  4006f8:	2001      	movs	r0, #1
}
  4006fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006fc:	20400a44 	.word	0x20400a44
  400700:	204009d4 	.word	0x204009d4
  400704:	00400609 	.word	0x00400609

00400708 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400708:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40070a:	210a      	movs	r1, #10
  40070c:	4801      	ldr	r0, [pc, #4]	; (400714 <PIOA_Handler+0xc>)
  40070e:	4b02      	ldr	r3, [pc, #8]	; (400718 <PIOA_Handler+0x10>)
  400710:	4798      	blx	r3
  400712:	bd08      	pop	{r3, pc}
  400714:	400e0e00 	.word	0x400e0e00
  400718:	00400649 	.word	0x00400649

0040071c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40071c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40071e:	210b      	movs	r1, #11
  400720:	4801      	ldr	r0, [pc, #4]	; (400728 <PIOB_Handler+0xc>)
  400722:	4b02      	ldr	r3, [pc, #8]	; (40072c <PIOB_Handler+0x10>)
  400724:	4798      	blx	r3
  400726:	bd08      	pop	{r3, pc}
  400728:	400e1000 	.word	0x400e1000
  40072c:	00400649 	.word	0x00400649

00400730 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400730:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400732:	210c      	movs	r1, #12
  400734:	4801      	ldr	r0, [pc, #4]	; (40073c <PIOC_Handler+0xc>)
  400736:	4b02      	ldr	r3, [pc, #8]	; (400740 <PIOC_Handler+0x10>)
  400738:	4798      	blx	r3
  40073a:	bd08      	pop	{r3, pc}
  40073c:	400e1200 	.word	0x400e1200
  400740:	00400649 	.word	0x00400649

00400744 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400744:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400746:	2110      	movs	r1, #16
  400748:	4801      	ldr	r0, [pc, #4]	; (400750 <PIOD_Handler+0xc>)
  40074a:	4b02      	ldr	r3, [pc, #8]	; (400754 <PIOD_Handler+0x10>)
  40074c:	4798      	blx	r3
  40074e:	bd08      	pop	{r3, pc}
  400750:	400e1400 	.word	0x400e1400
  400754:	00400649 	.word	0x00400649

00400758 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400758:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40075a:	2111      	movs	r1, #17
  40075c:	4801      	ldr	r0, [pc, #4]	; (400764 <PIOE_Handler+0xc>)
  40075e:	4b02      	ldr	r3, [pc, #8]	; (400768 <PIOE_Handler+0x10>)
  400760:	4798      	blx	r3
  400762:	bd08      	pop	{r3, pc}
  400764:	400e1600 	.word	0x400e1600
  400768:	00400649 	.word	0x00400649

0040076c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40076c:	2803      	cmp	r0, #3
  40076e:	d011      	beq.n	400794 <pmc_mck_set_division+0x28>
  400770:	2804      	cmp	r0, #4
  400772:	d012      	beq.n	40079a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400774:	2802      	cmp	r0, #2
  400776:	bf0c      	ite	eq
  400778:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40077c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40077e:	4a08      	ldr	r2, [pc, #32]	; (4007a0 <pmc_mck_set_division+0x34>)
  400780:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400786:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400788:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40078a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078c:	f013 0f08 	tst.w	r3, #8
  400790:	d0fb      	beq.n	40078a <pmc_mck_set_division+0x1e>
}
  400792:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400794:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400798:	e7f1      	b.n	40077e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40079a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40079e:	e7ee      	b.n	40077e <pmc_mck_set_division+0x12>
  4007a0:	400e0600 	.word	0x400e0600

004007a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007a4:	4a17      	ldr	r2, [pc, #92]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007ac:	4318      	orrs	r0, r3
  4007ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007b2:	f013 0f08 	tst.w	r3, #8
  4007b6:	d10a      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x2a>
  4007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007bc:	4911      	ldr	r1, [pc, #68]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007c0:	f012 0f08 	tst.w	r2, #8
  4007c4:	d103      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007c6:	3b01      	subs	r3, #1
  4007c8:	d1f9      	bne.n	4007be <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007ca:	2001      	movs	r0, #1
  4007cc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ce:	4a0d      	ldr	r2, [pc, #52]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007d2:	f023 0303 	bic.w	r3, r3, #3
  4007d6:	f043 0302 	orr.w	r3, r3, #2
  4007da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007de:	f013 0f08 	tst.w	r3, #8
  4007e2:	d10a      	bne.n	4007fa <pmc_switch_mck_to_pllack+0x56>
  4007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007e8:	4906      	ldr	r1, [pc, #24]	; (400804 <pmc_switch_mck_to_pllack+0x60>)
  4007ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ec:	f012 0f08 	tst.w	r2, #8
  4007f0:	d105      	bne.n	4007fe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007f2:	3b01      	subs	r3, #1
  4007f4:	d1f9      	bne.n	4007ea <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007f6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007f8:	4770      	bx	lr
	return 0;
  4007fa:	2000      	movs	r0, #0
  4007fc:	4770      	bx	lr
  4007fe:	2000      	movs	r0, #0
  400800:	4770      	bx	lr
  400802:	bf00      	nop
  400804:	400e0600 	.word	0x400e0600

00400808 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400808:	b9a0      	cbnz	r0, 400834 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40080a:	480e      	ldr	r0, [pc, #56]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  40080c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40080e:	0209      	lsls	r1, r1, #8
  400810:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400812:	4a0d      	ldr	r2, [pc, #52]	; (400848 <pmc_switch_mainck_to_xtal+0x40>)
  400814:	401a      	ands	r2, r3
  400816:	4b0d      	ldr	r3, [pc, #52]	; (40084c <pmc_switch_mainck_to_xtal+0x44>)
  400818:	4313      	orrs	r3, r2
  40081a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40081c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40081e:	4602      	mov	r2, r0
  400820:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400822:	f013 0f01 	tst.w	r3, #1
  400826:	d0fb      	beq.n	400820 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400828:	4a06      	ldr	r2, [pc, #24]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  40082a:	6a11      	ldr	r1, [r2, #32]
  40082c:	4b08      	ldr	r3, [pc, #32]	; (400850 <pmc_switch_mainck_to_xtal+0x48>)
  40082e:	430b      	orrs	r3, r1
  400830:	6213      	str	r3, [r2, #32]
  400832:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400834:	4903      	ldr	r1, [pc, #12]	; (400844 <pmc_switch_mainck_to_xtal+0x3c>)
  400836:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400838:	4a06      	ldr	r2, [pc, #24]	; (400854 <pmc_switch_mainck_to_xtal+0x4c>)
  40083a:	401a      	ands	r2, r3
  40083c:	4b06      	ldr	r3, [pc, #24]	; (400858 <pmc_switch_mainck_to_xtal+0x50>)
  40083e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400840:	620b      	str	r3, [r1, #32]
  400842:	4770      	bx	lr
  400844:	400e0600 	.word	0x400e0600
  400848:	ffc8fffc 	.word	0xffc8fffc
  40084c:	00370001 	.word	0x00370001
  400850:	01370000 	.word	0x01370000
  400854:	fec8fffc 	.word	0xfec8fffc
  400858:	01370002 	.word	0x01370002

0040085c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40085c:	4b02      	ldr	r3, [pc, #8]	; (400868 <pmc_osc_is_ready_mainck+0xc>)
  40085e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400860:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0600 	.word	0x400e0600

0040086c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40086c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400870:	4b01      	ldr	r3, [pc, #4]	; (400878 <pmc_disable_pllack+0xc>)
  400872:	629a      	str	r2, [r3, #40]	; 0x28
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	400e0600 	.word	0x400e0600

0040087c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40087c:	4b02      	ldr	r3, [pc, #8]	; (400888 <pmc_is_locked_pllack+0xc>)
  40087e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400880:	f000 0002 	and.w	r0, r0, #2
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0600 	.word	0x400e0600

0040088c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40088c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400890:	4b05      	ldr	r3, [pc, #20]	; (4008a8 <pmc_enable_periph_clk+0x1c>)
  400892:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400896:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40089a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40089e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4008a2:	2000      	movs	r0, #0
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	400e0600 	.word	0x400e0600

004008ac <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4008ac:	4770      	bx	lr
	...

004008b0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4008b0:	4a10      	ldr	r2, [pc, #64]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4008bc:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4008be:	6a11      	ldr	r1, [r2, #32]
  4008c0:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <pmc_enable_waitmode+0x48>)
  4008c2:	430b      	orrs	r3, r1
  4008c4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008c8:	f013 0f08 	tst.w	r3, #8
  4008cc:	d0fb      	beq.n	4008c6 <pmc_enable_waitmode+0x16>
  4008ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
  4008d2:	bf00      	nop
	for (i = 0; i < 500; i++) {
  4008d4:	3b01      	subs	r3, #1
  4008d6:	d1fc      	bne.n	4008d2 <pmc_enable_waitmode+0x22>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4008d8:	4a06      	ldr	r2, [pc, #24]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008da:	6a13      	ldr	r3, [r2, #32]
  4008dc:	f013 0f08 	tst.w	r3, #8
  4008e0:	d0fb      	beq.n	4008da <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4008e2:	4a04      	ldr	r2, [pc, #16]	; (4008f4 <pmc_enable_waitmode+0x44>)
  4008e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4008ee:	6713      	str	r3, [r2, #112]	; 0x70
  4008f0:	4770      	bx	lr
  4008f2:	bf00      	nop
  4008f4:	400e0600 	.word	0x400e0600
  4008f8:	00370004 	.word	0x00370004

004008fc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4008fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400900:	1e43      	subs	r3, r0, #1
  400902:	2b04      	cmp	r3, #4
  400904:	f200 8107 	bhi.w	400b16 <pmc_sleep+0x21a>
  400908:	e8df f013 	tbh	[pc, r3, lsl #1]
  40090c:	00050005 	.word	0x00050005
  400910:	00150015 	.word	0x00150015
  400914:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400916:	4a81      	ldr	r2, [pc, #516]	; (400b1c <pmc_sleep+0x220>)
  400918:	6913      	ldr	r3, [r2, #16]
  40091a:	f023 0304 	bic.w	r3, r3, #4
  40091e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400920:	2201      	movs	r2, #1
  400922:	4b7f      	ldr	r3, [pc, #508]	; (400b20 <pmc_sleep+0x224>)
  400924:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400926:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40092a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  40092c:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  400930:	bf30      	wfi
		break;
  400932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400936:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400938:	2803      	cmp	r0, #3
  40093a:	bf0c      	ite	eq
  40093c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40093e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400942:	4b78      	ldr	r3, [pc, #480]	; (400b24 <pmc_sleep+0x228>)
  400944:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400946:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400948:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40094c:	2200      	movs	r2, #0
  40094e:	4b74      	ldr	r3, [pc, #464]	; (400b20 <pmc_sleep+0x224>)
  400950:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400952:	2201      	movs	r2, #1
  400954:	4b74      	ldr	r3, [pc, #464]	; (400b28 <pmc_sleep+0x22c>)
  400956:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400958:	4b74      	ldr	r3, [pc, #464]	; (400b2c <pmc_sleep+0x230>)
  40095a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40095c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40095e:	4a74      	ldr	r2, [pc, #464]	; (400b30 <pmc_sleep+0x234>)
  400960:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400964:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400966:	4a73      	ldr	r2, [pc, #460]	; (400b34 <pmc_sleep+0x238>)
  400968:	433a      	orrs	r2, r7
  40096a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40096c:	f005 0903 	and.w	r9, r5, #3
  400970:	f1b9 0f01 	cmp.w	r9, #1
  400974:	f240 8089 	bls.w	400a8a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400978:	f025 0103 	bic.w	r1, r5, #3
  40097c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400980:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400982:	461a      	mov	r2, r3
  400984:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400986:	f013 0f08 	tst.w	r3, #8
  40098a:	d0fb      	beq.n	400984 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40098c:	f011 0f70 	tst.w	r1, #112	; 0x70
  400990:	d008      	beq.n	4009a4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400992:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400996:	4b65      	ldr	r3, [pc, #404]	; (400b2c <pmc_sleep+0x230>)
  400998:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40099a:	461a      	mov	r2, r3
  40099c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40099e:	f013 0f08 	tst.w	r3, #8
  4009a2:	d0fb      	beq.n	40099c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4009a4:	4b64      	ldr	r3, [pc, #400]	; (400b38 <pmc_sleep+0x23c>)
  4009a6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009a8:	4a60      	ldr	r2, [pc, #384]	; (400b2c <pmc_sleep+0x230>)
  4009aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4009b0:	d0fb      	beq.n	4009aa <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009b2:	4a5e      	ldr	r2, [pc, #376]	; (400b2c <pmc_sleep+0x230>)
  4009b4:	6a11      	ldr	r1, [r2, #32]
  4009b6:	4b61      	ldr	r3, [pc, #388]	; (400b3c <pmc_sleep+0x240>)
  4009b8:	400b      	ands	r3, r1
  4009ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4009c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009c6:	d0fb      	beq.n	4009c0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4009c8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4009cc:	4a58      	ldr	r2, [pc, #352]	; (400b30 <pmc_sleep+0x234>)
  4009ce:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4009d0:	2c04      	cmp	r4, #4
  4009d2:	d05c      	beq.n	400a8e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4009d4:	4c52      	ldr	r4, [pc, #328]	; (400b20 <pmc_sleep+0x224>)
  4009d6:	2301      	movs	r3, #1
  4009d8:	7023      	strb	r3, [r4, #0]
  4009da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009de:	b662      	cpsie	i

		pmc_enable_waitmode();
  4009e0:	4b57      	ldr	r3, [pc, #348]	; (400b40 <pmc_sleep+0x244>)
  4009e2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4009e4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4009e6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4009ea:	2300      	movs	r3, #0
  4009ec:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4009ee:	f017 0f02 	tst.w	r7, #2
  4009f2:	d055      	beq.n	400aa0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009f4:	4a4d      	ldr	r2, [pc, #308]	; (400b2c <pmc_sleep+0x230>)
  4009f6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009f8:	4952      	ldr	r1, [pc, #328]	; (400b44 <pmc_sleep+0x248>)
  4009fa:	4019      	ands	r1, r3
  4009fc:	4b52      	ldr	r3, [pc, #328]	; (400b48 <pmc_sleep+0x24c>)
  4009fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a00:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a02:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  400a04:	4b51      	ldr	r3, [pc, #324]	; (400b4c <pmc_sleep+0x250>)
  400a06:	400b      	ands	r3, r1
  400a08:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a0c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400a0e:	4b50      	ldr	r3, [pc, #320]	; (400b50 <pmc_sleep+0x254>)
  400a10:	4033      	ands	r3, r6
  400a12:	2b00      	cmp	r3, #0
  400a14:	d06e      	beq.n	400af4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400a16:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400a1a:	4b44      	ldr	r3, [pc, #272]	; (400b2c <pmc_sleep+0x230>)
  400a1c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400a1e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400a20:	f1b9 0f02 	cmp.w	r9, #2
  400a24:	d104      	bne.n	400a30 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400a26:	4a41      	ldr	r2, [pc, #260]	; (400b2c <pmc_sleep+0x230>)
  400a28:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a2a:	f013 0f02 	tst.w	r3, #2
  400a2e:	d0fb      	beq.n	400a28 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400a30:	4a3e      	ldr	r2, [pc, #248]	; (400b2c <pmc_sleep+0x230>)
  400a32:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400a38:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400a3c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a3e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a42:	f013 0f08 	tst.w	r3, #8
  400a46:	d0fb      	beq.n	400a40 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400a48:	4b39      	ldr	r3, [pc, #228]	; (400b30 <pmc_sleep+0x234>)
  400a4a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400a4e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400a52:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a54:	461a      	mov	r2, r3
  400a56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a58:	f013 0f08 	tst.w	r3, #8
  400a5c:	d0fb      	beq.n	400a56 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400a5e:	4a33      	ldr	r2, [pc, #204]	; (400b2c <pmc_sleep+0x230>)
  400a60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a62:	420b      	tst	r3, r1
  400a64:	d0fc      	beq.n	400a60 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400a66:	2200      	movs	r2, #0
  400a68:	4b2f      	ldr	r3, [pc, #188]	; (400b28 <pmc_sleep+0x22c>)
  400a6a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400a6c:	4b39      	ldr	r3, [pc, #228]	; (400b54 <pmc_sleep+0x258>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	b11b      	cbz	r3, 400a7a <pmc_sleep+0x17e>
			callback_clocks_restored();
  400a72:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400a74:	2200      	movs	r2, #0
  400a76:	4b37      	ldr	r3, [pc, #220]	; (400b54 <pmc_sleep+0x258>)
  400a78:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400a7a:	2201      	movs	r2, #1
  400a7c:	4b28      	ldr	r3, [pc, #160]	; (400b20 <pmc_sleep+0x224>)
  400a7e:	701a      	strb	r2, [r3, #0]
  400a80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a84:	b662      	cpsie	i
  400a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400a8a:	4629      	mov	r1, r5
  400a8c:	e77e      	b.n	40098c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a8e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400a92:	6a11      	ldr	r1, [r2, #32]
  400a94:	4b30      	ldr	r3, [pc, #192]	; (400b58 <pmc_sleep+0x25c>)
  400a96:	400b      	ands	r3, r1
  400a98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a9c:	6213      	str	r3, [r2, #32]
  400a9e:	e799      	b.n	4009d4 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400aa0:	f017 0f01 	tst.w	r7, #1
  400aa4:	d0b3      	beq.n	400a0e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400aa6:	4b21      	ldr	r3, [pc, #132]	; (400b2c <pmc_sleep+0x230>)
  400aa8:	6a1b      	ldr	r3, [r3, #32]
  400aaa:	f013 0f01 	tst.w	r3, #1
  400aae:	d10b      	bne.n	400ac8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ab0:	491e      	ldr	r1, [pc, #120]	; (400b2c <pmc_sleep+0x230>)
  400ab2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400ab4:	4a29      	ldr	r2, [pc, #164]	; (400b5c <pmc_sleep+0x260>)
  400ab6:	401a      	ands	r2, r3
  400ab8:	4b29      	ldr	r3, [pc, #164]	; (400b60 <pmc_sleep+0x264>)
  400aba:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400abc:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400abe:	460a      	mov	r2, r1
  400ac0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ac2:	f013 0f01 	tst.w	r3, #1
  400ac6:	d0fb      	beq.n	400ac0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400ac8:	4b18      	ldr	r3, [pc, #96]	; (400b2c <pmc_sleep+0x230>)
  400aca:	6a1b      	ldr	r3, [r3, #32]
  400acc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ad0:	d108      	bne.n	400ae4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ad2:	4a16      	ldr	r2, [pc, #88]	; (400b2c <pmc_sleep+0x230>)
  400ad4:	6a11      	ldr	r1, [r2, #32]
  400ad6:	4b23      	ldr	r3, [pc, #140]	; (400b64 <pmc_sleep+0x268>)
  400ad8:	430b      	orrs	r3, r1
  400ada:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400adc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ade:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400ae2:	d0fb      	beq.n	400adc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ae4:	4a11      	ldr	r2, [pc, #68]	; (400b2c <pmc_sleep+0x230>)
  400ae6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  400ae8:	4b18      	ldr	r3, [pc, #96]	; (400b4c <pmc_sleep+0x250>)
  400aea:	400b      	ands	r3, r1
  400aec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400af0:	6213      	str	r3, [r2, #32]
  400af2:	e78c      	b.n	400a0e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  400af4:	2100      	movs	r1, #0
  400af6:	e793      	b.n	400a20 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400af8:	4a08      	ldr	r2, [pc, #32]	; (400b1c <pmc_sleep+0x220>)
  400afa:	6913      	ldr	r3, [r2, #16]
  400afc:	f043 0304 	orr.w	r3, r3, #4
  400b00:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400b02:	4a19      	ldr	r2, [pc, #100]	; (400b68 <pmc_sleep+0x26c>)
  400b04:	4b19      	ldr	r3, [pc, #100]	; (400b6c <pmc_sleep+0x270>)
  400b06:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400b08:	2201      	movs	r2, #1
  400b0a:	4b05      	ldr	r3, [pc, #20]	; (400b20 <pmc_sleep+0x224>)
  400b0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400b0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b12:	b662      	cpsie	i
		__WFI() ;
  400b14:	bf30      	wfi
  400b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b1a:	bf00      	nop
  400b1c:	e000ed00 	.word	0xe000ed00
  400b20:	20400000 	.word	0x20400000
  400b24:	004008ad 	.word	0x004008ad
  400b28:	20400a48 	.word	0x20400a48
  400b2c:	400e0600 	.word	0x400e0600
  400b30:	400e0c00 	.word	0x400e0c00
  400b34:	00370008 	.word	0x00370008
  400b38:	0040086d 	.word	0x0040086d
  400b3c:	fec8ffff 	.word	0xfec8ffff
  400b40:	004008b1 	.word	0x004008b1
  400b44:	fec8fffc 	.word	0xfec8fffc
  400b48:	01370002 	.word	0x01370002
  400b4c:	ffc8ff87 	.word	0xffc8ff87
  400b50:	07ff0000 	.word	0x07ff0000
  400b54:	20400a4c 	.word	0x20400a4c
  400b58:	ffc8fffe 	.word	0xffc8fffe
  400b5c:	ffc8fffc 	.word	0xffc8fffc
  400b60:	00370001 	.word	0x00370001
  400b64:	01370000 	.word	0x01370000
  400b68:	a5000004 	.word	0xa5000004
  400b6c:	400e1810 	.word	0x400e1810

00400b70 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b70:	6943      	ldr	r3, [r0, #20]
  400b72:	f013 0f02 	tst.w	r3, #2
  400b76:	d002      	beq.n	400b7e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b78:	61c1      	str	r1, [r0, #28]
	return 0;
  400b7a:	2000      	movs	r0, #0
  400b7c:	4770      	bx	lr
		return 1;
  400b7e:	2001      	movs	r0, #1
}
  400b80:	4770      	bx	lr

00400b82 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b82:	6943      	ldr	r3, [r0, #20]
  400b84:	f013 0f01 	tst.w	r3, #1
  400b88:	d003      	beq.n	400b92 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b8a:	6983      	ldr	r3, [r0, #24]
  400b8c:	700b      	strb	r3, [r1, #0]
	return 0;
  400b8e:	2000      	movs	r0, #0
  400b90:	4770      	bx	lr
		return 1;
  400b92:	2001      	movs	r0, #1
}
  400b94:	4770      	bx	lr

00400b96 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400b96:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400b98:	010b      	lsls	r3, r1, #4
  400b9a:	4293      	cmp	r3, r2
  400b9c:	d914      	bls.n	400bc8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400b9e:	00c9      	lsls	r1, r1, #3
  400ba0:	084b      	lsrs	r3, r1, #1
  400ba2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ba6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400baa:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bac:	1e5c      	subs	r4, r3, #1
  400bae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bb2:	428c      	cmp	r4, r1
  400bb4:	d901      	bls.n	400bba <usart_set_async_baudrate+0x24>
		return 1;
  400bb6:	2001      	movs	r0, #1
  400bb8:	e017      	b.n	400bea <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400bba:	6841      	ldr	r1, [r0, #4]
  400bbc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400bc0:	6041      	str	r1, [r0, #4]
  400bc2:	e00c      	b.n	400bde <usart_set_async_baudrate+0x48>
		return 1;
  400bc4:	2001      	movs	r0, #1
  400bc6:	e010      	b.n	400bea <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400bc8:	0859      	lsrs	r1, r3, #1
  400bca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400bce:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400bd2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bd4:	1e5c      	subs	r4, r3, #1
  400bd6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bda:	428c      	cmp	r4, r1
  400bdc:	d8f2      	bhi.n	400bc4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400bde:	0412      	lsls	r2, r2, #16
  400be0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400be4:	431a      	orrs	r2, r3
  400be6:	6202      	str	r2, [r0, #32]

	return 0;
  400be8:	2000      	movs	r0, #0
}
  400bea:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bee:	4770      	bx	lr

00400bf0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <usart_reset+0x24>)
  400bf2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400bf6:	2300      	movs	r3, #0
  400bf8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400bfa:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400bfc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bfe:	2388      	movs	r3, #136	; 0x88
  400c00:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c02:	2324      	movs	r3, #36	; 0x24
  400c04:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400c06:	f44f 7380 	mov.w	r3, #256	; 0x100
  400c0a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400c0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400c10:	6003      	str	r3, [r0, #0]
  400c12:	4770      	bx	lr
  400c14:	55534100 	.word	0x55534100

00400c18 <usart_init_rs232>:
{
  400c18:	b570      	push	{r4, r5, r6, lr}
  400c1a:	4605      	mov	r5, r0
  400c1c:	460c      	mov	r4, r1
  400c1e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400c20:	4b0f      	ldr	r3, [pc, #60]	; (400c60 <usart_init_rs232+0x48>)
  400c22:	4798      	blx	r3
	ul_reg_val = 0;
  400c24:	2200      	movs	r2, #0
  400c26:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <usart_init_rs232+0x4c>)
  400c28:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c2a:	b1a4      	cbz	r4, 400c56 <usart_init_rs232+0x3e>
  400c2c:	4632      	mov	r2, r6
  400c2e:	6821      	ldr	r1, [r4, #0]
  400c30:	4628      	mov	r0, r5
  400c32:	4b0d      	ldr	r3, [pc, #52]	; (400c68 <usart_init_rs232+0x50>)
  400c34:	4798      	blx	r3
  400c36:	4602      	mov	r2, r0
  400c38:	b978      	cbnz	r0, 400c5a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c3a:	6863      	ldr	r3, [r4, #4]
  400c3c:	68a1      	ldr	r1, [r4, #8]
  400c3e:	430b      	orrs	r3, r1
  400c40:	6921      	ldr	r1, [r4, #16]
  400c42:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c44:	68e1      	ldr	r1, [r4, #12]
  400c46:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c48:	4906      	ldr	r1, [pc, #24]	; (400c64 <usart_init_rs232+0x4c>)
  400c4a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400c4c:	6869      	ldr	r1, [r5, #4]
  400c4e:	430b      	orrs	r3, r1
  400c50:	606b      	str	r3, [r5, #4]
}
  400c52:	4610      	mov	r0, r2
  400c54:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400c56:	2201      	movs	r2, #1
  400c58:	e7fb      	b.n	400c52 <usart_init_rs232+0x3a>
  400c5a:	2201      	movs	r2, #1
  400c5c:	e7f9      	b.n	400c52 <usart_init_rs232+0x3a>
  400c5e:	bf00      	nop
  400c60:	00400bf1 	.word	0x00400bf1
  400c64:	20400a50 	.word	0x20400a50
  400c68:	00400b97 	.word	0x00400b97

00400c6c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400c6c:	2340      	movs	r3, #64	; 0x40
  400c6e:	6003      	str	r3, [r0, #0]
  400c70:	4770      	bx	lr

00400c72 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400c72:	2310      	movs	r3, #16
  400c74:	6003      	str	r3, [r0, #0]
  400c76:	4770      	bx	lr

00400c78 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  400c78:	6081      	str	r1, [r0, #8]
  400c7a:	4770      	bx	lr

00400c7c <usart_get_status>:
	return p_usart->US_CSR;
  400c7c:	6940      	ldr	r0, [r0, #20]
}
  400c7e:	4770      	bx	lr

00400c80 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c80:	6943      	ldr	r3, [r0, #20]
  400c82:	f013 0f02 	tst.w	r3, #2
  400c86:	d004      	beq.n	400c92 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400c88:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400c8c:	61c1      	str	r1, [r0, #28]
	return 0;
  400c8e:	2000      	movs	r0, #0
  400c90:	4770      	bx	lr
		return 1;
  400c92:	2001      	movs	r0, #1
}
  400c94:	4770      	bx	lr

00400c96 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c96:	6943      	ldr	r3, [r0, #20]
  400c98:	f013 0f01 	tst.w	r3, #1
  400c9c:	d005      	beq.n	400caa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c9e:	6983      	ldr	r3, [r0, #24]
  400ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400ca4:	600b      	str	r3, [r1, #0]
	return 0;
  400ca6:	2000      	movs	r0, #0
  400ca8:	4770      	bx	lr
		return 1;
  400caa:	2001      	movs	r0, #1
}
  400cac:	4770      	bx	lr

00400cae <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400cae:	e7fe      	b.n	400cae <Dummy_Handler>

00400cb0 <Reset_Handler>:
{
  400cb0:	b500      	push	{lr}
  400cb2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400cb4:	4b25      	ldr	r3, [pc, #148]	; (400d4c <Reset_Handler+0x9c>)
  400cb6:	4a26      	ldr	r2, [pc, #152]	; (400d50 <Reset_Handler+0xa0>)
  400cb8:	429a      	cmp	r2, r3
  400cba:	d010      	beq.n	400cde <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400cbc:	4b25      	ldr	r3, [pc, #148]	; (400d54 <Reset_Handler+0xa4>)
  400cbe:	4a23      	ldr	r2, [pc, #140]	; (400d4c <Reset_Handler+0x9c>)
  400cc0:	429a      	cmp	r2, r3
  400cc2:	d20c      	bcs.n	400cde <Reset_Handler+0x2e>
  400cc4:	3b01      	subs	r3, #1
  400cc6:	1a9b      	subs	r3, r3, r2
  400cc8:	f023 0303 	bic.w	r3, r3, #3
  400ccc:	3304      	adds	r3, #4
  400cce:	4413      	add	r3, r2
  400cd0:	491f      	ldr	r1, [pc, #124]	; (400d50 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400cd2:	f851 0b04 	ldr.w	r0, [r1], #4
  400cd6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400cda:	429a      	cmp	r2, r3
  400cdc:	d1f9      	bne.n	400cd2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400cde:	4b1e      	ldr	r3, [pc, #120]	; (400d58 <Reset_Handler+0xa8>)
  400ce0:	4a1e      	ldr	r2, [pc, #120]	; (400d5c <Reset_Handler+0xac>)
  400ce2:	429a      	cmp	r2, r3
  400ce4:	d20a      	bcs.n	400cfc <Reset_Handler+0x4c>
  400ce6:	3b01      	subs	r3, #1
  400ce8:	1a9b      	subs	r3, r3, r2
  400cea:	f023 0303 	bic.w	r3, r3, #3
  400cee:	3304      	adds	r3, #4
  400cf0:	4413      	add	r3, r2
                *pDest++ = 0;
  400cf2:	2100      	movs	r1, #0
  400cf4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400cf8:	4293      	cmp	r3, r2
  400cfa:	d1fb      	bne.n	400cf4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400cfc:	4a18      	ldr	r2, [pc, #96]	; (400d60 <Reset_Handler+0xb0>)
  400cfe:	4b19      	ldr	r3, [pc, #100]	; (400d64 <Reset_Handler+0xb4>)
  400d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400d04:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d06:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d0a:	fab3 f383 	clz	r3, r3
  400d0e:	095b      	lsrs	r3, r3, #5
  400d10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d12:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d18:	2200      	movs	r2, #0
  400d1a:	4b13      	ldr	r3, [pc, #76]	; (400d68 <Reset_Handler+0xb8>)
  400d1c:	701a      	strb	r2, [r3, #0]
	return flags;
  400d1e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d20:	4a12      	ldr	r2, [pc, #72]	; (400d6c <Reset_Handler+0xbc>)
  400d22:	6813      	ldr	r3, [r2, #0]
  400d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d2e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d32:	b129      	cbz	r1, 400d40 <Reset_Handler+0x90>
		cpu_irq_enable();
  400d34:	2201      	movs	r2, #1
  400d36:	4b0c      	ldr	r3, [pc, #48]	; (400d68 <Reset_Handler+0xb8>)
  400d38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400d3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d3e:	b662      	cpsie	i
        __libc_init_array();
  400d40:	4b0b      	ldr	r3, [pc, #44]	; (400d70 <Reset_Handler+0xc0>)
  400d42:	4798      	blx	r3
        main();
  400d44:	4b0b      	ldr	r3, [pc, #44]	; (400d74 <Reset_Handler+0xc4>)
  400d46:	4798      	blx	r3
  400d48:	e7fe      	b.n	400d48 <Reset_Handler+0x98>
  400d4a:	bf00      	nop
  400d4c:	20400000 	.word	0x20400000
  400d50:	00406f88 	.word	0x00406f88
  400d54:	204009b8 	.word	0x204009b8
  400d58:	20400c5c 	.word	0x20400c5c
  400d5c:	204009b8 	.word	0x204009b8
  400d60:	e000ed00 	.word	0xe000ed00
  400d64:	00400000 	.word	0x00400000
  400d68:	20400000 	.word	0x20400000
  400d6c:	e000ed88 	.word	0xe000ed88
  400d70:	004038e1 	.word	0x004038e1
  400d74:	00403661 	.word	0x00403661

00400d78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400d78:	4b3b      	ldr	r3, [pc, #236]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d7c:	f003 0303 	and.w	r3, r3, #3
  400d80:	2b01      	cmp	r3, #1
  400d82:	d01d      	beq.n	400dc0 <SystemCoreClockUpdate+0x48>
  400d84:	b183      	cbz	r3, 400da8 <SystemCoreClockUpdate+0x30>
  400d86:	2b02      	cmp	r3, #2
  400d88:	d036      	beq.n	400df8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400d8a:	4b37      	ldr	r3, [pc, #220]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d92:	2b70      	cmp	r3, #112	; 0x70
  400d94:	d05f      	beq.n	400e56 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d96:	4b34      	ldr	r3, [pc, #208]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d9a:	4934      	ldr	r1, [pc, #208]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400d9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400da0:	680b      	ldr	r3, [r1, #0]
  400da2:	40d3      	lsrs	r3, r2
  400da4:	600b      	str	r3, [r1, #0]
  400da6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400da8:	4b31      	ldr	r3, [pc, #196]	; (400e70 <SystemCoreClockUpdate+0xf8>)
  400daa:	695b      	ldr	r3, [r3, #20]
  400dac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400db0:	bf14      	ite	ne
  400db2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400db6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400dba:	4b2c      	ldr	r3, [pc, #176]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dbc:	601a      	str	r2, [r3, #0]
  400dbe:	e7e4      	b.n	400d8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400dc0:	4b29      	ldr	r3, [pc, #164]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dc2:	6a1b      	ldr	r3, [r3, #32]
  400dc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400dc8:	d003      	beq.n	400dd2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400dca:	4a2a      	ldr	r2, [pc, #168]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400dcc:	4b27      	ldr	r3, [pc, #156]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dce:	601a      	str	r2, [r3, #0]
  400dd0:	e7db      	b.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dd2:	4a29      	ldr	r2, [pc, #164]	; (400e78 <SystemCoreClockUpdate+0x100>)
  400dd4:	4b25      	ldr	r3, [pc, #148]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dd6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400dd8:	4b23      	ldr	r3, [pc, #140]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dda:	6a1b      	ldr	r3, [r3, #32]
  400ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400de0:	2b10      	cmp	r3, #16
  400de2:	d005      	beq.n	400df0 <SystemCoreClockUpdate+0x78>
  400de4:	2b20      	cmp	r3, #32
  400de6:	d1d0      	bne.n	400d8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400de8:	4a22      	ldr	r2, [pc, #136]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400dea:	4b20      	ldr	r3, [pc, #128]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400dec:	601a      	str	r2, [r3, #0]
          break;
  400dee:	e7cc      	b.n	400d8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400df0:	4a22      	ldr	r2, [pc, #136]	; (400e7c <SystemCoreClockUpdate+0x104>)
  400df2:	4b1e      	ldr	r3, [pc, #120]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400df4:	601a      	str	r2, [r3, #0]
          break;
  400df6:	e7c8      	b.n	400d8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400df8:	4b1b      	ldr	r3, [pc, #108]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400dfa:	6a1b      	ldr	r3, [r3, #32]
  400dfc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e00:	d016      	beq.n	400e30 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400e02:	4a1c      	ldr	r2, [pc, #112]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400e04:	4b19      	ldr	r3, [pc, #100]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e06:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400e08:	4b17      	ldr	r3, [pc, #92]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e0c:	f003 0303 	and.w	r3, r3, #3
  400e10:	2b02      	cmp	r3, #2
  400e12:	d1ba      	bne.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e14:	4a14      	ldr	r2, [pc, #80]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e16:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400e1a:	4814      	ldr	r0, [pc, #80]	; (400e6c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e1c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e20:	6803      	ldr	r3, [r0, #0]
  400e22:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e26:	b2d2      	uxtb	r2, r2
  400e28:	fbb3 f3f2 	udiv	r3, r3, r2
  400e2c:	6003      	str	r3, [r0, #0]
  400e2e:	e7ac      	b.n	400d8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e30:	4a11      	ldr	r2, [pc, #68]	; (400e78 <SystemCoreClockUpdate+0x100>)
  400e32:	4b0e      	ldr	r3, [pc, #56]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e34:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e36:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <SystemCoreClockUpdate+0xf0>)
  400e38:	6a1b      	ldr	r3, [r3, #32]
  400e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e3e:	2b10      	cmp	r3, #16
  400e40:	d005      	beq.n	400e4e <SystemCoreClockUpdate+0xd6>
  400e42:	2b20      	cmp	r3, #32
  400e44:	d1e0      	bne.n	400e08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400e46:	4a0b      	ldr	r2, [pc, #44]	; (400e74 <SystemCoreClockUpdate+0xfc>)
  400e48:	4b08      	ldr	r3, [pc, #32]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e4a:	601a      	str	r2, [r3, #0]
          break;
  400e4c:	e7dc      	b.n	400e08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400e4e:	4a0b      	ldr	r2, [pc, #44]	; (400e7c <SystemCoreClockUpdate+0x104>)
  400e50:	4b06      	ldr	r3, [pc, #24]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e52:	601a      	str	r2, [r3, #0]
          break;
  400e54:	e7d8      	b.n	400e08 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400e56:	4a05      	ldr	r2, [pc, #20]	; (400e6c <SystemCoreClockUpdate+0xf4>)
  400e58:	6813      	ldr	r3, [r2, #0]
  400e5a:	4909      	ldr	r1, [pc, #36]	; (400e80 <SystemCoreClockUpdate+0x108>)
  400e5c:	fba1 1303 	umull	r1, r3, r1, r3
  400e60:	085b      	lsrs	r3, r3, #1
  400e62:	6013      	str	r3, [r2, #0]
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	400e0600 	.word	0x400e0600
  400e6c:	20400004 	.word	0x20400004
  400e70:	400e1810 	.word	0x400e1810
  400e74:	00b71b00 	.word	0x00b71b00
  400e78:	003d0900 	.word	0x003d0900
  400e7c:	007a1200 	.word	0x007a1200
  400e80:	aaaaaaab 	.word	0xaaaaaaab

00400e84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400e84:	4b16      	ldr	r3, [pc, #88]	; (400ee0 <system_init_flash+0x5c>)
  400e86:	4298      	cmp	r0, r3
  400e88:	d913      	bls.n	400eb2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400e8a:	4b16      	ldr	r3, [pc, #88]	; (400ee4 <system_init_flash+0x60>)
  400e8c:	4298      	cmp	r0, r3
  400e8e:	d915      	bls.n	400ebc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e90:	4b15      	ldr	r3, [pc, #84]	; (400ee8 <system_init_flash+0x64>)
  400e92:	4298      	cmp	r0, r3
  400e94:	d916      	bls.n	400ec4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e96:	4b15      	ldr	r3, [pc, #84]	; (400eec <system_init_flash+0x68>)
  400e98:	4298      	cmp	r0, r3
  400e9a:	d917      	bls.n	400ecc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e9c:	4b14      	ldr	r3, [pc, #80]	; (400ef0 <system_init_flash+0x6c>)
  400e9e:	4298      	cmp	r0, r3
  400ea0:	d918      	bls.n	400ed4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400ea2:	4b14      	ldr	r3, [pc, #80]	; (400ef4 <system_init_flash+0x70>)
  400ea4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ea6:	bf94      	ite	ls
  400ea8:	4a13      	ldrls	r2, [pc, #76]	; (400ef8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400eaa:	4a14      	ldrhi	r2, [pc, #80]	; (400efc <system_init_flash+0x78>)
  400eac:	4b14      	ldr	r3, [pc, #80]	; (400f00 <system_init_flash+0x7c>)
  400eae:	601a      	str	r2, [r3, #0]
  400eb0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400eb6:	4b12      	ldr	r3, [pc, #72]	; (400f00 <system_init_flash+0x7c>)
  400eb8:	601a      	str	r2, [r3, #0]
  400eba:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ebc:	4a11      	ldr	r2, [pc, #68]	; (400f04 <system_init_flash+0x80>)
  400ebe:	4b10      	ldr	r3, [pc, #64]	; (400f00 <system_init_flash+0x7c>)
  400ec0:	601a      	str	r2, [r3, #0]
  400ec2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ec4:	4a10      	ldr	r2, [pc, #64]	; (400f08 <system_init_flash+0x84>)
  400ec6:	4b0e      	ldr	r3, [pc, #56]	; (400f00 <system_init_flash+0x7c>)
  400ec8:	601a      	str	r2, [r3, #0]
  400eca:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ecc:	4a0f      	ldr	r2, [pc, #60]	; (400f0c <system_init_flash+0x88>)
  400ece:	4b0c      	ldr	r3, [pc, #48]	; (400f00 <system_init_flash+0x7c>)
  400ed0:	601a      	str	r2, [r3, #0]
  400ed2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ed4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ed8:	4b09      	ldr	r3, [pc, #36]	; (400f00 <system_init_flash+0x7c>)
  400eda:	601a      	str	r2, [r3, #0]
  400edc:	4770      	bx	lr
  400ede:	bf00      	nop
  400ee0:	015ef3bf 	.word	0x015ef3bf
  400ee4:	02bde77f 	.word	0x02bde77f
  400ee8:	041cdb3f 	.word	0x041cdb3f
  400eec:	057bceff 	.word	0x057bceff
  400ef0:	06dac2bf 	.word	0x06dac2bf
  400ef4:	0839b67f 	.word	0x0839b67f
  400ef8:	04000500 	.word	0x04000500
  400efc:	04000600 	.word	0x04000600
  400f00:	400e0c00 	.word	0x400e0c00
  400f04:	04000100 	.word	0x04000100
  400f08:	04000200 	.word	0x04000200
  400f0c:	04000300 	.word	0x04000300

00400f10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f10:	4b0a      	ldr	r3, [pc, #40]	; (400f3c <_sbrk+0x2c>)
  400f12:	681b      	ldr	r3, [r3, #0]
  400f14:	b153      	cbz	r3, 400f2c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f16:	4b09      	ldr	r3, [pc, #36]	; (400f3c <_sbrk+0x2c>)
  400f18:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f1a:	181a      	adds	r2, r3, r0
  400f1c:	4908      	ldr	r1, [pc, #32]	; (400f40 <_sbrk+0x30>)
  400f1e:	4291      	cmp	r1, r2
  400f20:	db08      	blt.n	400f34 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f22:	4610      	mov	r0, r2
  400f24:	4a05      	ldr	r2, [pc, #20]	; (400f3c <_sbrk+0x2c>)
  400f26:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f28:	4618      	mov	r0, r3
  400f2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f2c:	4a05      	ldr	r2, [pc, #20]	; (400f44 <_sbrk+0x34>)
  400f2e:	4b03      	ldr	r3, [pc, #12]	; (400f3c <_sbrk+0x2c>)
  400f30:	601a      	str	r2, [r3, #0]
  400f32:	e7f0      	b.n	400f16 <_sbrk+0x6>
		return (caddr_t) -1;	
  400f34:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	20400a54 	.word	0x20400a54
  400f40:	2045fffc 	.word	0x2045fffc
  400f44:	20402e60 	.word	0x20402e60

00400f48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400f48:	f04f 30ff 	mov.w	r0, #4294967295
  400f4c:	4770      	bx	lr

00400f4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f52:	604b      	str	r3, [r1, #4]

	return 0;
}
  400f54:	2000      	movs	r0, #0
  400f56:	4770      	bx	lr

00400f58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400f58:	2001      	movs	r0, #1
  400f5a:	4770      	bx	lr

00400f5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f5c:	2000      	movs	r0, #0
  400f5e:	4770      	bx	lr

00400f60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f60:	f100 0308 	add.w	r3, r0, #8
  400f64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400f66:	f04f 32ff 	mov.w	r2, #4294967295
  400f6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400f70:	2300      	movs	r3, #0
  400f72:	6003      	str	r3, [r0, #0]
  400f74:	4770      	bx	lr

00400f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400f76:	2300      	movs	r3, #0
  400f78:	6103      	str	r3, [r0, #16]
  400f7a:	4770      	bx	lr

00400f7c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400f7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400f7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400f80:	689a      	ldr	r2, [r3, #8]
  400f82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400f84:	689a      	ldr	r2, [r3, #8]
  400f86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400f88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f8a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f8c:	6803      	ldr	r3, [r0, #0]
  400f8e:	3301      	adds	r3, #1
  400f90:	6003      	str	r3, [r0, #0]
  400f92:	4770      	bx	lr

00400f94 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400f94:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400f96:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400f98:	f1b5 3fff 	cmp.w	r5, #4294967295
  400f9c:	d002      	beq.n	400fa4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f9e:	f100 0208 	add.w	r2, r0, #8
  400fa2:	e002      	b.n	400faa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400fa4:	6902      	ldr	r2, [r0, #16]
  400fa6:	e004      	b.n	400fb2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fa8:	461a      	mov	r2, r3
  400faa:	6853      	ldr	r3, [r2, #4]
  400fac:	681c      	ldr	r4, [r3, #0]
  400fae:	42a5      	cmp	r5, r4
  400fb0:	d2fa      	bcs.n	400fa8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400fb2:	6853      	ldr	r3, [r2, #4]
  400fb4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400fb6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400fb8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400fba:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400fbc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400fbe:	6803      	ldr	r3, [r0, #0]
  400fc0:	3301      	adds	r3, #1
  400fc2:	6003      	str	r3, [r0, #0]
}
  400fc4:	bc30      	pop	{r4, r5}
  400fc6:	4770      	bx	lr

00400fc8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400fc8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400fca:	6842      	ldr	r2, [r0, #4]
  400fcc:	6881      	ldr	r1, [r0, #8]
  400fce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400fd0:	6882      	ldr	r2, [r0, #8]
  400fd2:	6841      	ldr	r1, [r0, #4]
  400fd4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400fd6:	685a      	ldr	r2, [r3, #4]
  400fd8:	4290      	cmp	r0, r2
  400fda:	d006      	beq.n	400fea <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400fdc:	2200      	movs	r2, #0
  400fde:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400fe0:	681a      	ldr	r2, [r3, #0]
  400fe2:	3a01      	subs	r2, #1
  400fe4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400fe6:	6818      	ldr	r0, [r3, #0]
}
  400fe8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400fea:	6882      	ldr	r2, [r0, #8]
  400fec:	605a      	str	r2, [r3, #4]
  400fee:	e7f5      	b.n	400fdc <uxListRemove+0x14>

00400ff0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400ff0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400ff2:	2300      	movs	r3, #0
  400ff4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400ff6:	4b0f      	ldr	r3, [pc, #60]	; (401034 <prvTaskExitError+0x44>)
  400ff8:	681b      	ldr	r3, [r3, #0]
  400ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ffe:	d00a      	beq.n	401016 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401000:	f04f 0380 	mov.w	r3, #128	; 0x80
  401004:	b672      	cpsid	i
  401006:	f383 8811 	msr	BASEPRI, r3
  40100a:	f3bf 8f6f 	isb	sy
  40100e:	f3bf 8f4f 	dsb	sy
  401012:	b662      	cpsie	i
  401014:	e7fe      	b.n	401014 <prvTaskExitError+0x24>
  401016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40101a:	b672      	cpsid	i
  40101c:	f383 8811 	msr	BASEPRI, r3
  401020:	f3bf 8f6f 	isb	sy
  401024:	f3bf 8f4f 	dsb	sy
  401028:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  40102a:	9b01      	ldr	r3, [sp, #4]
  40102c:	2b00      	cmp	r3, #0
  40102e:	d0fc      	beq.n	40102a <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  401030:	b002      	add	sp, #8
  401032:	4770      	bx	lr
  401034:	20400008 	.word	0x20400008

00401038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  401038:	4808      	ldr	r0, [pc, #32]	; (40105c <prvPortStartFirstTask+0x24>)
  40103a:	6800      	ldr	r0, [r0, #0]
  40103c:	6800      	ldr	r0, [r0, #0]
  40103e:	f380 8808 	msr	MSP, r0
  401042:	f04f 0000 	mov.w	r0, #0
  401046:	f380 8814 	msr	CONTROL, r0
  40104a:	b662      	cpsie	i
  40104c:	b661      	cpsie	f
  40104e:	f3bf 8f4f 	dsb	sy
  401052:	f3bf 8f6f 	isb	sy
  401056:	df00      	svc	0
  401058:	bf00      	nop
  40105a:	0000      	.short	0x0000
  40105c:	e000ed08 	.word	0xe000ed08

00401060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401070 <vPortEnableVFP+0x10>
  401064:	6801      	ldr	r1, [r0, #0]
  401066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40106a:	6001      	str	r1, [r0, #0]
  40106c:	4770      	bx	lr
  40106e:	0000      	.short	0x0000
  401070:	e000ed88 	.word	0xe000ed88

00401074 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401078:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40107c:	f021 0101 	bic.w	r1, r1, #1
  401080:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401084:	4b05      	ldr	r3, [pc, #20]	; (40109c <pxPortInitialiseStack+0x28>)
  401086:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40108a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40108e:	f06f 0302 	mvn.w	r3, #2
  401092:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401096:	3844      	subs	r0, #68	; 0x44
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	00400ff1 	.word	0x00400ff1

004010a0 <SVC_Handler>:
	__asm volatile (
  4010a0:	4b07      	ldr	r3, [pc, #28]	; (4010c0 <pxCurrentTCBConst2>)
  4010a2:	6819      	ldr	r1, [r3, #0]
  4010a4:	6808      	ldr	r0, [r1, #0]
  4010a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010aa:	f380 8809 	msr	PSP, r0
  4010ae:	f3bf 8f6f 	isb	sy
  4010b2:	f04f 0000 	mov.w	r0, #0
  4010b6:	f380 8811 	msr	BASEPRI, r0
  4010ba:	4770      	bx	lr
  4010bc:	f3af 8000 	nop.w

004010c0 <pxCurrentTCBConst2>:
  4010c0:	20400a60 	.word	0x20400a60

004010c4 <vPortEnterCritical>:
  4010c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010c8:	b672      	cpsid	i
  4010ca:	f383 8811 	msr	BASEPRI, r3
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	f3bf 8f4f 	dsb	sy
  4010d6:	b662      	cpsie	i
	uxCriticalNesting++;
  4010d8:	4a0b      	ldr	r2, [pc, #44]	; (401108 <vPortEnterCritical+0x44>)
  4010da:	6813      	ldr	r3, [r2, #0]
  4010dc:	3301      	adds	r3, #1
  4010de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4010e0:	2b01      	cmp	r3, #1
  4010e2:	d10f      	bne.n	401104 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4010e4:	4b09      	ldr	r3, [pc, #36]	; (40110c <vPortEnterCritical+0x48>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010ec:	d00a      	beq.n	401104 <vPortEnterCritical+0x40>
  4010ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f2:	b672      	cpsid	i
  4010f4:	f383 8811 	msr	BASEPRI, r3
  4010f8:	f3bf 8f6f 	isb	sy
  4010fc:	f3bf 8f4f 	dsb	sy
  401100:	b662      	cpsie	i
  401102:	e7fe      	b.n	401102 <vPortEnterCritical+0x3e>
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	20400008 	.word	0x20400008
  40110c:	e000ed04 	.word	0xe000ed04

00401110 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401110:	4b0a      	ldr	r3, [pc, #40]	; (40113c <vPortExitCritical+0x2c>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	b953      	cbnz	r3, 40112c <vPortExitCritical+0x1c>
  401116:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111a:	b672      	cpsid	i
  40111c:	f383 8811 	msr	BASEPRI, r3
  401120:	f3bf 8f6f 	isb	sy
  401124:	f3bf 8f4f 	dsb	sy
  401128:	b662      	cpsie	i
  40112a:	e7fe      	b.n	40112a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40112c:	3b01      	subs	r3, #1
  40112e:	4a03      	ldr	r2, [pc, #12]	; (40113c <vPortExitCritical+0x2c>)
  401130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401132:	b90b      	cbnz	r3, 401138 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401134:	f383 8811 	msr	BASEPRI, r3
  401138:	4770      	bx	lr
  40113a:	bf00      	nop
  40113c:	20400008 	.word	0x20400008

00401140 <PendSV_Handler>:
	__asm volatile
  401140:	f3ef 8009 	mrs	r0, PSP
  401144:	f3bf 8f6f 	isb	sy
  401148:	4b15      	ldr	r3, [pc, #84]	; (4011a0 <pxCurrentTCBConst>)
  40114a:	681a      	ldr	r2, [r3, #0]
  40114c:	f01e 0f10 	tst.w	lr, #16
  401150:	bf08      	it	eq
  401152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40115a:	6010      	str	r0, [r2, #0]
  40115c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401160:	f04f 0080 	mov.w	r0, #128	; 0x80
  401164:	b672      	cpsid	i
  401166:	f380 8811 	msr	BASEPRI, r0
  40116a:	f3bf 8f4f 	dsb	sy
  40116e:	f3bf 8f6f 	isb	sy
  401172:	b662      	cpsie	i
  401174:	f001 f9ec 	bl	402550 <vTaskSwitchContext>
  401178:	f04f 0000 	mov.w	r0, #0
  40117c:	f380 8811 	msr	BASEPRI, r0
  401180:	bc09      	pop	{r0, r3}
  401182:	6819      	ldr	r1, [r3, #0]
  401184:	6808      	ldr	r0, [r1, #0]
  401186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40118a:	f01e 0f10 	tst.w	lr, #16
  40118e:	bf08      	it	eq
  401190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401194:	f380 8809 	msr	PSP, r0
  401198:	f3bf 8f6f 	isb	sy
  40119c:	4770      	bx	lr
  40119e:	bf00      	nop

004011a0 <pxCurrentTCBConst>:
  4011a0:	20400a60 	.word	0x20400a60

004011a4 <SysTick_Handler>:
{
  4011a4:	b508      	push	{r3, lr}
	__asm volatile
  4011a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011aa:	b672      	cpsid	i
  4011ac:	f383 8811 	msr	BASEPRI, r3
  4011b0:	f3bf 8f6f 	isb	sy
  4011b4:	f3bf 8f4f 	dsb	sy
  4011b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4011ba:	4b05      	ldr	r3, [pc, #20]	; (4011d0 <SysTick_Handler+0x2c>)
  4011bc:	4798      	blx	r3
  4011be:	b118      	cbz	r0, 4011c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4011c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011c4:	4b03      	ldr	r3, [pc, #12]	; (4011d4 <SysTick_Handler+0x30>)
  4011c6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4011c8:	2300      	movs	r3, #0
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	bd08      	pop	{r3, pc}
  4011d0:	00402295 	.word	0x00402295
  4011d4:	e000ed04 	.word	0xe000ed04

004011d8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4011d8:	4b05      	ldr	r3, [pc, #20]	; (4011f0 <vPortSetupTimerInterrupt+0x18>)
  4011da:	2200      	movs	r2, #0
  4011dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4011de:	4905      	ldr	r1, [pc, #20]	; (4011f4 <vPortSetupTimerInterrupt+0x1c>)
  4011e0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4011e2:	4905      	ldr	r1, [pc, #20]	; (4011f8 <vPortSetupTimerInterrupt+0x20>)
  4011e4:	4a05      	ldr	r2, [pc, #20]	; (4011fc <vPortSetupTimerInterrupt+0x24>)
  4011e6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4011e8:	2207      	movs	r2, #7
  4011ea:	601a      	str	r2, [r3, #0]
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	e000e010 	.word	0xe000e010
  4011f4:	e000e018 	.word	0xe000e018
  4011f8:	000927bf 	.word	0x000927bf
  4011fc:	e000e014 	.word	0xe000e014

00401200 <xPortStartScheduler>:
{
  401200:	b510      	push	{r4, lr}
  401202:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401204:	4b2e      	ldr	r3, [pc, #184]	; (4012c0 <xPortStartScheduler+0xc0>)
  401206:	781a      	ldrb	r2, [r3, #0]
  401208:	b2d2      	uxtb	r2, r2
  40120a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40120c:	22ff      	movs	r2, #255	; 0xff
  40120e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401210:	781b      	ldrb	r3, [r3, #0]
  401212:	b2db      	uxtb	r3, r3
  401214:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401218:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401220:	4a28      	ldr	r2, [pc, #160]	; (4012c4 <xPortStartScheduler+0xc4>)
  401222:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401224:	2207      	movs	r2, #7
  401226:	4b28      	ldr	r3, [pc, #160]	; (4012c8 <xPortStartScheduler+0xc8>)
  401228:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40122a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40122e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401232:	d012      	beq.n	40125a <xPortStartScheduler+0x5a>
  401234:	2306      	movs	r3, #6
  401236:	e000      	b.n	40123a <xPortStartScheduler+0x3a>
  401238:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40123a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40123e:	0052      	lsls	r2, r2, #1
  401240:	b2d2      	uxtb	r2, r2
  401242:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401246:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40124a:	1e59      	subs	r1, r3, #1
  40124c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401250:	d1f2      	bne.n	401238 <xPortStartScheduler+0x38>
  401252:	4a1d      	ldr	r2, [pc, #116]	; (4012c8 <xPortStartScheduler+0xc8>)
  401254:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401256:	2b04      	cmp	r3, #4
  401258:	d00a      	beq.n	401270 <xPortStartScheduler+0x70>
	__asm volatile
  40125a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40125e:	b672      	cpsid	i
  401260:	f383 8811 	msr	BASEPRI, r3
  401264:	f3bf 8f6f 	isb	sy
  401268:	f3bf 8f4f 	dsb	sy
  40126c:	b662      	cpsie	i
  40126e:	e7fe      	b.n	40126e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401270:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401272:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401276:	4a14      	ldr	r2, [pc, #80]	; (4012c8 <xPortStartScheduler+0xc8>)
  401278:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40127a:	9b01      	ldr	r3, [sp, #4]
  40127c:	b2db      	uxtb	r3, r3
  40127e:	4a10      	ldr	r2, [pc, #64]	; (4012c0 <xPortStartScheduler+0xc0>)
  401280:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401282:	4b12      	ldr	r3, [pc, #72]	; (4012cc <xPortStartScheduler+0xcc>)
  401284:	681a      	ldr	r2, [r3, #0]
  401286:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40128a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40128c:	681a      	ldr	r2, [r3, #0]
  40128e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401292:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401294:	4b0e      	ldr	r3, [pc, #56]	; (4012d0 <xPortStartScheduler+0xd0>)
  401296:	4798      	blx	r3
	uxCriticalNesting = 0;
  401298:	2400      	movs	r4, #0
  40129a:	4b0e      	ldr	r3, [pc, #56]	; (4012d4 <xPortStartScheduler+0xd4>)
  40129c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40129e:	4b0e      	ldr	r3, [pc, #56]	; (4012d8 <xPortStartScheduler+0xd8>)
  4012a0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4012a2:	4a0e      	ldr	r2, [pc, #56]	; (4012dc <xPortStartScheduler+0xdc>)
  4012a4:	6813      	ldr	r3, [r2, #0]
  4012a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4012aa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4012ac:	4b0c      	ldr	r3, [pc, #48]	; (4012e0 <xPortStartScheduler+0xe0>)
  4012ae:	4798      	blx	r3
	vTaskSwitchContext();
  4012b0:	4b0c      	ldr	r3, [pc, #48]	; (4012e4 <xPortStartScheduler+0xe4>)
  4012b2:	4798      	blx	r3
	prvTaskExitError();
  4012b4:	4b0c      	ldr	r3, [pc, #48]	; (4012e8 <xPortStartScheduler+0xe8>)
  4012b6:	4798      	blx	r3
}
  4012b8:	4620      	mov	r0, r4
  4012ba:	b002      	add	sp, #8
  4012bc:	bd10      	pop	{r4, pc}
  4012be:	bf00      	nop
  4012c0:	e000e400 	.word	0xe000e400
  4012c4:	20400a58 	.word	0x20400a58
  4012c8:	20400a5c 	.word	0x20400a5c
  4012cc:	e000ed20 	.word	0xe000ed20
  4012d0:	004011d9 	.word	0x004011d9
  4012d4:	20400008 	.word	0x20400008
  4012d8:	00401061 	.word	0x00401061
  4012dc:	e000ef34 	.word	0xe000ef34
  4012e0:	00401039 	.word	0x00401039
  4012e4:	00402551 	.word	0x00402551
  4012e8:	00400ff1 	.word	0x00400ff1

004012ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4012ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4012f0:	2b0f      	cmp	r3, #15
  4012f2:	d911      	bls.n	401318 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4012f4:	4a12      	ldr	r2, [pc, #72]	; (401340 <vPortValidateInterruptPriority+0x54>)
  4012f6:	5c9b      	ldrb	r3, [r3, r2]
  4012f8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4012fa:	4a12      	ldr	r2, [pc, #72]	; (401344 <vPortValidateInterruptPriority+0x58>)
  4012fc:	7812      	ldrb	r2, [r2, #0]
  4012fe:	429a      	cmp	r2, r3
  401300:	d90a      	bls.n	401318 <vPortValidateInterruptPriority+0x2c>
  401302:	f04f 0380 	mov.w	r3, #128	; 0x80
  401306:	b672      	cpsid	i
  401308:	f383 8811 	msr	BASEPRI, r3
  40130c:	f3bf 8f6f 	isb	sy
  401310:	f3bf 8f4f 	dsb	sy
  401314:	b662      	cpsie	i
  401316:	e7fe      	b.n	401316 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401318:	4b0b      	ldr	r3, [pc, #44]	; (401348 <vPortValidateInterruptPriority+0x5c>)
  40131a:	681b      	ldr	r3, [r3, #0]
  40131c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401320:	4a0a      	ldr	r2, [pc, #40]	; (40134c <vPortValidateInterruptPriority+0x60>)
  401322:	6812      	ldr	r2, [r2, #0]
  401324:	4293      	cmp	r3, r2
  401326:	d90a      	bls.n	40133e <vPortValidateInterruptPriority+0x52>
  401328:	f04f 0380 	mov.w	r3, #128	; 0x80
  40132c:	b672      	cpsid	i
  40132e:	f383 8811 	msr	BASEPRI, r3
  401332:	f3bf 8f6f 	isb	sy
  401336:	f3bf 8f4f 	dsb	sy
  40133a:	b662      	cpsie	i
  40133c:	e7fe      	b.n	40133c <vPortValidateInterruptPriority+0x50>
  40133e:	4770      	bx	lr
  401340:	e000e3f0 	.word	0xe000e3f0
  401344:	20400a58 	.word	0x20400a58
  401348:	e000ed0c 	.word	0xe000ed0c
  40134c:	20400a5c 	.word	0x20400a5c

00401350 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401350:	b510      	push	{r4, lr}
  401352:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401354:	4b06      	ldr	r3, [pc, #24]	; (401370 <pvPortMalloc+0x20>)
  401356:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401358:	4620      	mov	r0, r4
  40135a:	4b06      	ldr	r3, [pc, #24]	; (401374 <pvPortMalloc+0x24>)
  40135c:	4798      	blx	r3
  40135e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401360:	4b05      	ldr	r3, [pc, #20]	; (401378 <pvPortMalloc+0x28>)
  401362:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401364:	b10c      	cbz	r4, 40136a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401366:	4620      	mov	r0, r4
  401368:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40136a:	4b04      	ldr	r3, [pc, #16]	; (40137c <pvPortMalloc+0x2c>)
  40136c:	4798      	blx	r3
	return pvReturn;
  40136e:	e7fa      	b.n	401366 <pvPortMalloc+0x16>
  401370:	00402279 	.word	0x00402279
  401374:	00403959 	.word	0x00403959
  401378:	004023dd 	.word	0x004023dd
  40137c:	004031f7 	.word	0x004031f7

00401380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401380:	b148      	cbz	r0, 401396 <vPortFree+0x16>
{
  401382:	b510      	push	{r4, lr}
  401384:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401386:	4b04      	ldr	r3, [pc, #16]	; (401398 <vPortFree+0x18>)
  401388:	4798      	blx	r3
		{
			free( pv );
  40138a:	4620      	mov	r0, r4
  40138c:	4b03      	ldr	r3, [pc, #12]	; (40139c <vPortFree+0x1c>)
  40138e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401390:	4b03      	ldr	r3, [pc, #12]	; (4013a0 <vPortFree+0x20>)
  401392:	4798      	blx	r3
  401394:	bd10      	pop	{r4, pc}
  401396:	4770      	bx	lr
  401398:	00402279 	.word	0x00402279
  40139c:	00403969 	.word	0x00403969
  4013a0:	004023dd 	.word	0x004023dd

004013a4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  4013a4:	b510      	push	{r4, lr}
  4013a6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4013a8:	4b04      	ldr	r3, [pc, #16]	; (4013bc <prvIsQueueEmpty+0x18>)
  4013aa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4013ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4013ae:	4b04      	ldr	r3, [pc, #16]	; (4013c0 <prvIsQueueEmpty+0x1c>)
  4013b0:	4798      	blx	r3

	return xReturn;
}
  4013b2:	fab4 f084 	clz	r0, r4
  4013b6:	0940      	lsrs	r0, r0, #5
  4013b8:	bd10      	pop	{r4, pc}
  4013ba:	bf00      	nop
  4013bc:	004010c5 	.word	0x004010c5
  4013c0:	00401111 	.word	0x00401111

004013c4 <prvCopyDataToQueue>:
{
  4013c4:	b570      	push	{r4, r5, r6, lr}
  4013c6:	4604      	mov	r4, r0
  4013c8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4013ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013ce:	b952      	cbnz	r2, 4013e6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013d0:	6803      	ldr	r3, [r0, #0]
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d12a      	bne.n	40142c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013d6:	6840      	ldr	r0, [r0, #4]
  4013d8:	4b17      	ldr	r3, [pc, #92]	; (401438 <prvCopyDataToQueue+0x74>)
  4013da:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013dc:	2300      	movs	r3, #0
  4013de:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4013e0:	3501      	adds	r5, #1
  4013e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4013e4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4013e6:	b96e      	cbnz	r6, 401404 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4013e8:	6880      	ldr	r0, [r0, #8]
  4013ea:	4b14      	ldr	r3, [pc, #80]	; (40143c <prvCopyDataToQueue+0x78>)
  4013ec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4013ee:	68a3      	ldr	r3, [r4, #8]
  4013f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4013f2:	4413      	add	r3, r2
  4013f4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013f6:	6862      	ldr	r2, [r4, #4]
  4013f8:	4293      	cmp	r3, r2
  4013fa:	d319      	bcc.n	401430 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013fc:	6823      	ldr	r3, [r4, #0]
  4013fe:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401400:	2000      	movs	r0, #0
  401402:	e7ed      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401404:	68c0      	ldr	r0, [r0, #12]
  401406:	4b0d      	ldr	r3, [pc, #52]	; (40143c <prvCopyDataToQueue+0x78>)
  401408:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40140c:	425b      	negs	r3, r3
  40140e:	68e2      	ldr	r2, [r4, #12]
  401410:	441a      	add	r2, r3
  401412:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401414:	6821      	ldr	r1, [r4, #0]
  401416:	428a      	cmp	r2, r1
  401418:	d202      	bcs.n	401420 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40141a:	6862      	ldr	r2, [r4, #4]
  40141c:	4413      	add	r3, r2
  40141e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401420:	b145      	cbz	r5, 401434 <prvCopyDataToQueue+0x70>
  401422:	2e02      	cmp	r6, #2
  401424:	d106      	bne.n	401434 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401426:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401428:	2000      	movs	r0, #0
  40142a:	e7d9      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  40142c:	2000      	movs	r0, #0
  40142e:	e7d7      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401430:	2000      	movs	r0, #0
  401432:	e7d5      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401434:	2000      	movs	r0, #0
  401436:	e7d3      	b.n	4013e0 <prvCopyDataToQueue+0x1c>
  401438:	004028d5 	.word	0x004028d5
  40143c:	00403ed9 	.word	0x00403ed9

00401440 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	b082      	sub	sp, #8
  401444:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401446:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401448:	b174      	cbz	r4, 401468 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40144a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40144c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40144e:	429a      	cmp	r2, r3
  401450:	d315      	bcc.n	40147e <prvNotifyQueueSetContainer+0x3e>
  401452:	f04f 0380 	mov.w	r3, #128	; 0x80
  401456:	b672      	cpsid	i
  401458:	f383 8811 	msr	BASEPRI, r3
  40145c:	f3bf 8f6f 	isb	sy
  401460:	f3bf 8f4f 	dsb	sy
  401464:	b662      	cpsie	i
  401466:	e7fe      	b.n	401466 <prvNotifyQueueSetContainer+0x26>
  401468:	f04f 0380 	mov.w	r3, #128	; 0x80
  40146c:	b672      	cpsid	i
  40146e:	f383 8811 	msr	BASEPRI, r3
  401472:	f3bf 8f6f 	isb	sy
  401476:	f3bf 8f4f 	dsb	sy
  40147a:	b662      	cpsie	i
  40147c:	e7fe      	b.n	40147c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401480:	4293      	cmp	r3, r2
  401482:	d803      	bhi.n	40148c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401484:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401486:	4630      	mov	r0, r6
  401488:	b002      	add	sp, #8
  40148a:	bd70      	pop	{r4, r5, r6, pc}
  40148c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40148e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401492:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401494:	a901      	add	r1, sp, #4
  401496:	4620      	mov	r0, r4
  401498:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <prvNotifyQueueSetContainer+0x84>)
  40149a:	4798      	blx	r3
  40149c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40149e:	f1b5 3fff 	cmp.w	r5, #4294967295
  4014a2:	d10a      	bne.n	4014ba <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a6:	2b00      	cmp	r3, #0
  4014a8:	d0ed      	beq.n	401486 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4014aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014ae:	4b06      	ldr	r3, [pc, #24]	; (4014c8 <prvNotifyQueueSetContainer+0x88>)
  4014b0:	4798      	blx	r3
  4014b2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014b4:	bf18      	it	ne
  4014b6:	2601      	movne	r6, #1
  4014b8:	e7e5      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4014ba:	1c6b      	adds	r3, r5, #1
  4014bc:	b25b      	sxtb	r3, r3
  4014be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4014c2:	e7e0      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
  4014c4:	004013c5 	.word	0x004013c5
  4014c8:	004026a5 	.word	0x004026a5

004014cc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014ce:	b172      	cbz	r2, 4014ee <prvCopyDataFromQueue+0x22>
{
  4014d0:	b510      	push	{r4, lr}
  4014d2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014d4:	68c4      	ldr	r4, [r0, #12]
  4014d6:	4414      	add	r4, r2
  4014d8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4014da:	6840      	ldr	r0, [r0, #4]
  4014dc:	4284      	cmp	r4, r0
  4014de:	d301      	bcc.n	4014e4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4014e0:	6818      	ldr	r0, [r3, #0]
  4014e2:	60d8      	str	r0, [r3, #12]
  4014e4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4014e6:	68d9      	ldr	r1, [r3, #12]
  4014e8:	4b01      	ldr	r3, [pc, #4]	; (4014f0 <prvCopyDataFromQueue+0x24>)
  4014ea:	4798      	blx	r3
  4014ec:	bd10      	pop	{r4, pc}
  4014ee:	4770      	bx	lr
  4014f0:	00403ed9 	.word	0x00403ed9

004014f4 <prvUnlockQueue>:
{
  4014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014f8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4014fa:	4b23      	ldr	r3, [pc, #140]	; (401588 <prvUnlockQueue+0x94>)
  4014fc:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4014fe:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401502:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401504:	2c00      	cmp	r4, #0
  401506:	dd19      	ble.n	40153c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401508:	4e20      	ldr	r6, [pc, #128]	; (40158c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  40150a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401598 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40150e:	4f20      	ldr	r7, [pc, #128]	; (401590 <prvUnlockQueue+0x9c>)
  401510:	e008      	b.n	401524 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401514:	b193      	cbz	r3, 40153c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401516:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40151a:	47b8      	blx	r7
  40151c:	b960      	cbnz	r0, 401538 <prvUnlockQueue+0x44>
  40151e:	3c01      	subs	r4, #1
  401520:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401522:	b15c      	cbz	r4, 40153c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401524:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401526:	2b00      	cmp	r3, #0
  401528:	d0f3      	beq.n	401512 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40152a:	2100      	movs	r1, #0
  40152c:	4628      	mov	r0, r5
  40152e:	47b0      	blx	r6
  401530:	2800      	cmp	r0, #0
  401532:	d0f4      	beq.n	40151e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401534:	47c0      	blx	r8
  401536:	e7f2      	b.n	40151e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401538:	47c0      	blx	r8
  40153a:	e7f0      	b.n	40151e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40153c:	23ff      	movs	r3, #255	; 0xff
  40153e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401542:	4b14      	ldr	r3, [pc, #80]	; (401594 <prvUnlockQueue+0xa0>)
  401544:	4798      	blx	r3
	taskENTER_CRITICAL();
  401546:	4b10      	ldr	r3, [pc, #64]	; (401588 <prvUnlockQueue+0x94>)
  401548:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40154a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40154e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401550:	2c00      	cmp	r4, #0
  401552:	dd12      	ble.n	40157a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401554:	692b      	ldr	r3, [r5, #16]
  401556:	b183      	cbz	r3, 40157a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401558:	f105 0710 	add.w	r7, r5, #16
  40155c:	4e0c      	ldr	r6, [pc, #48]	; (401590 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40155e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401598 <prvUnlockQueue+0xa4>
  401562:	e004      	b.n	40156e <prvUnlockQueue+0x7a>
  401564:	3c01      	subs	r4, #1
  401566:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401568:	b13c      	cbz	r4, 40157a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40156a:	692b      	ldr	r3, [r5, #16]
  40156c:	b12b      	cbz	r3, 40157a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40156e:	4638      	mov	r0, r7
  401570:	47b0      	blx	r6
  401572:	2800      	cmp	r0, #0
  401574:	d0f6      	beq.n	401564 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401576:	47c0      	blx	r8
  401578:	e7f4      	b.n	401564 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40157a:	23ff      	movs	r3, #255	; 0xff
  40157c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401580:	4b04      	ldr	r3, [pc, #16]	; (401594 <prvUnlockQueue+0xa0>)
  401582:	4798      	blx	r3
  401584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401588:	004010c5 	.word	0x004010c5
  40158c:	00401441 	.word	0x00401441
  401590:	004026a5 	.word	0x004026a5
  401594:	00401111 	.word	0x00401111
  401598:	004027e9 	.word	0x004027e9

0040159c <xQueueGenericReset>:
{
  40159c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40159e:	b330      	cbz	r0, 4015ee <xQueueGenericReset+0x52>
  4015a0:	4604      	mov	r4, r0
  4015a2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4015a4:	4b1d      	ldr	r3, [pc, #116]	; (40161c <xQueueGenericReset+0x80>)
  4015a6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4015a8:	6822      	ldr	r2, [r4, #0]
  4015aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4015ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015ae:	fb03 f301 	mul.w	r3, r3, r1
  4015b2:	18d0      	adds	r0, r2, r3
  4015b4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015b6:	2000      	movs	r0, #0
  4015b8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015ba:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015bc:	1a5b      	subs	r3, r3, r1
  4015be:	4413      	add	r3, r2
  4015c0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4015c2:	23ff      	movs	r3, #255	; 0xff
  4015c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4015c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4015cc:	b9d5      	cbnz	r5, 401604 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015ce:	6923      	ldr	r3, [r4, #16]
  4015d0:	b1fb      	cbz	r3, 401612 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015d2:	f104 0010 	add.w	r0, r4, #16
  4015d6:	4b12      	ldr	r3, [pc, #72]	; (401620 <xQueueGenericReset+0x84>)
  4015d8:	4798      	blx	r3
  4015da:	b1d0      	cbz	r0, 401612 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4015dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015e0:	4b10      	ldr	r3, [pc, #64]	; (401624 <xQueueGenericReset+0x88>)
  4015e2:	601a      	str	r2, [r3, #0]
  4015e4:	f3bf 8f4f 	dsb	sy
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	e011      	b.n	401612 <xQueueGenericReset+0x76>
  4015ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f2:	b672      	cpsid	i
  4015f4:	f383 8811 	msr	BASEPRI, r3
  4015f8:	f3bf 8f6f 	isb	sy
  4015fc:	f3bf 8f4f 	dsb	sy
  401600:	b662      	cpsie	i
  401602:	e7fe      	b.n	401602 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401604:	f104 0010 	add.w	r0, r4, #16
  401608:	4d07      	ldr	r5, [pc, #28]	; (401628 <xQueueGenericReset+0x8c>)
  40160a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40160c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401610:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401612:	4b06      	ldr	r3, [pc, #24]	; (40162c <xQueueGenericReset+0x90>)
  401614:	4798      	blx	r3
}
  401616:	2001      	movs	r0, #1
  401618:	bd38      	pop	{r3, r4, r5, pc}
  40161a:	bf00      	nop
  40161c:	004010c5 	.word	0x004010c5
  401620:	004026a5 	.word	0x004026a5
  401624:	e000ed04 	.word	0xe000ed04
  401628:	00400f61 	.word	0x00400f61
  40162c:	00401111 	.word	0x00401111

00401630 <xQueueGenericCreate>:
	{
  401630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401632:	b950      	cbnz	r0, 40164a <xQueueGenericCreate+0x1a>
  401634:	f04f 0380 	mov.w	r3, #128	; 0x80
  401638:	b672      	cpsid	i
  40163a:	f383 8811 	msr	BASEPRI, r3
  40163e:	f3bf 8f6f 	isb	sy
  401642:	f3bf 8f4f 	dsb	sy
  401646:	b662      	cpsie	i
  401648:	e7fe      	b.n	401648 <xQueueGenericCreate+0x18>
  40164a:	4606      	mov	r6, r0
  40164c:	4617      	mov	r7, r2
  40164e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401650:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401654:	3054      	adds	r0, #84	; 0x54
  401656:	4b0b      	ldr	r3, [pc, #44]	; (401684 <xQueueGenericCreate+0x54>)
  401658:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40165a:	4604      	mov	r4, r0
  40165c:	b178      	cbz	r0, 40167e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40165e:	b11d      	cbz	r5, 401668 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401660:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401664:	6003      	str	r3, [r0, #0]
  401666:	e000      	b.n	40166a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401668:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40166a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40166c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40166e:	2101      	movs	r1, #1
  401670:	4620      	mov	r0, r4
  401672:	4b05      	ldr	r3, [pc, #20]	; (401688 <xQueueGenericCreate+0x58>)
  401674:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401676:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40167a:	2300      	movs	r3, #0
  40167c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40167e:	4620      	mov	r0, r4
  401680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401682:	bf00      	nop
  401684:	00401351 	.word	0x00401351
  401688:	0040159d 	.word	0x0040159d

0040168c <xQueueGenericSend>:
{
  40168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401690:	b085      	sub	sp, #20
  401692:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401694:	b1b8      	cbz	r0, 4016c6 <xQueueGenericSend+0x3a>
  401696:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401698:	b301      	cbz	r1, 4016dc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40169a:	2b02      	cmp	r3, #2
  40169c:	d02c      	beq.n	4016f8 <xQueueGenericSend+0x6c>
  40169e:	461e      	mov	r6, r3
  4016a0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016a2:	4b69      	ldr	r3, [pc, #420]	; (401848 <xQueueGenericSend+0x1bc>)
  4016a4:	4798      	blx	r3
  4016a6:	2800      	cmp	r0, #0
  4016a8:	d134      	bne.n	401714 <xQueueGenericSend+0x88>
  4016aa:	9b01      	ldr	r3, [sp, #4]
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	d039      	beq.n	401724 <xQueueGenericSend+0x98>
  4016b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016b4:	b672      	cpsid	i
  4016b6:	f383 8811 	msr	BASEPRI, r3
  4016ba:	f3bf 8f6f 	isb	sy
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	b662      	cpsie	i
  4016c4:	e7fe      	b.n	4016c4 <xQueueGenericSend+0x38>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016de:	2a00      	cmp	r2, #0
  4016e0:	d0db      	beq.n	40169a <xQueueGenericSend+0xe>
  4016e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016e6:	b672      	cpsid	i
  4016e8:	f383 8811 	msr	BASEPRI, r3
  4016ec:	f3bf 8f6f 	isb	sy
  4016f0:	f3bf 8f4f 	dsb	sy
  4016f4:	b662      	cpsie	i
  4016f6:	e7fe      	b.n	4016f6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4016fa:	2a01      	cmp	r2, #1
  4016fc:	d0cf      	beq.n	40169e <xQueueGenericSend+0x12>
  4016fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401702:	b672      	cpsid	i
  401704:	f383 8811 	msr	BASEPRI, r3
  401708:	f3bf 8f6f 	isb	sy
  40170c:	f3bf 8f4f 	dsb	sy
  401710:	b662      	cpsie	i
  401712:	e7fe      	b.n	401712 <xQueueGenericSend+0x86>
  401714:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401716:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401874 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40171a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401878 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40171e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401854 <xQueueGenericSend+0x1c8>
  401722:	e041      	b.n	4017a8 <xQueueGenericSend+0x11c>
  401724:	2500      	movs	r5, #0
  401726:	e7f6      	b.n	401716 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401728:	4632      	mov	r2, r6
  40172a:	4639      	mov	r1, r7
  40172c:	4620      	mov	r0, r4
  40172e:	4b47      	ldr	r3, [pc, #284]	; (40184c <xQueueGenericSend+0x1c0>)
  401730:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401732:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401734:	b193      	cbz	r3, 40175c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401736:	4631      	mov	r1, r6
  401738:	4620      	mov	r0, r4
  40173a:	4b45      	ldr	r3, [pc, #276]	; (401850 <xQueueGenericSend+0x1c4>)
  40173c:	4798      	blx	r3
  40173e:	b138      	cbz	r0, 401750 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401744:	4b43      	ldr	r3, [pc, #268]	; (401854 <xQueueGenericSend+0x1c8>)
  401746:	601a      	str	r2, [r3, #0]
  401748:	f3bf 8f4f 	dsb	sy
  40174c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401750:	4b41      	ldr	r3, [pc, #260]	; (401858 <xQueueGenericSend+0x1cc>)
  401752:	4798      	blx	r3
				return pdPASS;
  401754:	2001      	movs	r0, #1
}
  401756:	b005      	add	sp, #20
  401758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40175c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40175e:	b173      	cbz	r3, 40177e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401760:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401764:	4b3d      	ldr	r3, [pc, #244]	; (40185c <xQueueGenericSend+0x1d0>)
  401766:	4798      	blx	r3
  401768:	2800      	cmp	r0, #0
  40176a:	d0f1      	beq.n	401750 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40176c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401770:	4b38      	ldr	r3, [pc, #224]	; (401854 <xQueueGenericSend+0x1c8>)
  401772:	601a      	str	r2, [r3, #0]
  401774:	f3bf 8f4f 	dsb	sy
  401778:	f3bf 8f6f 	isb	sy
  40177c:	e7e8      	b.n	401750 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40177e:	2800      	cmp	r0, #0
  401780:	d0e6      	beq.n	401750 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401786:	4b33      	ldr	r3, [pc, #204]	; (401854 <xQueueGenericSend+0x1c8>)
  401788:	601a      	str	r2, [r3, #0]
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	f3bf 8f6f 	isb	sy
  401792:	e7dd      	b.n	401750 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401794:	4b30      	ldr	r3, [pc, #192]	; (401858 <xQueueGenericSend+0x1cc>)
  401796:	4798      	blx	r3
					return errQUEUE_FULL;
  401798:	2000      	movs	r0, #0
  40179a:	e7dc      	b.n	401756 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40179c:	4620      	mov	r0, r4
  40179e:	4b30      	ldr	r3, [pc, #192]	; (401860 <xQueueGenericSend+0x1d4>)
  4017a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4017a2:	4b30      	ldr	r3, [pc, #192]	; (401864 <xQueueGenericSend+0x1d8>)
  4017a4:	4798      	blx	r3
  4017a6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  4017a8:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4017aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4017ae:	429a      	cmp	r2, r3
  4017b0:	d3ba      	bcc.n	401728 <xQueueGenericSend+0x9c>
  4017b2:	2e02      	cmp	r6, #2
  4017b4:	d0b8      	beq.n	401728 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017b6:	9b01      	ldr	r3, [sp, #4]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d0eb      	beq.n	401794 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4017bc:	b90d      	cbnz	r5, 4017c2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4017be:	a802      	add	r0, sp, #8
  4017c0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4017c2:	4b25      	ldr	r3, [pc, #148]	; (401858 <xQueueGenericSend+0x1cc>)
  4017c4:	4798      	blx	r3
		vTaskSuspendAll();
  4017c6:	4b28      	ldr	r3, [pc, #160]	; (401868 <xQueueGenericSend+0x1dc>)
  4017c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4017ca:	47c0      	blx	r8
  4017cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4017d0:	b25b      	sxtb	r3, r3
  4017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017d6:	d102      	bne.n	4017de <xQueueGenericSend+0x152>
  4017d8:	2300      	movs	r3, #0
  4017da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4017de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4017e2:	b25b      	sxtb	r3, r3
  4017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017e8:	d102      	bne.n	4017f0 <xQueueGenericSend+0x164>
  4017ea:	2300      	movs	r3, #0
  4017ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4017f0:	4b19      	ldr	r3, [pc, #100]	; (401858 <xQueueGenericSend+0x1cc>)
  4017f2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017f4:	a901      	add	r1, sp, #4
  4017f6:	a802      	add	r0, sp, #8
  4017f8:	4b1c      	ldr	r3, [pc, #112]	; (40186c <xQueueGenericSend+0x1e0>)
  4017fa:	4798      	blx	r3
  4017fc:	b9e0      	cbnz	r0, 401838 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4017fe:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401800:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401804:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401806:	4b14      	ldr	r3, [pc, #80]	; (401858 <xQueueGenericSend+0x1cc>)
  401808:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40180a:	45ab      	cmp	fp, r5
  40180c:	d1c6      	bne.n	40179c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40180e:	9901      	ldr	r1, [sp, #4]
  401810:	f104 0010 	add.w	r0, r4, #16
  401814:	4b16      	ldr	r3, [pc, #88]	; (401870 <xQueueGenericSend+0x1e4>)
  401816:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401818:	4620      	mov	r0, r4
  40181a:	4b11      	ldr	r3, [pc, #68]	; (401860 <xQueueGenericSend+0x1d4>)
  40181c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40181e:	4b11      	ldr	r3, [pc, #68]	; (401864 <xQueueGenericSend+0x1d8>)
  401820:	4798      	blx	r3
  401822:	2800      	cmp	r0, #0
  401824:	d1bf      	bne.n	4017a6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40182a:	f8c9 3000 	str.w	r3, [r9]
  40182e:	f3bf 8f4f 	dsb	sy
  401832:	f3bf 8f6f 	isb	sy
  401836:	e7b6      	b.n	4017a6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401838:	4620      	mov	r0, r4
  40183a:	4b09      	ldr	r3, [pc, #36]	; (401860 <xQueueGenericSend+0x1d4>)
  40183c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40183e:	4b09      	ldr	r3, [pc, #36]	; (401864 <xQueueGenericSend+0x1d8>)
  401840:	4798      	blx	r3
			return errQUEUE_FULL;
  401842:	2000      	movs	r0, #0
  401844:	e787      	b.n	401756 <xQueueGenericSend+0xca>
  401846:	bf00      	nop
  401848:	004027f5 	.word	0x004027f5
  40184c:	004013c5 	.word	0x004013c5
  401850:	00401441 	.word	0x00401441
  401854:	e000ed04 	.word	0xe000ed04
  401858:	00401111 	.word	0x00401111
  40185c:	004026a5 	.word	0x004026a5
  401860:	004014f5 	.word	0x004014f5
  401864:	004023dd 	.word	0x004023dd
  401868:	00402279 	.word	0x00402279
  40186c:	00402755 	.word	0x00402755
  401870:	00402621 	.word	0x00402621
  401874:	004010c5 	.word	0x004010c5
  401878:	0040273d 	.word	0x0040273d

0040187c <xQueueGenericSendFromISR>:
{
  40187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401880:	2800      	cmp	r0, #0
  401882:	d039      	beq.n	4018f8 <xQueueGenericSendFromISR+0x7c>
  401884:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401886:	2900      	cmp	r1, #0
  401888:	d041      	beq.n	40190e <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40188a:	2b02      	cmp	r3, #2
  40188c:	d04d      	beq.n	40192a <xQueueGenericSendFromISR+0xae>
  40188e:	461f      	mov	r7, r3
  401890:	4690      	mov	r8, r2
  401892:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401894:	4b3a      	ldr	r3, [pc, #232]	; (401980 <xQueueGenericSendFromISR+0x104>)
  401896:	4798      	blx	r3
	__asm volatile
  401898:	f3ef 8611 	mrs	r6, BASEPRI
  40189c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018a0:	b672      	cpsid	i
  4018a2:	f383 8811 	msr	BASEPRI, r3
  4018a6:	f3bf 8f6f 	isb	sy
  4018aa:	f3bf 8f4f 	dsb	sy
  4018ae:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018b4:	429a      	cmp	r2, r3
  4018b6:	d301      	bcc.n	4018bc <xQueueGenericSendFromISR+0x40>
  4018b8:	2f02      	cmp	r7, #2
  4018ba:	d158      	bne.n	40196e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4018bc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4018c0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018c2:	463a      	mov	r2, r7
  4018c4:	4649      	mov	r1, r9
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b2e      	ldr	r3, [pc, #184]	; (401984 <xQueueGenericSendFromISR+0x108>)
  4018ca:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4018cc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4018d0:	d147      	bne.n	401962 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4018d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d036      	beq.n	401946 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4018d8:	4639      	mov	r1, r7
  4018da:	4620      	mov	r0, r4
  4018dc:	4b2a      	ldr	r3, [pc, #168]	; (401988 <xQueueGenericSendFromISR+0x10c>)
  4018de:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4018e0:	f1b8 0f00 	cmp.w	r8, #0
  4018e4:	d045      	beq.n	401972 <xQueueGenericSendFromISR+0xf6>
  4018e6:	2800      	cmp	r0, #0
  4018e8:	d043      	beq.n	401972 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018ea:	2001      	movs	r0, #1
  4018ec:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4018f0:	f386 8811 	msr	BASEPRI, r6
}
  4018f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4018f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018fc:	b672      	cpsid	i
  4018fe:	f383 8811 	msr	BASEPRI, r3
  401902:	f3bf 8f6f 	isb	sy
  401906:	f3bf 8f4f 	dsb	sy
  40190a:	b662      	cpsie	i
  40190c:	e7fe      	b.n	40190c <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40190e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401910:	2800      	cmp	r0, #0
  401912:	d0ba      	beq.n	40188a <xQueueGenericSendFromISR+0xe>
  401914:	f04f 0380 	mov.w	r3, #128	; 0x80
  401918:	b672      	cpsid	i
  40191a:	f383 8811 	msr	BASEPRI, r3
  40191e:	f3bf 8f6f 	isb	sy
  401922:	f3bf 8f4f 	dsb	sy
  401926:	b662      	cpsie	i
  401928:	e7fe      	b.n	401928 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40192a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40192c:	2801      	cmp	r0, #1
  40192e:	d0ae      	beq.n	40188e <xQueueGenericSendFromISR+0x12>
  401930:	f04f 0380 	mov.w	r3, #128	; 0x80
  401934:	b672      	cpsid	i
  401936:	f383 8811 	msr	BASEPRI, r3
  40193a:	f3bf 8f6f 	isb	sy
  40193e:	f3bf 8f4f 	dsb	sy
  401942:	b662      	cpsie	i
  401944:	e7fe      	b.n	401944 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401946:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401948:	b1ab      	cbz	r3, 401976 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40194a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40194e:	4b0f      	ldr	r3, [pc, #60]	; (40198c <xQueueGenericSendFromISR+0x110>)
  401950:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401952:	f1b8 0f00 	cmp.w	r8, #0
  401956:	d010      	beq.n	40197a <xQueueGenericSendFromISR+0xfe>
  401958:	b178      	cbz	r0, 40197a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40195a:	2001      	movs	r0, #1
  40195c:	f8c8 0000 	str.w	r0, [r8]
  401960:	e7c6      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401962:	1c6b      	adds	r3, r5, #1
  401964:	b25b      	sxtb	r3, r3
  401966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40196a:	2001      	movs	r0, #1
  40196c:	e7c0      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40196e:	2000      	movs	r0, #0
  401970:	e7be      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401972:	2001      	movs	r0, #1
  401974:	e7bc      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  401976:	2001      	movs	r0, #1
  401978:	e7ba      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  40197a:	2001      	movs	r0, #1
  40197c:	e7b8      	b.n	4018f0 <xQueueGenericSendFromISR+0x74>
  40197e:	bf00      	nop
  401980:	004012ed 	.word	0x004012ed
  401984:	004013c5 	.word	0x004013c5
  401988:	00401441 	.word	0x00401441
  40198c:	004026a5 	.word	0x004026a5

00401990 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401990:	b170      	cbz	r0, 4019b0 <xQueueGiveFromISR+0x20>
{
  401992:	b570      	push	{r4, r5, r6, lr}
  401994:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401996:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401998:	b1ab      	cbz	r3, 4019c6 <xQueueGiveFromISR+0x36>
  40199a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40199e:	b672      	cpsid	i
  4019a0:	f383 8811 	msr	BASEPRI, r3
  4019a4:	f3bf 8f6f 	isb	sy
  4019a8:	f3bf 8f4f 	dsb	sy
  4019ac:	b662      	cpsie	i
  4019ae:	e7fe      	b.n	4019ae <xQueueGiveFromISR+0x1e>
  4019b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b4:	b672      	cpsid	i
  4019b6:	f383 8811 	msr	BASEPRI, r3
  4019ba:	f3bf 8f6f 	isb	sy
  4019be:	f3bf 8f4f 	dsb	sy
  4019c2:	b662      	cpsie	i
  4019c4:	e7fe      	b.n	4019c4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019c6:	6803      	ldr	r3, [r0, #0]
  4019c8:	b33b      	cbz	r3, 401a1a <xQueueGiveFromISR+0x8a>
  4019ca:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019cc:	4b26      	ldr	r3, [pc, #152]	; (401a68 <xQueueGiveFromISR+0xd8>)
  4019ce:	4798      	blx	r3
	__asm volatile
  4019d0:	f3ef 8511 	mrs	r5, BASEPRI
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4019e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  4019ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019ec:	429a      	cmp	r2, r3
  4019ee:	d233      	bcs.n	401a58 <xQueueGiveFromISR+0xc8>
			const int8_t cTxLock = pxQueue->cTxLock;
  4019f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4019f4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4019f6:	3201      	adds	r2, #1
  4019f8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  4019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019fe:	d125      	bne.n	401a4c <xQueueGiveFromISR+0xbc>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a02:	b1c3      	cbz	r3, 401a36 <xQueueGiveFromISR+0xa6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401a04:	2100      	movs	r1, #0
  401a06:	4620      	mov	r0, r4
  401a08:	4b18      	ldr	r3, [pc, #96]	; (401a6c <xQueueGiveFromISR+0xdc>)
  401a0a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a0c:	b336      	cbz	r6, 401a5c <xQueueGiveFromISR+0xcc>
  401a0e:	b328      	cbz	r0, 401a5c <xQueueGiveFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a10:	2001      	movs	r0, #1
  401a12:	6030      	str	r0, [r6, #0]
	__asm volatile
  401a14:	f385 8811 	msr	BASEPRI, r5
}
  401a18:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a1a:	6843      	ldr	r3, [r0, #4]
  401a1c:	2b00      	cmp	r3, #0
  401a1e:	d0d4      	beq.n	4019ca <xQueueGiveFromISR+0x3a>
	__asm volatile
  401a20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a24:	b672      	cpsid	i
  401a26:	f383 8811 	msr	BASEPRI, r3
  401a2a:	f3bf 8f6f 	isb	sy
  401a2e:	f3bf 8f4f 	dsb	sy
  401a32:	b662      	cpsie	i
  401a34:	e7fe      	b.n	401a34 <xQueueGiveFromISR+0xa4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a38:	b193      	cbz	r3, 401a60 <xQueueGiveFromISR+0xd0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a3e:	4b0c      	ldr	r3, [pc, #48]	; (401a70 <xQueueGiveFromISR+0xe0>)
  401a40:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a42:	b17e      	cbz	r6, 401a64 <xQueueGiveFromISR+0xd4>
  401a44:	b170      	cbz	r0, 401a64 <xQueueGiveFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a46:	2001      	movs	r0, #1
  401a48:	6030      	str	r0, [r6, #0]
  401a4a:	e7e3      	b.n	401a14 <xQueueGiveFromISR+0x84>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401a4c:	3301      	adds	r3, #1
  401a4e:	b25b      	sxtb	r3, r3
  401a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  401a54:	2001      	movs	r0, #1
  401a56:	e7dd      	b.n	401a14 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
  401a58:	2000      	movs	r0, #0
  401a5a:	e7db      	b.n	401a14 <xQueueGiveFromISR+0x84>
			xReturn = pdPASS;
  401a5c:	2001      	movs	r0, #1
  401a5e:	e7d9      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a60:	2001      	movs	r0, #1
  401a62:	e7d7      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a64:	2001      	movs	r0, #1
  401a66:	e7d5      	b.n	401a14 <xQueueGiveFromISR+0x84>
  401a68:	004012ed 	.word	0x004012ed
  401a6c:	00401441 	.word	0x00401441
  401a70:	004026a5 	.word	0x004026a5

00401a74 <xQueueReceive>:
{
  401a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a78:	b084      	sub	sp, #16
  401a7a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401a7c:	b190      	cbz	r0, 401aa4 <xQueueReceive+0x30>
  401a7e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a80:	b1d9      	cbz	r1, 401aba <xQueueReceive+0x46>
  401a82:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a84:	4b54      	ldr	r3, [pc, #336]	; (401bd8 <xQueueReceive+0x164>)
  401a86:	4798      	blx	r3
  401a88:	bb28      	cbnz	r0, 401ad6 <xQueueReceive+0x62>
  401a8a:	9b01      	ldr	r3, [sp, #4]
  401a8c:	b35b      	cbz	r3, 401ae6 <xQueueReceive+0x72>
  401a8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a92:	b672      	cpsid	i
  401a94:	f383 8811 	msr	BASEPRI, r3
  401a98:	f3bf 8f6f 	isb	sy
  401a9c:	f3bf 8f4f 	dsb	sy
  401aa0:	b662      	cpsie	i
  401aa2:	e7fe      	b.n	401aa2 <xQueueReceive+0x2e>
  401aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa8:	b672      	cpsid	i
  401aaa:	f383 8811 	msr	BASEPRI, r3
  401aae:	f3bf 8f6f 	isb	sy
  401ab2:	f3bf 8f4f 	dsb	sy
  401ab6:	b662      	cpsie	i
  401ab8:	e7fe      	b.n	401ab8 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401aba:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401abc:	2b00      	cmp	r3, #0
  401abe:	d0e0      	beq.n	401a82 <xQueueReceive+0xe>
  401ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac4:	b672      	cpsid	i
  401ac6:	f383 8811 	msr	BASEPRI, r3
  401aca:	f3bf 8f6f 	isb	sy
  401ace:	f3bf 8f4f 	dsb	sy
  401ad2:	b662      	cpsie	i
  401ad4:	e7fe      	b.n	401ad4 <xQueueReceive+0x60>
  401ad6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401ad8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401c04 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401adc:	f8df a128 	ldr.w	sl, [pc, #296]	; 401c08 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  401ae0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401be4 <xQueueReceive+0x170>
  401ae4:	e031      	b.n	401b4a <xQueueReceive+0xd6>
  401ae6:	2700      	movs	r7, #0
  401ae8:	e7f6      	b.n	401ad8 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401aea:	4631      	mov	r1, r6
  401aec:	4620      	mov	r0, r4
  401aee:	4b3b      	ldr	r3, [pc, #236]	; (401bdc <xQueueReceive+0x168>)
  401af0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401af2:	3d01      	subs	r5, #1
  401af4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401af6:	6923      	ldr	r3, [r4, #16]
  401af8:	b163      	cbz	r3, 401b14 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401afa:	f104 0010 	add.w	r0, r4, #16
  401afe:	4b38      	ldr	r3, [pc, #224]	; (401be0 <xQueueReceive+0x16c>)
  401b00:	4798      	blx	r3
  401b02:	b138      	cbz	r0, 401b14 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b08:	4b36      	ldr	r3, [pc, #216]	; (401be4 <xQueueReceive+0x170>)
  401b0a:	601a      	str	r2, [r3, #0]
  401b0c:	f3bf 8f4f 	dsb	sy
  401b10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b14:	4b34      	ldr	r3, [pc, #208]	; (401be8 <xQueueReceive+0x174>)
  401b16:	4798      	blx	r3
				return pdPASS;
  401b18:	2001      	movs	r0, #1
}
  401b1a:	b004      	add	sp, #16
  401b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  401b20:	4b31      	ldr	r3, [pc, #196]	; (401be8 <xQueueReceive+0x174>)
  401b22:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b24:	2000      	movs	r0, #0
  401b26:	e7f8      	b.n	401b1a <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401b28:	a802      	add	r0, sp, #8
  401b2a:	47d0      	blx	sl
  401b2c:	e016      	b.n	401b5c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  401b2e:	2300      	movs	r3, #0
  401b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401b34:	e01d      	b.n	401b72 <xQueueReceive+0xfe>
  401b36:	2300      	movs	r3, #0
  401b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401b3c:	e01f      	b.n	401b7e <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  401b3e:	4620      	mov	r0, r4
  401b40:	4b2a      	ldr	r3, [pc, #168]	; (401bec <xQueueReceive+0x178>)
  401b42:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b44:	4b2a      	ldr	r3, [pc, #168]	; (401bf0 <xQueueReceive+0x17c>)
  401b46:	4798      	blx	r3
  401b48:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401b4a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401b4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b4e:	2d00      	cmp	r5, #0
  401b50:	d1cb      	bne.n	401aea <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b52:	9b01      	ldr	r3, [sp, #4]
  401b54:	2b00      	cmp	r3, #0
  401b56:	d0e3      	beq.n	401b20 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401b58:	2f00      	cmp	r7, #0
  401b5a:	d0e5      	beq.n	401b28 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401b5c:	4b22      	ldr	r3, [pc, #136]	; (401be8 <xQueueReceive+0x174>)
  401b5e:	4798      	blx	r3
		vTaskSuspendAll();
  401b60:	4b24      	ldr	r3, [pc, #144]	; (401bf4 <xQueueReceive+0x180>)
  401b62:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b64:	47c0      	blx	r8
  401b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401b6a:	b25b      	sxtb	r3, r3
  401b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b70:	d0dd      	beq.n	401b2e <xQueueReceive+0xba>
  401b72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401b76:	b25b      	sxtb	r3, r3
  401b78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b7c:	d0db      	beq.n	401b36 <xQueueReceive+0xc2>
  401b7e:	4b1a      	ldr	r3, [pc, #104]	; (401be8 <xQueueReceive+0x174>)
  401b80:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b82:	a901      	add	r1, sp, #4
  401b84:	a802      	add	r0, sp, #8
  401b86:	4b1c      	ldr	r3, [pc, #112]	; (401bf8 <xQueueReceive+0x184>)
  401b88:	4798      	blx	r3
  401b8a:	b9c8      	cbnz	r0, 401bc0 <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401b8c:	4620      	mov	r0, r4
  401b8e:	4b1b      	ldr	r3, [pc, #108]	; (401bfc <xQueueReceive+0x188>)
  401b90:	4798      	blx	r3
  401b92:	2800      	cmp	r0, #0
  401b94:	d0d3      	beq.n	401b3e <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401b96:	9901      	ldr	r1, [sp, #4]
  401b98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b9c:	4b18      	ldr	r3, [pc, #96]	; (401c00 <xQueueReceive+0x18c>)
  401b9e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401ba0:	4620      	mov	r0, r4
  401ba2:	4b12      	ldr	r3, [pc, #72]	; (401bec <xQueueReceive+0x178>)
  401ba4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ba6:	4b12      	ldr	r3, [pc, #72]	; (401bf0 <xQueueReceive+0x17c>)
  401ba8:	4798      	blx	r3
  401baa:	2800      	cmp	r0, #0
  401bac:	d1cc      	bne.n	401b48 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401bb2:	f8c9 3000 	str.w	r3, [r9]
  401bb6:	f3bf 8f4f 	dsb	sy
  401bba:	f3bf 8f6f 	isb	sy
  401bbe:	e7c3      	b.n	401b48 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401bc0:	4620      	mov	r0, r4
  401bc2:	4b0a      	ldr	r3, [pc, #40]	; (401bec <xQueueReceive+0x178>)
  401bc4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bc6:	4b0a      	ldr	r3, [pc, #40]	; (401bf0 <xQueueReceive+0x17c>)
  401bc8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401bca:	4620      	mov	r0, r4
  401bcc:	4b0b      	ldr	r3, [pc, #44]	; (401bfc <xQueueReceive+0x188>)
  401bce:	4798      	blx	r3
  401bd0:	2800      	cmp	r0, #0
  401bd2:	d0b9      	beq.n	401b48 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401bd4:	2000      	movs	r0, #0
  401bd6:	e7a0      	b.n	401b1a <xQueueReceive+0xa6>
  401bd8:	004027f5 	.word	0x004027f5
  401bdc:	004014cd 	.word	0x004014cd
  401be0:	004026a5 	.word	0x004026a5
  401be4:	e000ed04 	.word	0xe000ed04
  401be8:	00401111 	.word	0x00401111
  401bec:	004014f5 	.word	0x004014f5
  401bf0:	004023dd 	.word	0x004023dd
  401bf4:	00402279 	.word	0x00402279
  401bf8:	00402755 	.word	0x00402755
  401bfc:	004013a5 	.word	0x004013a5
  401c00:	00402621 	.word	0x00402621
  401c04:	004010c5 	.word	0x004010c5
  401c08:	0040273d 	.word	0x0040273d

00401c0c <xQueueSemaphoreTake>:
{
  401c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401c10:	b085      	sub	sp, #20
  401c12:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401c14:	b168      	cbz	r0, 401c32 <xQueueSemaphoreTake+0x26>
  401c16:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401c18:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c1a:	b1ab      	cbz	r3, 401c48 <xQueueSemaphoreTake+0x3c>
  401c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c20:	b672      	cpsid	i
  401c22:	f383 8811 	msr	BASEPRI, r3
  401c26:	f3bf 8f6f 	isb	sy
  401c2a:	f3bf 8f4f 	dsb	sy
  401c2e:	b662      	cpsie	i
  401c30:	e7fe      	b.n	401c30 <xQueueSemaphoreTake+0x24>
  401c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c36:	b672      	cpsid	i
  401c38:	f383 8811 	msr	BASEPRI, r3
  401c3c:	f3bf 8f6f 	isb	sy
  401c40:	f3bf 8f4f 	dsb	sy
  401c44:	b662      	cpsie	i
  401c46:	e7fe      	b.n	401c46 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401c48:	4b5e      	ldr	r3, [pc, #376]	; (401dc4 <xQueueSemaphoreTake+0x1b8>)
  401c4a:	4798      	blx	r3
  401c4c:	b960      	cbnz	r0, 401c68 <xQueueSemaphoreTake+0x5c>
  401c4e:	9b01      	ldr	r3, [sp, #4]
  401c50:	b193      	cbz	r3, 401c78 <xQueueSemaphoreTake+0x6c>
  401c52:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c56:	b672      	cpsid	i
  401c58:	f383 8811 	msr	BASEPRI, r3
  401c5c:	f3bf 8f6f 	isb	sy
  401c60:	f3bf 8f4f 	dsb	sy
  401c64:	b662      	cpsie	i
  401c66:	e7fe      	b.n	401c66 <xQueueSemaphoreTake+0x5a>
  401c68:	2500      	movs	r5, #0
  401c6a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401c6c:	4e56      	ldr	r6, [pc, #344]	; (401dc8 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401c6e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401dfc <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401c72:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401dd4 <xQueueSemaphoreTake+0x1c8>
  401c76:	e052      	b.n	401d1e <xQueueSemaphoreTake+0x112>
  401c78:	2500      	movs	r5, #0
  401c7a:	462f      	mov	r7, r5
  401c7c:	e7f6      	b.n	401c6c <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401c7e:	3b01      	subs	r3, #1
  401c80:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c82:	6823      	ldr	r3, [r4, #0]
  401c84:	b913      	cbnz	r3, 401c8c <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401c86:	4b51      	ldr	r3, [pc, #324]	; (401dcc <xQueueSemaphoreTake+0x1c0>)
  401c88:	4798      	blx	r3
  401c8a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c8c:	6923      	ldr	r3, [r4, #16]
  401c8e:	b163      	cbz	r3, 401caa <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c90:	f104 0010 	add.w	r0, r4, #16
  401c94:	4b4e      	ldr	r3, [pc, #312]	; (401dd0 <xQueueSemaphoreTake+0x1c4>)
  401c96:	4798      	blx	r3
  401c98:	b138      	cbz	r0, 401caa <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c9e:	4b4d      	ldr	r3, [pc, #308]	; (401dd4 <xQueueSemaphoreTake+0x1c8>)
  401ca0:	601a      	str	r2, [r3, #0]
  401ca2:	f3bf 8f4f 	dsb	sy
  401ca6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401caa:	4b4b      	ldr	r3, [pc, #300]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cac:	4798      	blx	r3
				return pdPASS;
  401cae:	2501      	movs	r5, #1
}
  401cb0:	4628      	mov	r0, r5
  401cb2:	b005      	add	sp, #20
  401cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401cb8:	b155      	cbz	r5, 401cd0 <xQueueSemaphoreTake+0xc4>
  401cba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cbe:	b672      	cpsid	i
  401cc0:	f383 8811 	msr	BASEPRI, r3
  401cc4:	f3bf 8f6f 	isb	sy
  401cc8:	f3bf 8f4f 	dsb	sy
  401ccc:	b662      	cpsie	i
  401cce:	e7fe      	b.n	401cce <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401cd0:	4b41      	ldr	r3, [pc, #260]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cd2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401cd4:	e7ec      	b.n	401cb0 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401cd6:	a802      	add	r0, sp, #8
  401cd8:	47c8      	blx	r9
  401cda:	e029      	b.n	401d30 <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401cdc:	2300      	movs	r3, #0
  401cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401ce2:	e030      	b.n	401d46 <xQueueSemaphoreTake+0x13a>
  401ce4:	2300      	movs	r3, #0
  401ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401cea:	e032      	b.n	401d52 <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401cec:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401cee:	6860      	ldr	r0, [r4, #4]
  401cf0:	4b3a      	ldr	r3, [pc, #232]	; (401ddc <xQueueSemaphoreTake+0x1d0>)
  401cf2:	4798      	blx	r3
  401cf4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401cf6:	4b38      	ldr	r3, [pc, #224]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401cf8:	4798      	blx	r3
  401cfa:	e03a      	b.n	401d72 <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401cfc:	4620      	mov	r0, r4
  401cfe:	4b38      	ldr	r3, [pc, #224]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d00:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401d02:	4b38      	ldr	r3, [pc, #224]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d04:	4798      	blx	r3
  401d06:	e009      	b.n	401d1c <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401d08:	4620      	mov	r0, r4
  401d0a:	4b35      	ldr	r3, [pc, #212]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d0c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401d0e:	4b35      	ldr	r3, [pc, #212]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d10:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d12:	4620      	mov	r0, r4
  401d14:	4b34      	ldr	r3, [pc, #208]	; (401de8 <xQueueSemaphoreTake+0x1dc>)
  401d16:	4798      	blx	r3
  401d18:	2800      	cmp	r0, #0
  401d1a:	d13f      	bne.n	401d9c <xQueueSemaphoreTake+0x190>
  401d1c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401d1e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401d22:	2b00      	cmp	r3, #0
  401d24:	d1ab      	bne.n	401c7e <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401d26:	9b01      	ldr	r3, [sp, #4]
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d0c5      	beq.n	401cb8 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401d2c:	2f00      	cmp	r7, #0
  401d2e:	d0d2      	beq.n	401cd6 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401d30:	4b29      	ldr	r3, [pc, #164]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401d32:	4798      	blx	r3
		vTaskSuspendAll();
  401d34:	4b2d      	ldr	r3, [pc, #180]	; (401dec <xQueueSemaphoreTake+0x1e0>)
  401d36:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d38:	47b0      	blx	r6
  401d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401d3e:	b25b      	sxtb	r3, r3
  401d40:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d44:	d0ca      	beq.n	401cdc <xQueueSemaphoreTake+0xd0>
  401d46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401d4a:	b25b      	sxtb	r3, r3
  401d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d50:	d0c8      	beq.n	401ce4 <xQueueSemaphoreTake+0xd8>
  401d52:	4b21      	ldr	r3, [pc, #132]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401d54:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d56:	a901      	add	r1, sp, #4
  401d58:	a802      	add	r0, sp, #8
  401d5a:	4b25      	ldr	r3, [pc, #148]	; (401df0 <xQueueSemaphoreTake+0x1e4>)
  401d5c:	4798      	blx	r3
  401d5e:	2800      	cmp	r0, #0
  401d60:	d1d2      	bne.n	401d08 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d62:	4620      	mov	r0, r4
  401d64:	4b20      	ldr	r3, [pc, #128]	; (401de8 <xQueueSemaphoreTake+0x1dc>)
  401d66:	4798      	blx	r3
  401d68:	2800      	cmp	r0, #0
  401d6a:	d0c7      	beq.n	401cfc <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d6c:	6823      	ldr	r3, [r4, #0]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d0bc      	beq.n	401cec <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401d72:	9901      	ldr	r1, [sp, #4]
  401d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d78:	4b1e      	ldr	r3, [pc, #120]	; (401df4 <xQueueSemaphoreTake+0x1e8>)
  401d7a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401d7c:	4620      	mov	r0, r4
  401d7e:	4b18      	ldr	r3, [pc, #96]	; (401de0 <xQueueSemaphoreTake+0x1d4>)
  401d80:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401d82:	4b18      	ldr	r3, [pc, #96]	; (401de4 <xQueueSemaphoreTake+0x1d8>)
  401d84:	4798      	blx	r3
  401d86:	2800      	cmp	r0, #0
  401d88:	d1c8      	bne.n	401d1c <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401d8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d8e:	f8c8 3000 	str.w	r3, [r8]
  401d92:	f3bf 8f4f 	dsb	sy
  401d96:	f3bf 8f6f 	isb	sy
  401d9a:	e7bf      	b.n	401d1c <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401d9c:	2d00      	cmp	r5, #0
  401d9e:	d087      	beq.n	401cb0 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401da0:	4b09      	ldr	r3, [pc, #36]	; (401dc8 <xQueueSemaphoreTake+0x1bc>)
  401da2:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401da6:	b153      	cbz	r3, 401dbe <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401daa:	6819      	ldr	r1, [r3, #0]
  401dac:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401db0:	6860      	ldr	r0, [r4, #4]
  401db2:	4b11      	ldr	r3, [pc, #68]	; (401df8 <xQueueSemaphoreTake+0x1ec>)
  401db4:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401db6:	4b08      	ldr	r3, [pc, #32]	; (401dd8 <xQueueSemaphoreTake+0x1cc>)
  401db8:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401dba:	2500      	movs	r5, #0
  401dbc:	e778      	b.n	401cb0 <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401dbe:	2100      	movs	r1, #0
  401dc0:	e7f6      	b.n	401db0 <xQueueSemaphoreTake+0x1a4>
  401dc2:	bf00      	nop
  401dc4:	004027f5 	.word	0x004027f5
  401dc8:	004010c5 	.word	0x004010c5
  401dcc:	00402a5d 	.word	0x00402a5d
  401dd0:	004026a5 	.word	0x004026a5
  401dd4:	e000ed04 	.word	0xe000ed04
  401dd8:	00401111 	.word	0x00401111
  401ddc:	00402815 	.word	0x00402815
  401de0:	004014f5 	.word	0x004014f5
  401de4:	004023dd 	.word	0x004023dd
  401de8:	004013a5 	.word	0x004013a5
  401dec:	00402279 	.word	0x00402279
  401df0:	00402755 	.word	0x00402755
  401df4:	00402621 	.word	0x00402621
  401df8:	00402991 	.word	0x00402991
  401dfc:	0040273d 	.word	0x0040273d

00401e00 <vQueueAddToRegistry>:
	{
  401e00:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401e02:	4b0b      	ldr	r3, [pc, #44]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e04:	681b      	ldr	r3, [r3, #0]
  401e06:	b153      	cbz	r3, 401e1e <vQueueAddToRegistry+0x1e>
  401e08:	2301      	movs	r3, #1
  401e0a:	4c09      	ldr	r4, [pc, #36]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e0c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401e10:	b132      	cbz	r2, 401e20 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e12:	3301      	adds	r3, #1
  401e14:	2b08      	cmp	r3, #8
  401e16:	d1f9      	bne.n	401e0c <vQueueAddToRegistry+0xc>
	}
  401e18:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e1c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e1e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401e20:	4a03      	ldr	r2, [pc, #12]	; (401e30 <vQueueAddToRegistry+0x30>)
  401e22:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401e26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401e2a:	6058      	str	r0, [r3, #4]
				break;
  401e2c:	e7f4      	b.n	401e18 <vQueueAddToRegistry+0x18>
  401e2e:	bf00      	nop
  401e30:	20400be0 	.word	0x20400be0

00401e34 <vQueueWaitForMessageRestricted>:
	{
  401e34:	b570      	push	{r4, r5, r6, lr}
  401e36:	4604      	mov	r4, r0
  401e38:	460d      	mov	r5, r1
  401e3a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401e3c:	4b12      	ldr	r3, [pc, #72]	; (401e88 <vQueueWaitForMessageRestricted+0x54>)
  401e3e:	4798      	blx	r3
  401e40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401e44:	b25b      	sxtb	r3, r3
  401e46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e4a:	d00d      	beq.n	401e68 <vQueueWaitForMessageRestricted+0x34>
  401e4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401e50:	b25b      	sxtb	r3, r3
  401e52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e56:	d00b      	beq.n	401e70 <vQueueWaitForMessageRestricted+0x3c>
  401e58:	4b0c      	ldr	r3, [pc, #48]	; (401e8c <vQueueWaitForMessageRestricted+0x58>)
  401e5a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e5e:	b15b      	cbz	r3, 401e78 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401e60:	4620      	mov	r0, r4
  401e62:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <vQueueWaitForMessageRestricted+0x5c>)
  401e64:	4798      	blx	r3
  401e66:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401e68:	2300      	movs	r3, #0
  401e6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401e6e:	e7ed      	b.n	401e4c <vQueueWaitForMessageRestricted+0x18>
  401e70:	2300      	movs	r3, #0
  401e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401e76:	e7ef      	b.n	401e58 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401e78:	4632      	mov	r2, r6
  401e7a:	4629      	mov	r1, r5
  401e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e80:	4b04      	ldr	r3, [pc, #16]	; (401e94 <vQueueWaitForMessageRestricted+0x60>)
  401e82:	4798      	blx	r3
  401e84:	e7ec      	b.n	401e60 <vQueueWaitForMessageRestricted+0x2c>
  401e86:	bf00      	nop
  401e88:	004010c5 	.word	0x004010c5
  401e8c:	00401111 	.word	0x00401111
  401e90:	004014f5 	.word	0x004014f5
  401e94:	0040265d 	.word	0x0040265d

00401e98 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e98:	4b08      	ldr	r3, [pc, #32]	; (401ebc <prvResetNextTaskUnblockTime+0x24>)
  401e9a:	681b      	ldr	r3, [r3, #0]
  401e9c:	681b      	ldr	r3, [r3, #0]
  401e9e:	b13b      	cbz	r3, 401eb0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ea0:	4b06      	ldr	r3, [pc, #24]	; (401ebc <prvResetNextTaskUnblockTime+0x24>)
  401ea2:	681b      	ldr	r3, [r3, #0]
  401ea4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401ea6:	68db      	ldr	r3, [r3, #12]
  401ea8:	685a      	ldr	r2, [r3, #4]
  401eaa:	4b05      	ldr	r3, [pc, #20]	; (401ec0 <prvResetNextTaskUnblockTime+0x28>)
  401eac:	601a      	str	r2, [r3, #0]
  401eae:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401eb0:	f04f 32ff 	mov.w	r2, #4294967295
  401eb4:	4b02      	ldr	r3, [pc, #8]	; (401ec0 <prvResetNextTaskUnblockTime+0x28>)
  401eb6:	601a      	str	r2, [r3, #0]
  401eb8:	4770      	bx	lr
  401eba:	bf00      	nop
  401ebc:	20400a64 	.word	0x20400a64
  401ec0:	20400b14 	.word	0x20400b14

00401ec4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401ec4:	b570      	push	{r4, r5, r6, lr}
  401ec6:	4604      	mov	r4, r0
  401ec8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401eca:	4b1c      	ldr	r3, [pc, #112]	; (401f3c <prvAddCurrentTaskToDelayedList+0x78>)
  401ecc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401ece:	4b1c      	ldr	r3, [pc, #112]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ed0:	6818      	ldr	r0, [r3, #0]
  401ed2:	3004      	adds	r0, #4
  401ed4:	4b1b      	ldr	r3, [pc, #108]	; (401f44 <prvAddCurrentTaskToDelayedList+0x80>)
  401ed6:	4798      	blx	r3
  401ed8:	b948      	cbnz	r0, 401eee <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401eda:	4b19      	ldr	r3, [pc, #100]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401edc:	681a      	ldr	r2, [r3, #0]
  401ede:	491a      	ldr	r1, [pc, #104]	; (401f48 <prvAddCurrentTaskToDelayedList+0x84>)
  401ee0:	680b      	ldr	r3, [r1, #0]
  401ee2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ee4:	2201      	movs	r2, #1
  401ee6:	4082      	lsls	r2, r0
  401ee8:	ea23 0302 	bic.w	r3, r3, r2
  401eec:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401eee:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ef2:	d100      	bne.n	401ef6 <prvAddCurrentTaskToDelayedList+0x32>
  401ef4:	b99e      	cbnz	r6, 401f1e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401ef6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401ef8:	4b11      	ldr	r3, [pc, #68]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401efe:	42a5      	cmp	r5, r4
  401f00:	d814      	bhi.n	401f2c <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f02:	4b12      	ldr	r3, [pc, #72]	; (401f4c <prvAddCurrentTaskToDelayedList+0x88>)
  401f04:	6818      	ldr	r0, [r3, #0]
  401f06:	4b0e      	ldr	r3, [pc, #56]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f08:	6819      	ldr	r1, [r3, #0]
  401f0a:	3104      	adds	r1, #4
  401f0c:	4b10      	ldr	r3, [pc, #64]	; (401f50 <prvAddCurrentTaskToDelayedList+0x8c>)
  401f0e:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401f10:	4b10      	ldr	r3, [pc, #64]	; (401f54 <prvAddCurrentTaskToDelayedList+0x90>)
  401f12:	681b      	ldr	r3, [r3, #0]
  401f14:	429c      	cmp	r4, r3
  401f16:	d201      	bcs.n	401f1c <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401f18:	4b0e      	ldr	r3, [pc, #56]	; (401f54 <prvAddCurrentTaskToDelayedList+0x90>)
  401f1a:	601c      	str	r4, [r3, #0]
  401f1c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f1e:	4b08      	ldr	r3, [pc, #32]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f20:	6819      	ldr	r1, [r3, #0]
  401f22:	3104      	adds	r1, #4
  401f24:	480c      	ldr	r0, [pc, #48]	; (401f58 <prvAddCurrentTaskToDelayedList+0x94>)
  401f26:	4b0d      	ldr	r3, [pc, #52]	; (401f5c <prvAddCurrentTaskToDelayedList+0x98>)
  401f28:	4798      	blx	r3
  401f2a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f2c:	4b0c      	ldr	r3, [pc, #48]	; (401f60 <prvAddCurrentTaskToDelayedList+0x9c>)
  401f2e:	6818      	ldr	r0, [r3, #0]
  401f30:	4b03      	ldr	r3, [pc, #12]	; (401f40 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f32:	6819      	ldr	r1, [r3, #0]
  401f34:	3104      	adds	r1, #4
  401f36:	4b06      	ldr	r3, [pc, #24]	; (401f50 <prvAddCurrentTaskToDelayedList+0x8c>)
  401f38:	4798      	blx	r3
  401f3a:	bd70      	pop	{r4, r5, r6, pc}
  401f3c:	20400b5c 	.word	0x20400b5c
  401f40:	20400a60 	.word	0x20400a60
  401f44:	00400fc9 	.word	0x00400fc9
  401f48:	20400ae4 	.word	0x20400ae4
  401f4c:	20400a64 	.word	0x20400a64
  401f50:	00400f95 	.word	0x00400f95
  401f54:	20400b14 	.word	0x20400b14
  401f58:	20400b34 	.word	0x20400b34
  401f5c:	00400f7d 	.word	0x00400f7d
  401f60:	20400a68 	.word	0x20400a68

00401f64 <prvIdleTask>:
{
  401f64:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f66:	4d18      	ldr	r5, [pc, #96]	; (401fc8 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401f68:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401fe4 <prvIdleTask+0x80>
				taskYIELD();
  401f6c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401fe8 <prvIdleTask+0x84>
  401f70:	e001      	b.n	401f76 <prvIdleTask+0x12>
			vApplicationIdleHook();
  401f72:	4b16      	ldr	r3, [pc, #88]	; (401fcc <prvIdleTask+0x68>)
  401f74:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f76:	682b      	ldr	r3, [r5, #0]
  401f78:	b1c3      	cbz	r3, 401fac <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f7a:	4f15      	ldr	r7, [pc, #84]	; (401fd0 <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f7c:	4e15      	ldr	r6, [pc, #84]	; (401fd4 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401f7e:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f80:	68fb      	ldr	r3, [r7, #12]
  401f82:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f84:	1d20      	adds	r0, r4, #4
  401f86:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401f88:	4a13      	ldr	r2, [pc, #76]	; (401fd8 <prvIdleTask+0x74>)
  401f8a:	6813      	ldr	r3, [r2, #0]
  401f8c:	3b01      	subs	r3, #1
  401f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401f90:	682b      	ldr	r3, [r5, #0]
  401f92:	3b01      	subs	r3, #1
  401f94:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401f96:	4b11      	ldr	r3, [pc, #68]	; (401fdc <prvIdleTask+0x78>)
  401f98:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401f9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f9c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401fec <prvIdleTask+0x88>
  401fa0:	47d0      	blx	sl
			vPortFree( pxTCB );
  401fa2:	4620      	mov	r0, r4
  401fa4:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401fa6:	682b      	ldr	r3, [r5, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d1e8      	bne.n	401f7e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401fac:	4b0c      	ldr	r3, [pc, #48]	; (401fe0 <prvIdleTask+0x7c>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	2b01      	cmp	r3, #1
  401fb2:	d9de      	bls.n	401f72 <prvIdleTask+0xe>
				taskYIELD();
  401fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fb8:	f8c9 3000 	str.w	r3, [r9]
  401fbc:	f3bf 8f4f 	dsb	sy
  401fc0:	f3bf 8f6f 	isb	sy
  401fc4:	e7d5      	b.n	401f72 <prvIdleTask+0xe>
  401fc6:	bf00      	nop
  401fc8:	20400ad4 	.word	0x20400ad4
  401fcc:	004031e5 	.word	0x004031e5
  401fd0:	20400b48 	.word	0x20400b48
  401fd4:	00400fc9 	.word	0x00400fc9
  401fd8:	20400ad0 	.word	0x20400ad0
  401fdc:	00401111 	.word	0x00401111
  401fe0:	20400a6c 	.word	0x20400a6c
  401fe4:	004010c5 	.word	0x004010c5
  401fe8:	e000ed04 	.word	0xe000ed04
  401fec:	00401381 	.word	0x00401381

00401ff0 <xTaskCreate>:
	{
  401ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ff4:	b083      	sub	sp, #12
  401ff6:	4683      	mov	fp, r0
  401ff8:	460d      	mov	r5, r1
  401ffa:	9301      	str	r3, [sp, #4]
  401ffc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402000:	0096      	lsls	r6, r2, #2
  402002:	4630      	mov	r0, r6
  402004:	4b60      	ldr	r3, [pc, #384]	; (402188 <xTaskCreate+0x198>)
  402006:	4798      	blx	r3
			if( pxStack != NULL )
  402008:	2800      	cmp	r0, #0
  40200a:	f000 808d 	beq.w	402128 <xTaskCreate+0x138>
  40200e:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  402010:	2058      	movs	r0, #88	; 0x58
  402012:	4b5d      	ldr	r3, [pc, #372]	; (402188 <xTaskCreate+0x198>)
  402014:	4798      	blx	r3
				if( pxNewTCB != NULL )
  402016:	4604      	mov	r4, r0
  402018:	2800      	cmp	r0, #0
  40201a:	f000 8082 	beq.w	402122 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  40201e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  402020:	4632      	mov	r2, r6
  402022:	21a5      	movs	r1, #165	; 0xa5
  402024:	4638      	mov	r0, r7
  402026:	4b59      	ldr	r3, [pc, #356]	; (40218c <xTaskCreate+0x19c>)
  402028:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  40202a:	3e04      	subs	r6, #4
  40202c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40202e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402030:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402034:	782b      	ldrb	r3, [r5, #0]
  402036:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40203a:	782b      	ldrb	r3, [r5, #0]
  40203c:	b163      	cbz	r3, 402058 <xTaskCreate+0x68>
  40203e:	462b      	mov	r3, r5
  402040:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402044:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402048:	7858      	ldrb	r0, [r3, #1]
  40204a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40204e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  402052:	b108      	cbz	r0, 402058 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402054:	428b      	cmp	r3, r1
  402056:	d1f7      	bne.n	402048 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402058:	2700      	movs	r7, #0
  40205a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40205e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402060:	2d04      	cmp	r5, #4
  402062:	bf28      	it	cs
  402064:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  402066:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  402068:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40206a:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40206c:	f104 0804 	add.w	r8, r4, #4
  402070:	4640      	mov	r0, r8
  402072:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4021e0 <xTaskCreate+0x1f0>
  402076:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  402078:	f104 0018 	add.w	r0, r4, #24
  40207c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40207e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402080:	f1c5 0505 	rsb	r5, r5, #5
  402084:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  402086:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  402088:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40208a:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40208e:	9a01      	ldr	r2, [sp, #4]
  402090:	4659      	mov	r1, fp
  402092:	4630      	mov	r0, r6
  402094:	4b3e      	ldr	r3, [pc, #248]	; (402190 <xTaskCreate+0x1a0>)
  402096:	4798      	blx	r3
  402098:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  40209a:	f1ba 0f00 	cmp.w	sl, #0
  40209e:	d001      	beq.n	4020a4 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4020a0:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  4020a4:	4b3b      	ldr	r3, [pc, #236]	; (402194 <xTaskCreate+0x1a4>)
  4020a6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4020a8:	4a3b      	ldr	r2, [pc, #236]	; (402198 <xTaskCreate+0x1a8>)
  4020aa:	6813      	ldr	r3, [r2, #0]
  4020ac:	3301      	adds	r3, #1
  4020ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4020b0:	4b3a      	ldr	r3, [pc, #232]	; (40219c <xTaskCreate+0x1ac>)
  4020b2:	681b      	ldr	r3, [r3, #0]
  4020b4:	2b00      	cmp	r3, #0
  4020b6:	d03a      	beq.n	40212e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  4020b8:	4b39      	ldr	r3, [pc, #228]	; (4021a0 <xTaskCreate+0x1b0>)
  4020ba:	681b      	ldr	r3, [r3, #0]
  4020bc:	b93b      	cbnz	r3, 4020ce <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4020be:	4b37      	ldr	r3, [pc, #220]	; (40219c <xTaskCreate+0x1ac>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020c6:	429a      	cmp	r2, r3
  4020c8:	d801      	bhi.n	4020ce <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  4020ca:	4b34      	ldr	r3, [pc, #208]	; (40219c <xTaskCreate+0x1ac>)
  4020cc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  4020ce:	4a35      	ldr	r2, [pc, #212]	; (4021a4 <xTaskCreate+0x1b4>)
  4020d0:	6813      	ldr	r3, [r2, #0]
  4020d2:	3301      	adds	r3, #1
  4020d4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  4020d6:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  4020d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020da:	4a33      	ldr	r2, [pc, #204]	; (4021a8 <xTaskCreate+0x1b8>)
  4020dc:	6811      	ldr	r1, [r2, #0]
  4020de:	2301      	movs	r3, #1
  4020e0:	4083      	lsls	r3, r0
  4020e2:	430b      	orrs	r3, r1
  4020e4:	6013      	str	r3, [r2, #0]
  4020e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020ea:	4641      	mov	r1, r8
  4020ec:	4b2f      	ldr	r3, [pc, #188]	; (4021ac <xTaskCreate+0x1bc>)
  4020ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020f2:	4b2f      	ldr	r3, [pc, #188]	; (4021b0 <xTaskCreate+0x1c0>)
  4020f4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4020f6:	4b2f      	ldr	r3, [pc, #188]	; (4021b4 <xTaskCreate+0x1c4>)
  4020f8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4020fa:	4b29      	ldr	r3, [pc, #164]	; (4021a0 <xTaskCreate+0x1b0>)
  4020fc:	681b      	ldr	r3, [r3, #0]
  4020fe:	2b00      	cmp	r3, #0
  402100:	d03b      	beq.n	40217a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  402102:	4b26      	ldr	r3, [pc, #152]	; (40219c <xTaskCreate+0x1ac>)
  402104:	681b      	ldr	r3, [r3, #0]
  402106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40210a:	429a      	cmp	r2, r3
  40210c:	d239      	bcs.n	402182 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402112:	4b29      	ldr	r3, [pc, #164]	; (4021b8 <xTaskCreate+0x1c8>)
  402114:	601a      	str	r2, [r3, #0]
  402116:	f3bf 8f4f 	dsb	sy
  40211a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40211e:	2001      	movs	r0, #1
  402120:	e02c      	b.n	40217c <xTaskCreate+0x18c>
					vPortFree( pxStack );
  402122:	4638      	mov	r0, r7
  402124:	4b25      	ldr	r3, [pc, #148]	; (4021bc <xTaskCreate+0x1cc>)
  402126:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402128:	f04f 30ff 	mov.w	r0, #4294967295
  40212c:	e026      	b.n	40217c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  40212e:	4b1b      	ldr	r3, [pc, #108]	; (40219c <xTaskCreate+0x1ac>)
  402130:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402132:	6813      	ldr	r3, [r2, #0]
  402134:	2b01      	cmp	r3, #1
  402136:	d1ca      	bne.n	4020ce <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402138:	4e1c      	ldr	r6, [pc, #112]	; (4021ac <xTaskCreate+0x1bc>)
  40213a:	4630      	mov	r0, r6
  40213c:	4d20      	ldr	r5, [pc, #128]	; (4021c0 <xTaskCreate+0x1d0>)
  40213e:	47a8      	blx	r5
  402140:	f106 0014 	add.w	r0, r6, #20
  402144:	47a8      	blx	r5
  402146:	f106 0028 	add.w	r0, r6, #40	; 0x28
  40214a:	47a8      	blx	r5
  40214c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  402150:	47a8      	blx	r5
  402152:	f106 0050 	add.w	r0, r6, #80	; 0x50
  402156:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  402158:	4f1a      	ldr	r7, [pc, #104]	; (4021c4 <xTaskCreate+0x1d4>)
  40215a:	4638      	mov	r0, r7
  40215c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40215e:	4e1a      	ldr	r6, [pc, #104]	; (4021c8 <xTaskCreate+0x1d8>)
  402160:	4630      	mov	r0, r6
  402162:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402164:	4819      	ldr	r0, [pc, #100]	; (4021cc <xTaskCreate+0x1dc>)
  402166:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  402168:	4819      	ldr	r0, [pc, #100]	; (4021d0 <xTaskCreate+0x1e0>)
  40216a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40216c:	4819      	ldr	r0, [pc, #100]	; (4021d4 <xTaskCreate+0x1e4>)
  40216e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  402170:	4b19      	ldr	r3, [pc, #100]	; (4021d8 <xTaskCreate+0x1e8>)
  402172:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402174:	4b19      	ldr	r3, [pc, #100]	; (4021dc <xTaskCreate+0x1ec>)
  402176:	601e      	str	r6, [r3, #0]
  402178:	e7a9      	b.n	4020ce <xTaskCreate+0xde>
			xReturn = pdPASS;
  40217a:	2001      	movs	r0, #1
	}
  40217c:	b003      	add	sp, #12
  40217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  402182:	2001      	movs	r0, #1
		return xReturn;
  402184:	e7fa      	b.n	40217c <xTaskCreate+0x18c>
  402186:	bf00      	nop
  402188:	00401351 	.word	0x00401351
  40218c:	0040400d 	.word	0x0040400d
  402190:	00401075 	.word	0x00401075
  402194:	004010c5 	.word	0x004010c5
  402198:	20400ad0 	.word	0x20400ad0
  40219c:	20400a60 	.word	0x20400a60
  4021a0:	20400b30 	.word	0x20400b30
  4021a4:	20400ae0 	.word	0x20400ae0
  4021a8:	20400ae4 	.word	0x20400ae4
  4021ac:	20400a6c 	.word	0x20400a6c
  4021b0:	00400f7d 	.word	0x00400f7d
  4021b4:	00401111 	.word	0x00401111
  4021b8:	e000ed04 	.word	0xe000ed04
  4021bc:	00401381 	.word	0x00401381
  4021c0:	00400f61 	.word	0x00400f61
  4021c4:	20400ae8 	.word	0x20400ae8
  4021c8:	20400afc 	.word	0x20400afc
  4021cc:	20400b1c 	.word	0x20400b1c
  4021d0:	20400b48 	.word	0x20400b48
  4021d4:	20400b34 	.word	0x20400b34
  4021d8:	20400a64 	.word	0x20400a64
  4021dc:	20400a68 	.word	0x20400a68
  4021e0:	00400f77 	.word	0x00400f77

004021e4 <vTaskStartScheduler>:
{
  4021e4:	b510      	push	{r4, lr}
  4021e6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  4021e8:	4b1a      	ldr	r3, [pc, #104]	; (402254 <vTaskStartScheduler+0x70>)
  4021ea:	9301      	str	r3, [sp, #4]
  4021ec:	2300      	movs	r3, #0
  4021ee:	9300      	str	r3, [sp, #0]
  4021f0:	2282      	movs	r2, #130	; 0x82
  4021f2:	4919      	ldr	r1, [pc, #100]	; (402258 <vTaskStartScheduler+0x74>)
  4021f4:	4819      	ldr	r0, [pc, #100]	; (40225c <vTaskStartScheduler+0x78>)
  4021f6:	4c1a      	ldr	r4, [pc, #104]	; (402260 <vTaskStartScheduler+0x7c>)
  4021f8:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4021fa:	2801      	cmp	r0, #1
  4021fc:	d004      	beq.n	402208 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4021fe:	f1b0 3fff 	cmp.w	r0, #4294967295
  402202:	d01c      	beq.n	40223e <vTaskStartScheduler+0x5a>
}
  402204:	b002      	add	sp, #8
  402206:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  402208:	4b16      	ldr	r3, [pc, #88]	; (402264 <vTaskStartScheduler+0x80>)
  40220a:	4798      	blx	r3
	if( xReturn == pdPASS )
  40220c:	2801      	cmp	r0, #1
  40220e:	d1f6      	bne.n	4021fe <vTaskStartScheduler+0x1a>
  402210:	f04f 0380 	mov.w	r3, #128	; 0x80
  402214:	b672      	cpsid	i
  402216:	f383 8811 	msr	BASEPRI, r3
  40221a:	f3bf 8f6f 	isb	sy
  40221e:	f3bf 8f4f 	dsb	sy
  402222:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402224:	f04f 32ff 	mov.w	r2, #4294967295
  402228:	4b0f      	ldr	r3, [pc, #60]	; (402268 <vTaskStartScheduler+0x84>)
  40222a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40222c:	2201      	movs	r2, #1
  40222e:	4b0f      	ldr	r3, [pc, #60]	; (40226c <vTaskStartScheduler+0x88>)
  402230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402232:	2200      	movs	r2, #0
  402234:	4b0e      	ldr	r3, [pc, #56]	; (402270 <vTaskStartScheduler+0x8c>)
  402236:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402238:	4b0e      	ldr	r3, [pc, #56]	; (402274 <vTaskStartScheduler+0x90>)
  40223a:	4798      	blx	r3
  40223c:	e7e2      	b.n	402204 <vTaskStartScheduler+0x20>
  40223e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402242:	b672      	cpsid	i
  402244:	f383 8811 	msr	BASEPRI, r3
  402248:	f3bf 8f6f 	isb	sy
  40224c:	f3bf 8f4f 	dsb	sy
  402250:	b662      	cpsie	i
  402252:	e7fe      	b.n	402252 <vTaskStartScheduler+0x6e>
  402254:	20400b10 	.word	0x20400b10
  402258:	00406b58 	.word	0x00406b58
  40225c:	00401f65 	.word	0x00401f65
  402260:	00401ff1 	.word	0x00401ff1
  402264:	00402b35 	.word	0x00402b35
  402268:	20400b14 	.word	0x20400b14
  40226c:	20400b30 	.word	0x20400b30
  402270:	20400b5c 	.word	0x20400b5c
  402274:	00401201 	.word	0x00401201

00402278 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402278:	4a02      	ldr	r2, [pc, #8]	; (402284 <vTaskSuspendAll+0xc>)
  40227a:	6813      	ldr	r3, [r2, #0]
  40227c:	3301      	adds	r3, #1
  40227e:	6013      	str	r3, [r2, #0]
  402280:	4770      	bx	lr
  402282:	bf00      	nop
  402284:	20400adc 	.word	0x20400adc

00402288 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402288:	4b01      	ldr	r3, [pc, #4]	; (402290 <xTaskGetTickCount+0x8>)
  40228a:	6818      	ldr	r0, [r3, #0]
}
  40228c:	4770      	bx	lr
  40228e:	bf00      	nop
  402290:	20400b5c 	.word	0x20400b5c

00402294 <xTaskIncrementTick>:
{
  402294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402298:	4b41      	ldr	r3, [pc, #260]	; (4023a0 <xTaskIncrementTick+0x10c>)
  40229a:	681b      	ldr	r3, [r3, #0]
  40229c:	2b00      	cmp	r3, #0
  40229e:	d177      	bne.n	402390 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4022a0:	4b40      	ldr	r3, [pc, #256]	; (4023a4 <xTaskIncrementTick+0x110>)
  4022a2:	681d      	ldr	r5, [r3, #0]
  4022a4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  4022a6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4022a8:	b9d5      	cbnz	r5, 4022e0 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  4022aa:	4b3f      	ldr	r3, [pc, #252]	; (4023a8 <xTaskIncrementTick+0x114>)
  4022ac:	681b      	ldr	r3, [r3, #0]
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	b153      	cbz	r3, 4022c8 <xTaskIncrementTick+0x34>
  4022b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b6:	b672      	cpsid	i
  4022b8:	f383 8811 	msr	BASEPRI, r3
  4022bc:	f3bf 8f6f 	isb	sy
  4022c0:	f3bf 8f4f 	dsb	sy
  4022c4:	b662      	cpsie	i
  4022c6:	e7fe      	b.n	4022c6 <xTaskIncrementTick+0x32>
  4022c8:	4a37      	ldr	r2, [pc, #220]	; (4023a8 <xTaskIncrementTick+0x114>)
  4022ca:	6811      	ldr	r1, [r2, #0]
  4022cc:	4b37      	ldr	r3, [pc, #220]	; (4023ac <xTaskIncrementTick+0x118>)
  4022ce:	6818      	ldr	r0, [r3, #0]
  4022d0:	6010      	str	r0, [r2, #0]
  4022d2:	6019      	str	r1, [r3, #0]
  4022d4:	4a36      	ldr	r2, [pc, #216]	; (4023b0 <xTaskIncrementTick+0x11c>)
  4022d6:	6813      	ldr	r3, [r2, #0]
  4022d8:	3301      	adds	r3, #1
  4022da:	6013      	str	r3, [r2, #0]
  4022dc:	4b35      	ldr	r3, [pc, #212]	; (4023b4 <xTaskIncrementTick+0x120>)
  4022de:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4022e0:	4b35      	ldr	r3, [pc, #212]	; (4023b8 <xTaskIncrementTick+0x124>)
  4022e2:	681b      	ldr	r3, [r3, #0]
  4022e4:	429d      	cmp	r5, r3
  4022e6:	d218      	bcs.n	40231a <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  4022e8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4022ea:	4b34      	ldr	r3, [pc, #208]	; (4023bc <xTaskIncrementTick+0x128>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4022f4:	009b      	lsls	r3, r3, #2
  4022f6:	4a32      	ldr	r2, [pc, #200]	; (4023c0 <xTaskIncrementTick+0x12c>)
  4022f8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  4022fa:	2b02      	cmp	r3, #2
  4022fc:	bf28      	it	cs
  4022fe:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402300:	4b30      	ldr	r3, [pc, #192]	; (4023c4 <xTaskIncrementTick+0x130>)
  402302:	681b      	ldr	r3, [r3, #0]
  402304:	b90b      	cbnz	r3, 40230a <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  402306:	4b30      	ldr	r3, [pc, #192]	; (4023c8 <xTaskIncrementTick+0x134>)
  402308:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40230a:	4b30      	ldr	r3, [pc, #192]	; (4023cc <xTaskIncrementTick+0x138>)
  40230c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40230e:	2b00      	cmp	r3, #0
}
  402310:	bf0c      	ite	eq
  402312:	4620      	moveq	r0, r4
  402314:	2001      	movne	r0, #1
  402316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40231a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40231c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4023a8 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402320:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4023d8 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  402324:	4f2a      	ldr	r7, [pc, #168]	; (4023d0 <xTaskIncrementTick+0x13c>)
  402326:	e01f      	b.n	402368 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402328:	f04f 32ff 	mov.w	r2, #4294967295
  40232c:	4b22      	ldr	r3, [pc, #136]	; (4023b8 <xTaskIncrementTick+0x124>)
  40232e:	601a      	str	r2, [r3, #0]
					break;
  402330:	e7db      	b.n	4022ea <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  402332:	4a21      	ldr	r2, [pc, #132]	; (4023b8 <xTaskIncrementTick+0x124>)
  402334:	6013      	str	r3, [r2, #0]
						break;
  402336:	e7d8      	b.n	4022ea <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402338:	f106 0018 	add.w	r0, r6, #24
  40233c:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40233e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  402340:	683a      	ldr	r2, [r7, #0]
  402342:	2301      	movs	r3, #1
  402344:	4083      	lsls	r3, r0
  402346:	4313      	orrs	r3, r2
  402348:	603b      	str	r3, [r7, #0]
  40234a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40234e:	4651      	mov	r1, sl
  402350:	4b1b      	ldr	r3, [pc, #108]	; (4023c0 <xTaskIncrementTick+0x12c>)
  402352:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402356:	4b1f      	ldr	r3, [pc, #124]	; (4023d4 <xTaskIncrementTick+0x140>)
  402358:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40235a:	4b18      	ldr	r3, [pc, #96]	; (4023bc <xTaskIncrementTick+0x128>)
  40235c:	681b      	ldr	r3, [r3, #0]
  40235e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  402360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  402362:	429a      	cmp	r2, r3
  402364:	bf28      	it	cs
  402366:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402368:	f8d9 3000 	ldr.w	r3, [r9]
  40236c:	681b      	ldr	r3, [r3, #0]
  40236e:	2b00      	cmp	r3, #0
  402370:	d0da      	beq.n	402328 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402372:	f8d9 3000 	ldr.w	r3, [r9]
  402376:	68db      	ldr	r3, [r3, #12]
  402378:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40237a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  40237c:	429d      	cmp	r5, r3
  40237e:	d3d8      	bcc.n	402332 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402380:	f106 0a04 	add.w	sl, r6, #4
  402384:	4650      	mov	r0, sl
  402386:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402388:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40238a:	2b00      	cmp	r3, #0
  40238c:	d1d4      	bne.n	402338 <xTaskIncrementTick+0xa4>
  40238e:	e7d6      	b.n	40233e <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402390:	4a0c      	ldr	r2, [pc, #48]	; (4023c4 <xTaskIncrementTick+0x130>)
  402392:	6813      	ldr	r3, [r2, #0]
  402394:	3301      	adds	r3, #1
  402396:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402398:	4b0b      	ldr	r3, [pc, #44]	; (4023c8 <xTaskIncrementTick+0x134>)
  40239a:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40239c:	2400      	movs	r4, #0
  40239e:	e7b4      	b.n	40230a <xTaskIncrementTick+0x76>
  4023a0:	20400adc 	.word	0x20400adc
  4023a4:	20400b5c 	.word	0x20400b5c
  4023a8:	20400a64 	.word	0x20400a64
  4023ac:	20400a68 	.word	0x20400a68
  4023b0:	20400b18 	.word	0x20400b18
  4023b4:	00401e99 	.word	0x00401e99
  4023b8:	20400b14 	.word	0x20400b14
  4023bc:	20400a60 	.word	0x20400a60
  4023c0:	20400a6c 	.word	0x20400a6c
  4023c4:	20400ad8 	.word	0x20400ad8
  4023c8:	004031f5 	.word	0x004031f5
  4023cc:	20400b60 	.word	0x20400b60
  4023d0:	20400ae4 	.word	0x20400ae4
  4023d4:	00400f7d 	.word	0x00400f7d
  4023d8:	00400fc9 	.word	0x00400fc9

004023dc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4023dc:	4b36      	ldr	r3, [pc, #216]	; (4024b8 <xTaskResumeAll+0xdc>)
  4023de:	681b      	ldr	r3, [r3, #0]
  4023e0:	b953      	cbnz	r3, 4023f8 <xTaskResumeAll+0x1c>
  4023e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023e6:	b672      	cpsid	i
  4023e8:	f383 8811 	msr	BASEPRI, r3
  4023ec:	f3bf 8f6f 	isb	sy
  4023f0:	f3bf 8f4f 	dsb	sy
  4023f4:	b662      	cpsie	i
  4023f6:	e7fe      	b.n	4023f6 <xTaskResumeAll+0x1a>
{
  4023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  4023fc:	4b2f      	ldr	r3, [pc, #188]	; (4024bc <xTaskResumeAll+0xe0>)
  4023fe:	4798      	blx	r3
		--uxSchedulerSuspended;
  402400:	4b2d      	ldr	r3, [pc, #180]	; (4024b8 <xTaskResumeAll+0xdc>)
  402402:	681a      	ldr	r2, [r3, #0]
  402404:	3a01      	subs	r2, #1
  402406:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402408:	681b      	ldr	r3, [r3, #0]
  40240a:	2b00      	cmp	r3, #0
  40240c:	d150      	bne.n	4024b0 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40240e:	4b2c      	ldr	r3, [pc, #176]	; (4024c0 <xTaskResumeAll+0xe4>)
  402410:	681b      	ldr	r3, [r3, #0]
  402412:	b92b      	cbnz	r3, 402420 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  402414:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402416:	4b2b      	ldr	r3, [pc, #172]	; (4024c4 <xTaskResumeAll+0xe8>)
  402418:	4798      	blx	r3
}
  40241a:	4620      	mov	r0, r4
  40241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402420:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402422:	4f29      	ldr	r7, [pc, #164]	; (4024c8 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402424:	4e29      	ldr	r6, [pc, #164]	; (4024cc <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  402426:	4d2a      	ldr	r5, [pc, #168]	; (4024d0 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402428:	683b      	ldr	r3, [r7, #0]
  40242a:	b303      	cbz	r3, 40246e <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40242c:	68fb      	ldr	r3, [r7, #12]
  40242e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402430:	f104 0018 	add.w	r0, r4, #24
  402434:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402436:	f104 0804 	add.w	r8, r4, #4
  40243a:	4640      	mov	r0, r8
  40243c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40243e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402440:	682a      	ldr	r2, [r5, #0]
  402442:	2301      	movs	r3, #1
  402444:	4083      	lsls	r3, r0
  402446:	4313      	orrs	r3, r2
  402448:	602b      	str	r3, [r5, #0]
  40244a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40244e:	4641      	mov	r1, r8
  402450:	4b20      	ldr	r3, [pc, #128]	; (4024d4 <xTaskResumeAll+0xf8>)
  402452:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402456:	4b20      	ldr	r3, [pc, #128]	; (4024d8 <xTaskResumeAll+0xfc>)
  402458:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40245a:	4b20      	ldr	r3, [pc, #128]	; (4024dc <xTaskResumeAll+0x100>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402462:	429a      	cmp	r2, r3
  402464:	d3e0      	bcc.n	402428 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  402466:	2201      	movs	r2, #1
  402468:	4b1d      	ldr	r3, [pc, #116]	; (4024e0 <xTaskResumeAll+0x104>)
  40246a:	601a      	str	r2, [r3, #0]
  40246c:	e7dc      	b.n	402428 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  40246e:	b10c      	cbz	r4, 402474 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  402470:	4b1c      	ldr	r3, [pc, #112]	; (4024e4 <xTaskResumeAll+0x108>)
  402472:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  402474:	4b1c      	ldr	r3, [pc, #112]	; (4024e8 <xTaskResumeAll+0x10c>)
  402476:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  402478:	b16c      	cbz	r4, 402496 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  40247a:	4f1c      	ldr	r7, [pc, #112]	; (4024ec <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  40247c:	4e18      	ldr	r6, [pc, #96]	; (4024e0 <xTaskResumeAll+0x104>)
  40247e:	2501      	movs	r5, #1
  402480:	e001      	b.n	402486 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402482:	3c01      	subs	r4, #1
  402484:	d004      	beq.n	402490 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  402486:	47b8      	blx	r7
  402488:	2800      	cmp	r0, #0
  40248a:	d0fa      	beq.n	402482 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  40248c:	6035      	str	r5, [r6, #0]
  40248e:	e7f8      	b.n	402482 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402490:	2200      	movs	r2, #0
  402492:	4b15      	ldr	r3, [pc, #84]	; (4024e8 <xTaskResumeAll+0x10c>)
  402494:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  402496:	4b12      	ldr	r3, [pc, #72]	; (4024e0 <xTaskResumeAll+0x104>)
  402498:	681b      	ldr	r3, [r3, #0]
  40249a:	b15b      	cbz	r3, 4024b4 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  40249c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024a0:	4b13      	ldr	r3, [pc, #76]	; (4024f0 <xTaskResumeAll+0x114>)
  4024a2:	601a      	str	r2, [r3, #0]
  4024a4:	f3bf 8f4f 	dsb	sy
  4024a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4024ac:	2401      	movs	r4, #1
  4024ae:	e7b2      	b.n	402416 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  4024b0:	2400      	movs	r4, #0
  4024b2:	e7b0      	b.n	402416 <xTaskResumeAll+0x3a>
  4024b4:	2400      	movs	r4, #0
  4024b6:	e7ae      	b.n	402416 <xTaskResumeAll+0x3a>
  4024b8:	20400adc 	.word	0x20400adc
  4024bc:	004010c5 	.word	0x004010c5
  4024c0:	20400ad0 	.word	0x20400ad0
  4024c4:	00401111 	.word	0x00401111
  4024c8:	20400b1c 	.word	0x20400b1c
  4024cc:	00400fc9 	.word	0x00400fc9
  4024d0:	20400ae4 	.word	0x20400ae4
  4024d4:	20400a6c 	.word	0x20400a6c
  4024d8:	00400f7d 	.word	0x00400f7d
  4024dc:	20400a60 	.word	0x20400a60
  4024e0:	20400b60 	.word	0x20400b60
  4024e4:	00401e99 	.word	0x00401e99
  4024e8:	20400ad8 	.word	0x20400ad8
  4024ec:	00402295 	.word	0x00402295
  4024f0:	e000ed04 	.word	0xe000ed04

004024f4 <vTaskDelay>:
	{
  4024f4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4024f6:	b1b8      	cbz	r0, 402528 <vTaskDelay+0x34>
  4024f8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4024fa:	4b10      	ldr	r3, [pc, #64]	; (40253c <vTaskDelay+0x48>)
  4024fc:	681b      	ldr	r3, [r3, #0]
  4024fe:	b153      	cbz	r3, 402516 <vTaskDelay+0x22>
  402500:	f04f 0380 	mov.w	r3, #128	; 0x80
  402504:	b672      	cpsid	i
  402506:	f383 8811 	msr	BASEPRI, r3
  40250a:	f3bf 8f6f 	isb	sy
  40250e:	f3bf 8f4f 	dsb	sy
  402512:	b662      	cpsie	i
  402514:	e7fe      	b.n	402514 <vTaskDelay+0x20>
			vTaskSuspendAll();
  402516:	4b0a      	ldr	r3, [pc, #40]	; (402540 <vTaskDelay+0x4c>)
  402518:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40251a:	2100      	movs	r1, #0
  40251c:	4620      	mov	r0, r4
  40251e:	4b09      	ldr	r3, [pc, #36]	; (402544 <vTaskDelay+0x50>)
  402520:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402522:	4b09      	ldr	r3, [pc, #36]	; (402548 <vTaskDelay+0x54>)
  402524:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402526:	b938      	cbnz	r0, 402538 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  402528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40252c:	4b07      	ldr	r3, [pc, #28]	; (40254c <vTaskDelay+0x58>)
  40252e:	601a      	str	r2, [r3, #0]
  402530:	f3bf 8f4f 	dsb	sy
  402534:	f3bf 8f6f 	isb	sy
  402538:	bd10      	pop	{r4, pc}
  40253a:	bf00      	nop
  40253c:	20400adc 	.word	0x20400adc
  402540:	00402279 	.word	0x00402279
  402544:	00401ec5 	.word	0x00401ec5
  402548:	004023dd 	.word	0x004023dd
  40254c:	e000ed04 	.word	0xe000ed04

00402550 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402550:	4b2d      	ldr	r3, [pc, #180]	; (402608 <vTaskSwitchContext+0xb8>)
  402552:	681b      	ldr	r3, [r3, #0]
  402554:	2b00      	cmp	r3, #0
  402556:	d12c      	bne.n	4025b2 <vTaskSwitchContext+0x62>
{
  402558:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40255a:	2200      	movs	r2, #0
  40255c:	4b2b      	ldr	r3, [pc, #172]	; (40260c <vTaskSwitchContext+0xbc>)
  40255e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402560:	4b2b      	ldr	r3, [pc, #172]	; (402610 <vTaskSwitchContext+0xc0>)
  402562:	681b      	ldr	r3, [r3, #0]
  402564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402566:	681a      	ldr	r2, [r3, #0]
  402568:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40256c:	d103      	bne.n	402576 <vTaskSwitchContext+0x26>
  40256e:	685a      	ldr	r2, [r3, #4]
  402570:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402574:	d021      	beq.n	4025ba <vTaskSwitchContext+0x6a>
  402576:	4b26      	ldr	r3, [pc, #152]	; (402610 <vTaskSwitchContext+0xc0>)
  402578:	6818      	ldr	r0, [r3, #0]
  40257a:	6819      	ldr	r1, [r3, #0]
  40257c:	3134      	adds	r1, #52	; 0x34
  40257e:	4b25      	ldr	r3, [pc, #148]	; (402614 <vTaskSwitchContext+0xc4>)
  402580:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402582:	4b25      	ldr	r3, [pc, #148]	; (402618 <vTaskSwitchContext+0xc8>)
  402584:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  402586:	fab3 f383 	clz	r3, r3
  40258a:	b2db      	uxtb	r3, r3
  40258c:	f1c3 031f 	rsb	r3, r3, #31
  402590:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402594:	0092      	lsls	r2, r2, #2
  402596:	4921      	ldr	r1, [pc, #132]	; (40261c <vTaskSwitchContext+0xcc>)
  402598:	588a      	ldr	r2, [r1, r2]
  40259a:	b9ba      	cbnz	r2, 4025cc <vTaskSwitchContext+0x7c>
	__asm volatile
  40259c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025a0:	b672      	cpsid	i
  4025a2:	f383 8811 	msr	BASEPRI, r3
  4025a6:	f3bf 8f6f 	isb	sy
  4025aa:	f3bf 8f4f 	dsb	sy
  4025ae:	b662      	cpsie	i
  4025b0:	e7fe      	b.n	4025b0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4025b2:	2201      	movs	r2, #1
  4025b4:	4b15      	ldr	r3, [pc, #84]	; (40260c <vTaskSwitchContext+0xbc>)
  4025b6:	601a      	str	r2, [r3, #0]
  4025b8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4025ba:	689a      	ldr	r2, [r3, #8]
  4025bc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4025c0:	d1d9      	bne.n	402576 <vTaskSwitchContext+0x26>
  4025c2:	68db      	ldr	r3, [r3, #12]
  4025c4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4025c8:	d1d5      	bne.n	402576 <vTaskSwitchContext+0x26>
  4025ca:	e7da      	b.n	402582 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4025cc:	4a13      	ldr	r2, [pc, #76]	; (40261c <vTaskSwitchContext+0xcc>)
  4025ce:	0099      	lsls	r1, r3, #2
  4025d0:	18c8      	adds	r0, r1, r3
  4025d2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4025d6:	6844      	ldr	r4, [r0, #4]
  4025d8:	6864      	ldr	r4, [r4, #4]
  4025da:	6044      	str	r4, [r0, #4]
  4025dc:	4419      	add	r1, r3
  4025de:	4602      	mov	r2, r0
  4025e0:	3208      	adds	r2, #8
  4025e2:	4294      	cmp	r4, r2
  4025e4:	d009      	beq.n	4025fa <vTaskSwitchContext+0xaa>
  4025e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025ea:	4a0c      	ldr	r2, [pc, #48]	; (40261c <vTaskSwitchContext+0xcc>)
  4025ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4025f0:	685b      	ldr	r3, [r3, #4]
  4025f2:	68da      	ldr	r2, [r3, #12]
  4025f4:	4b06      	ldr	r3, [pc, #24]	; (402610 <vTaskSwitchContext+0xc0>)
  4025f6:	601a      	str	r2, [r3, #0]
  4025f8:	bd10      	pop	{r4, pc}
  4025fa:	6860      	ldr	r0, [r4, #4]
  4025fc:	4a07      	ldr	r2, [pc, #28]	; (40261c <vTaskSwitchContext+0xcc>)
  4025fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402602:	6050      	str	r0, [r2, #4]
  402604:	e7ef      	b.n	4025e6 <vTaskSwitchContext+0x96>
  402606:	bf00      	nop
  402608:	20400adc 	.word	0x20400adc
  40260c:	20400b60 	.word	0x20400b60
  402610:	20400a60 	.word	0x20400a60
  402614:	004031cd 	.word	0x004031cd
  402618:	20400ae4 	.word	0x20400ae4
  40261c:	20400a6c 	.word	0x20400a6c

00402620 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402620:	b950      	cbnz	r0, 402638 <vTaskPlaceOnEventList+0x18>
  402622:	f04f 0380 	mov.w	r3, #128	; 0x80
  402626:	b672      	cpsid	i
  402628:	f383 8811 	msr	BASEPRI, r3
  40262c:	f3bf 8f6f 	isb	sy
  402630:	f3bf 8f4f 	dsb	sy
  402634:	b662      	cpsie	i
  402636:	e7fe      	b.n	402636 <vTaskPlaceOnEventList+0x16>
{
  402638:	b510      	push	{r4, lr}
  40263a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40263c:	4b04      	ldr	r3, [pc, #16]	; (402650 <vTaskPlaceOnEventList+0x30>)
  40263e:	6819      	ldr	r1, [r3, #0]
  402640:	3118      	adds	r1, #24
  402642:	4b04      	ldr	r3, [pc, #16]	; (402654 <vTaskPlaceOnEventList+0x34>)
  402644:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402646:	2101      	movs	r1, #1
  402648:	4620      	mov	r0, r4
  40264a:	4b03      	ldr	r3, [pc, #12]	; (402658 <vTaskPlaceOnEventList+0x38>)
  40264c:	4798      	blx	r3
  40264e:	bd10      	pop	{r4, pc}
  402650:	20400a60 	.word	0x20400a60
  402654:	00400f95 	.word	0x00400f95
  402658:	00401ec5 	.word	0x00401ec5

0040265c <vTaskPlaceOnEventListRestricted>:
	{
  40265c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  40265e:	b178      	cbz	r0, 402680 <vTaskPlaceOnEventListRestricted+0x24>
  402660:	4614      	mov	r4, r2
  402662:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402664:	4b0c      	ldr	r3, [pc, #48]	; (402698 <vTaskPlaceOnEventListRestricted+0x3c>)
  402666:	6819      	ldr	r1, [r3, #0]
  402668:	3118      	adds	r1, #24
  40266a:	4b0c      	ldr	r3, [pc, #48]	; (40269c <vTaskPlaceOnEventListRestricted+0x40>)
  40266c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  40266e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402670:	4621      	mov	r1, r4
  402672:	bf0c      	ite	eq
  402674:	4628      	moveq	r0, r5
  402676:	f04f 30ff 	movne.w	r0, #4294967295
  40267a:	4b09      	ldr	r3, [pc, #36]	; (4026a0 <vTaskPlaceOnEventListRestricted+0x44>)
  40267c:	4798      	blx	r3
  40267e:	bd38      	pop	{r3, r4, r5, pc}
  402680:	f04f 0380 	mov.w	r3, #128	; 0x80
  402684:	b672      	cpsid	i
  402686:	f383 8811 	msr	BASEPRI, r3
  40268a:	f3bf 8f6f 	isb	sy
  40268e:	f3bf 8f4f 	dsb	sy
  402692:	b662      	cpsie	i
  402694:	e7fe      	b.n	402694 <vTaskPlaceOnEventListRestricted+0x38>
  402696:	bf00      	nop
  402698:	20400a60 	.word	0x20400a60
  40269c:	00400f7d 	.word	0x00400f7d
  4026a0:	00401ec5 	.word	0x00401ec5

004026a4 <xTaskRemoveFromEventList>:
{
  4026a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4026a6:	68c3      	ldr	r3, [r0, #12]
  4026a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4026aa:	b324      	cbz	r4, 4026f6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4026ac:	f104 0518 	add.w	r5, r4, #24
  4026b0:	4628      	mov	r0, r5
  4026b2:	4b1a      	ldr	r3, [pc, #104]	; (40271c <xTaskRemoveFromEventList+0x78>)
  4026b4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026b6:	4b1a      	ldr	r3, [pc, #104]	; (402720 <xTaskRemoveFromEventList+0x7c>)
  4026b8:	681b      	ldr	r3, [r3, #0]
  4026ba:	bb3b      	cbnz	r3, 40270c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4026bc:	1d25      	adds	r5, r4, #4
  4026be:	4628      	mov	r0, r5
  4026c0:	4b16      	ldr	r3, [pc, #88]	; (40271c <xTaskRemoveFromEventList+0x78>)
  4026c2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4026c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4026c6:	4a17      	ldr	r2, [pc, #92]	; (402724 <xTaskRemoveFromEventList+0x80>)
  4026c8:	6811      	ldr	r1, [r2, #0]
  4026ca:	2301      	movs	r3, #1
  4026cc:	4083      	lsls	r3, r0
  4026ce:	430b      	orrs	r3, r1
  4026d0:	6013      	str	r3, [r2, #0]
  4026d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4026d6:	4629      	mov	r1, r5
  4026d8:	4b13      	ldr	r3, [pc, #76]	; (402728 <xTaskRemoveFromEventList+0x84>)
  4026da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4026de:	4b13      	ldr	r3, [pc, #76]	; (40272c <xTaskRemoveFromEventList+0x88>)
  4026e0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4026e2:	4b13      	ldr	r3, [pc, #76]	; (402730 <xTaskRemoveFromEventList+0x8c>)
  4026e4:	681b      	ldr	r3, [r3, #0]
  4026e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026ea:	429a      	cmp	r2, r3
  4026ec:	d913      	bls.n	402716 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4026ee:	2001      	movs	r0, #1
  4026f0:	4b10      	ldr	r3, [pc, #64]	; (402734 <xTaskRemoveFromEventList+0x90>)
  4026f2:	6018      	str	r0, [r3, #0]
  4026f4:	bd38      	pop	{r3, r4, r5, pc}
  4026f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026fa:	b672      	cpsid	i
  4026fc:	f383 8811 	msr	BASEPRI, r3
  402700:	f3bf 8f6f 	isb	sy
  402704:	f3bf 8f4f 	dsb	sy
  402708:	b662      	cpsie	i
  40270a:	e7fe      	b.n	40270a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40270c:	4629      	mov	r1, r5
  40270e:	480a      	ldr	r0, [pc, #40]	; (402738 <xTaskRemoveFromEventList+0x94>)
  402710:	4b06      	ldr	r3, [pc, #24]	; (40272c <xTaskRemoveFromEventList+0x88>)
  402712:	4798      	blx	r3
  402714:	e7e5      	b.n	4026e2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402716:	2000      	movs	r0, #0
}
  402718:	bd38      	pop	{r3, r4, r5, pc}
  40271a:	bf00      	nop
  40271c:	00400fc9 	.word	0x00400fc9
  402720:	20400adc 	.word	0x20400adc
  402724:	20400ae4 	.word	0x20400ae4
  402728:	20400a6c 	.word	0x20400a6c
  40272c:	00400f7d 	.word	0x00400f7d
  402730:	20400a60 	.word	0x20400a60
  402734:	20400b60 	.word	0x20400b60
  402738:	20400b1c 	.word	0x20400b1c

0040273c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40273c:	4b03      	ldr	r3, [pc, #12]	; (40274c <vTaskInternalSetTimeOutState+0x10>)
  40273e:	681b      	ldr	r3, [r3, #0]
  402740:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402742:	4b03      	ldr	r3, [pc, #12]	; (402750 <vTaskInternalSetTimeOutState+0x14>)
  402744:	681b      	ldr	r3, [r3, #0]
  402746:	6043      	str	r3, [r0, #4]
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	20400b18 	.word	0x20400b18
  402750:	20400b5c 	.word	0x20400b5c

00402754 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402754:	b1a8      	cbz	r0, 402782 <xTaskCheckForTimeOut+0x2e>
{
  402756:	b570      	push	{r4, r5, r6, lr}
  402758:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  40275a:	b1e9      	cbz	r1, 402798 <xTaskCheckForTimeOut+0x44>
  40275c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  40275e:	4b1d      	ldr	r3, [pc, #116]	; (4027d4 <xTaskCheckForTimeOut+0x80>)
  402760:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402762:	4b1d      	ldr	r3, [pc, #116]	; (4027d8 <xTaskCheckForTimeOut+0x84>)
  402764:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402766:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402768:	6823      	ldr	r3, [r4, #0]
  40276a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40276e:	d02f      	beq.n	4027d0 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402770:	481a      	ldr	r0, [pc, #104]	; (4027dc <xTaskCheckForTimeOut+0x88>)
  402772:	6800      	ldr	r0, [r0, #0]
  402774:	682e      	ldr	r6, [r5, #0]
  402776:	4286      	cmp	r6, r0
  402778:	d019      	beq.n	4027ae <xTaskCheckForTimeOut+0x5a>
  40277a:	428a      	cmp	r2, r1
  40277c:	d317      	bcc.n	4027ae <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  40277e:	2401      	movs	r4, #1
  402780:	e01b      	b.n	4027ba <xTaskCheckForTimeOut+0x66>
  402782:	f04f 0380 	mov.w	r3, #128	; 0x80
  402786:	b672      	cpsid	i
  402788:	f383 8811 	msr	BASEPRI, r3
  40278c:	f3bf 8f6f 	isb	sy
  402790:	f3bf 8f4f 	dsb	sy
  402794:	b662      	cpsie	i
  402796:	e7fe      	b.n	402796 <xTaskCheckForTimeOut+0x42>
  402798:	f04f 0380 	mov.w	r3, #128	; 0x80
  40279c:	b672      	cpsid	i
  40279e:	f383 8811 	msr	BASEPRI, r3
  4027a2:	f3bf 8f6f 	isb	sy
  4027a6:	f3bf 8f4f 	dsb	sy
  4027aa:	b662      	cpsie	i
  4027ac:	e7fe      	b.n	4027ac <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4027ae:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4027b0:	429a      	cmp	r2, r3
  4027b2:	d306      	bcc.n	4027c2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  4027b4:	2300      	movs	r3, #0
  4027b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  4027b8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4027ba:	4b09      	ldr	r3, [pc, #36]	; (4027e0 <xTaskCheckForTimeOut+0x8c>)
  4027bc:	4798      	blx	r3
}
  4027be:	4620      	mov	r0, r4
  4027c0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  4027c2:	1a9b      	subs	r3, r3, r2
  4027c4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4027c6:	4628      	mov	r0, r5
  4027c8:	4b06      	ldr	r3, [pc, #24]	; (4027e4 <xTaskCheckForTimeOut+0x90>)
  4027ca:	4798      	blx	r3
			xReturn = pdFALSE;
  4027cc:	2400      	movs	r4, #0
  4027ce:	e7f4      	b.n	4027ba <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  4027d0:	2400      	movs	r4, #0
  4027d2:	e7f2      	b.n	4027ba <xTaskCheckForTimeOut+0x66>
  4027d4:	004010c5 	.word	0x004010c5
  4027d8:	20400b5c 	.word	0x20400b5c
  4027dc:	20400b18 	.word	0x20400b18
  4027e0:	00401111 	.word	0x00401111
  4027e4:	0040273d 	.word	0x0040273d

004027e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4027e8:	2201      	movs	r2, #1
  4027ea:	4b01      	ldr	r3, [pc, #4]	; (4027f0 <vTaskMissedYield+0x8>)
  4027ec:	601a      	str	r2, [r3, #0]
  4027ee:	4770      	bx	lr
  4027f0:	20400b60 	.word	0x20400b60

004027f4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  4027f4:	4b05      	ldr	r3, [pc, #20]	; (40280c <xTaskGetSchedulerState+0x18>)
  4027f6:	681b      	ldr	r3, [r3, #0]
  4027f8:	b133      	cbz	r3, 402808 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027fa:	4b05      	ldr	r3, [pc, #20]	; (402810 <xTaskGetSchedulerState+0x1c>)
  4027fc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  4027fe:	2b00      	cmp	r3, #0
  402800:	bf0c      	ite	eq
  402802:	2002      	moveq	r0, #2
  402804:	2000      	movne	r0, #0
  402806:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402808:	2001      	movs	r0, #1
	}
  40280a:	4770      	bx	lr
  40280c:	20400b30 	.word	0x20400b30
  402810:	20400adc 	.word	0x20400adc

00402814 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402814:	2800      	cmp	r0, #0
  402816:	d050      	beq.n	4028ba <xTaskPriorityInherit+0xa6>
	{
  402818:	b538      	push	{r3, r4, r5, lr}
  40281a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  40281c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40281e:	4928      	ldr	r1, [pc, #160]	; (4028c0 <xTaskPriorityInherit+0xac>)
  402820:	6809      	ldr	r1, [r1, #0]
  402822:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402824:	428a      	cmp	r2, r1
  402826:	d23f      	bcs.n	4028a8 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402828:	6981      	ldr	r1, [r0, #24]
  40282a:	2900      	cmp	r1, #0
  40282c:	db05      	blt.n	40283a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40282e:	4924      	ldr	r1, [pc, #144]	; (4028c0 <xTaskPriorityInherit+0xac>)
  402830:	6809      	ldr	r1, [r1, #0]
  402832:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402834:	f1c1 0105 	rsb	r1, r1, #5
  402838:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  40283a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40283e:	4921      	ldr	r1, [pc, #132]	; (4028c4 <xTaskPriorityInherit+0xb0>)
  402840:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402844:	6961      	ldr	r1, [r4, #20]
  402846:	4291      	cmp	r1, r2
  402848:	d005      	beq.n	402856 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40284a:	4a1d      	ldr	r2, [pc, #116]	; (4028c0 <xTaskPriorityInherit+0xac>)
  40284c:	6812      	ldr	r2, [r2, #0]
  40284e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402850:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402852:	2001      	movs	r0, #1
  402854:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402856:	1d25      	adds	r5, r4, #4
  402858:	4628      	mov	r0, r5
  40285a:	4b1b      	ldr	r3, [pc, #108]	; (4028c8 <xTaskPriorityInherit+0xb4>)
  40285c:	4798      	blx	r3
  40285e:	b970      	cbnz	r0, 40287e <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402862:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402866:	009b      	lsls	r3, r3, #2
  402868:	4916      	ldr	r1, [pc, #88]	; (4028c4 <xTaskPriorityInherit+0xb0>)
  40286a:	58cb      	ldr	r3, [r1, r3]
  40286c:	b93b      	cbnz	r3, 40287e <xTaskPriorityInherit+0x6a>
  40286e:	4817      	ldr	r0, [pc, #92]	; (4028cc <xTaskPriorityInherit+0xb8>)
  402870:	6803      	ldr	r3, [r0, #0]
  402872:	2101      	movs	r1, #1
  402874:	fa01 f202 	lsl.w	r2, r1, r2
  402878:	ea23 0202 	bic.w	r2, r3, r2
  40287c:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40287e:	4b10      	ldr	r3, [pc, #64]	; (4028c0 <xTaskPriorityInherit+0xac>)
  402880:	681b      	ldr	r3, [r3, #0]
  402882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402884:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  402886:	4a11      	ldr	r2, [pc, #68]	; (4028cc <xTaskPriorityInherit+0xb8>)
  402888:	6811      	ldr	r1, [r2, #0]
  40288a:	2401      	movs	r4, #1
  40288c:	fa04 f300 	lsl.w	r3, r4, r0
  402890:	430b      	orrs	r3, r1
  402892:	6013      	str	r3, [r2, #0]
  402894:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402898:	4629      	mov	r1, r5
  40289a:	4b0a      	ldr	r3, [pc, #40]	; (4028c4 <xTaskPriorityInherit+0xb0>)
  40289c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028a0:	4b0b      	ldr	r3, [pc, #44]	; (4028d0 <xTaskPriorityInherit+0xbc>)
  4028a2:	4798      	blx	r3
				xReturn = pdTRUE;
  4028a4:	4620      	mov	r0, r4
  4028a6:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  4028a8:	4a05      	ldr	r2, [pc, #20]	; (4028c0 <xTaskPriorityInherit+0xac>)
  4028aa:	6812      	ldr	r2, [r2, #0]
  4028ac:	6c80      	ldr	r0, [r0, #72]	; 0x48
  4028ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4028b0:	4298      	cmp	r0, r3
  4028b2:	bf2c      	ite	cs
  4028b4:	2000      	movcs	r0, #0
  4028b6:	2001      	movcc	r0, #1
  4028b8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4028ba:	2000      	movs	r0, #0
		return xReturn;
  4028bc:	4770      	bx	lr
  4028be:	bf00      	nop
  4028c0:	20400a60 	.word	0x20400a60
  4028c4:	20400a6c 	.word	0x20400a6c
  4028c8:	00400fc9 	.word	0x00400fc9
  4028cc:	20400ae4 	.word	0x20400ae4
  4028d0:	00400f7d 	.word	0x00400f7d

004028d4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  4028d4:	2800      	cmp	r0, #0
  4028d6:	d04d      	beq.n	402974 <xTaskPriorityDisinherit+0xa0>
	{
  4028d8:	b538      	push	{r3, r4, r5, lr}
  4028da:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  4028dc:	4a27      	ldr	r2, [pc, #156]	; (40297c <xTaskPriorityDisinherit+0xa8>)
  4028de:	6812      	ldr	r2, [r2, #0]
  4028e0:	4290      	cmp	r0, r2
  4028e2:	d00a      	beq.n	4028fa <xTaskPriorityDisinherit+0x26>
  4028e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e8:	b672      	cpsid	i
  4028ea:	f383 8811 	msr	BASEPRI, r3
  4028ee:	f3bf 8f6f 	isb	sy
  4028f2:	f3bf 8f4f 	dsb	sy
  4028f6:	b662      	cpsie	i
  4028f8:	e7fe      	b.n	4028f8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  4028fa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4028fc:	b952      	cbnz	r2, 402914 <xTaskPriorityDisinherit+0x40>
  4028fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402902:	b672      	cpsid	i
  402904:	f383 8811 	msr	BASEPRI, r3
  402908:	f3bf 8f6f 	isb	sy
  40290c:	f3bf 8f4f 	dsb	sy
  402910:	b662      	cpsie	i
  402912:	e7fe      	b.n	402912 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402914:	3a01      	subs	r2, #1
  402916:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402918:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40291a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40291c:	4288      	cmp	r0, r1
  40291e:	d02b      	beq.n	402978 <xTaskPriorityDisinherit+0xa4>
  402920:	bb52      	cbnz	r2, 402978 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402922:	1d25      	adds	r5, r4, #4
  402924:	4628      	mov	r0, r5
  402926:	4b16      	ldr	r3, [pc, #88]	; (402980 <xTaskPriorityDisinherit+0xac>)
  402928:	4798      	blx	r3
  40292a:	b968      	cbnz	r0, 402948 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40292c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40292e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402932:	009b      	lsls	r3, r3, #2
  402934:	4a13      	ldr	r2, [pc, #76]	; (402984 <xTaskPriorityDisinherit+0xb0>)
  402936:	58d3      	ldr	r3, [r2, r3]
  402938:	b933      	cbnz	r3, 402948 <xTaskPriorityDisinherit+0x74>
  40293a:	4813      	ldr	r0, [pc, #76]	; (402988 <xTaskPriorityDisinherit+0xb4>)
  40293c:	6803      	ldr	r3, [r0, #0]
  40293e:	2201      	movs	r2, #1
  402940:	408a      	lsls	r2, r1
  402942:	ea23 0302 	bic.w	r3, r3, r2
  402946:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402948:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40294a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40294c:	f1c0 0305 	rsb	r3, r0, #5
  402950:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402952:	4a0d      	ldr	r2, [pc, #52]	; (402988 <xTaskPriorityDisinherit+0xb4>)
  402954:	6811      	ldr	r1, [r2, #0]
  402956:	2401      	movs	r4, #1
  402958:	fa04 f300 	lsl.w	r3, r4, r0
  40295c:	430b      	orrs	r3, r1
  40295e:	6013      	str	r3, [r2, #0]
  402960:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402964:	4629      	mov	r1, r5
  402966:	4b07      	ldr	r3, [pc, #28]	; (402984 <xTaskPriorityDisinherit+0xb0>)
  402968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40296c:	4b07      	ldr	r3, [pc, #28]	; (40298c <xTaskPriorityDisinherit+0xb8>)
  40296e:	4798      	blx	r3
					xReturn = pdTRUE;
  402970:	4620      	mov	r0, r4
  402972:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402974:	2000      	movs	r0, #0
  402976:	4770      	bx	lr
  402978:	2000      	movs	r0, #0
	}
  40297a:	bd38      	pop	{r3, r4, r5, pc}
  40297c:	20400a60 	.word	0x20400a60
  402980:	00400fc9 	.word	0x00400fc9
  402984:	20400a6c 	.word	0x20400a6c
  402988:	20400ae4 	.word	0x20400ae4
  40298c:	00400f7d 	.word	0x00400f7d

00402990 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402990:	2800      	cmp	r0, #0
  402992:	d058      	beq.n	402a46 <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402994:	b538      	push	{r3, r4, r5, lr}
  402996:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402998:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  40299a:	b950      	cbnz	r0, 4029b2 <vTaskPriorityDisinheritAfterTimeout+0x22>
  40299c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029a0:	b672      	cpsid	i
  4029a2:	f383 8811 	msr	BASEPRI, r3
  4029a6:	f3bf 8f6f 	isb	sy
  4029aa:	f3bf 8f4f 	dsb	sy
  4029ae:	b662      	cpsie	i
  4029b0:	e7fe      	b.n	4029b0 <vTaskPriorityDisinheritAfterTimeout+0x20>
  4029b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4029b4:	428a      	cmp	r2, r1
  4029b6:	bf38      	it	cc
  4029b8:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  4029ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  4029bc:	2801      	cmp	r0, #1
  4029be:	d141      	bne.n	402a44 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  4029c0:	4291      	cmp	r1, r2
  4029c2:	d03f      	beq.n	402a44 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  4029c4:	4820      	ldr	r0, [pc, #128]	; (402a48 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  4029c6:	6800      	ldr	r0, [r0, #0]
  4029c8:	4284      	cmp	r4, r0
  4029ca:	d10a      	bne.n	4029e2 <vTaskPriorityDisinheritAfterTimeout+0x52>
  4029cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029d0:	b672      	cpsid	i
  4029d2:	f383 8811 	msr	BASEPRI, r3
  4029d6:	f3bf 8f6f 	isb	sy
  4029da:	f3bf 8f4f 	dsb	sy
  4029de:	b662      	cpsie	i
  4029e0:	e7fe      	b.n	4029e0 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  4029e2:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4029e4:	69a0      	ldr	r0, [r4, #24]
  4029e6:	2800      	cmp	r0, #0
  4029e8:	db02      	blt.n	4029f0 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029ea:	f1c2 0205 	rsb	r2, r2, #5
  4029ee:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  4029f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4029f4:	4a15      	ldr	r2, [pc, #84]	; (402a4c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  4029f6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4029fa:	6962      	ldr	r2, [r4, #20]
  4029fc:	428a      	cmp	r2, r1
  4029fe:	d121      	bne.n	402a44 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402a00:	1d25      	adds	r5, r4, #4
  402a02:	4628      	mov	r0, r5
  402a04:	4b12      	ldr	r3, [pc, #72]	; (402a50 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  402a06:	4798      	blx	r3
  402a08:	b968      	cbnz	r0, 402a26 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402a0c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402a10:	009b      	lsls	r3, r3, #2
  402a12:	4a0e      	ldr	r2, [pc, #56]	; (402a4c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402a14:	58d3      	ldr	r3, [r2, r3]
  402a16:	b933      	cbnz	r3, 402a26 <vTaskPriorityDisinheritAfterTimeout+0x96>
  402a18:	480e      	ldr	r0, [pc, #56]	; (402a54 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402a1a:	6803      	ldr	r3, [r0, #0]
  402a1c:	2201      	movs	r2, #1
  402a1e:	408a      	lsls	r2, r1
  402a20:	ea23 0302 	bic.w	r3, r3, r2
  402a24:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  402a26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a28:	4a0a      	ldr	r2, [pc, #40]	; (402a54 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402a2a:	6811      	ldr	r1, [r2, #0]
  402a2c:	2301      	movs	r3, #1
  402a2e:	4083      	lsls	r3, r0
  402a30:	430b      	orrs	r3, r1
  402a32:	6013      	str	r3, [r2, #0]
  402a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a38:	4629      	mov	r1, r5
  402a3a:	4b04      	ldr	r3, [pc, #16]	; (402a4c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402a3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a40:	4b05      	ldr	r3, [pc, #20]	; (402a58 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402a42:	4798      	blx	r3
  402a44:	bd38      	pop	{r3, r4, r5, pc}
  402a46:	4770      	bx	lr
  402a48:	20400a60 	.word	0x20400a60
  402a4c:	20400a6c 	.word	0x20400a6c
  402a50:	00400fc9 	.word	0x00400fc9
  402a54:	20400ae4 	.word	0x20400ae4
  402a58:	00400f7d 	.word	0x00400f7d

00402a5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  402a5c:	4b05      	ldr	r3, [pc, #20]	; (402a74 <pvTaskIncrementMutexHeldCount+0x18>)
  402a5e:	681b      	ldr	r3, [r3, #0]
  402a60:	b123      	cbz	r3, 402a6c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402a62:	4b04      	ldr	r3, [pc, #16]	; (402a74 <pvTaskIncrementMutexHeldCount+0x18>)
  402a64:	681a      	ldr	r2, [r3, #0]
  402a66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402a68:	3301      	adds	r3, #1
  402a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  402a6c:	4b01      	ldr	r3, [pc, #4]	; (402a74 <pvTaskIncrementMutexHeldCount+0x18>)
  402a6e:	6818      	ldr	r0, [r3, #0]
	}
  402a70:	4770      	bx	lr
  402a72:	bf00      	nop
  402a74:	20400a60 	.word	0x20400a60

00402a78 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402a78:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402a7a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402a7c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402a7e:	4291      	cmp	r1, r2
  402a80:	d80c      	bhi.n	402a9c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a82:	1ad2      	subs	r2, r2, r3
  402a84:	6983      	ldr	r3, [r0, #24]
  402a86:	429a      	cmp	r2, r3
  402a88:	d301      	bcc.n	402a8e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402a8a:	2001      	movs	r0, #1
  402a8c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402a8e:	1d01      	adds	r1, r0, #4
  402a90:	4b09      	ldr	r3, [pc, #36]	; (402ab8 <prvInsertTimerInActiveList+0x40>)
  402a92:	6818      	ldr	r0, [r3, #0]
  402a94:	4b09      	ldr	r3, [pc, #36]	; (402abc <prvInsertTimerInActiveList+0x44>)
  402a96:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402a98:	2000      	movs	r0, #0
  402a9a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402a9c:	429a      	cmp	r2, r3
  402a9e:	d203      	bcs.n	402aa8 <prvInsertTimerInActiveList+0x30>
  402aa0:	4299      	cmp	r1, r3
  402aa2:	d301      	bcc.n	402aa8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402aa4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402aa6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402aa8:	1d01      	adds	r1, r0, #4
  402aaa:	4b05      	ldr	r3, [pc, #20]	; (402ac0 <prvInsertTimerInActiveList+0x48>)
  402aac:	6818      	ldr	r0, [r3, #0]
  402aae:	4b03      	ldr	r3, [pc, #12]	; (402abc <prvInsertTimerInActiveList+0x44>)
  402ab0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402ab2:	2000      	movs	r0, #0
  402ab4:	bd08      	pop	{r3, pc}
  402ab6:	bf00      	nop
  402ab8:	20400b68 	.word	0x20400b68
  402abc:	00400f95 	.word	0x00400f95
  402ac0:	20400b64 	.word	0x20400b64

00402ac4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402ac4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402ac6:	4b10      	ldr	r3, [pc, #64]	; (402b08 <prvCheckForValidListAndQueue+0x44>)
  402ac8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402aca:	4b10      	ldr	r3, [pc, #64]	; (402b0c <prvCheckForValidListAndQueue+0x48>)
  402acc:	681b      	ldr	r3, [r3, #0]
  402ace:	b113      	cbz	r3, 402ad6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402ad0:	4b0f      	ldr	r3, [pc, #60]	; (402b10 <prvCheckForValidListAndQueue+0x4c>)
  402ad2:	4798      	blx	r3
  402ad4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402ad6:	4d0f      	ldr	r5, [pc, #60]	; (402b14 <prvCheckForValidListAndQueue+0x50>)
  402ad8:	4628      	mov	r0, r5
  402ada:	4e0f      	ldr	r6, [pc, #60]	; (402b18 <prvCheckForValidListAndQueue+0x54>)
  402adc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402ade:	4c0f      	ldr	r4, [pc, #60]	; (402b1c <prvCheckForValidListAndQueue+0x58>)
  402ae0:	4620      	mov	r0, r4
  402ae2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402ae4:	4b0e      	ldr	r3, [pc, #56]	; (402b20 <prvCheckForValidListAndQueue+0x5c>)
  402ae6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402ae8:	4b0e      	ldr	r3, [pc, #56]	; (402b24 <prvCheckForValidListAndQueue+0x60>)
  402aea:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402aec:	2200      	movs	r2, #0
  402aee:	2110      	movs	r1, #16
  402af0:	2005      	movs	r0, #5
  402af2:	4b0d      	ldr	r3, [pc, #52]	; (402b28 <prvCheckForValidListAndQueue+0x64>)
  402af4:	4798      	blx	r3
  402af6:	4b05      	ldr	r3, [pc, #20]	; (402b0c <prvCheckForValidListAndQueue+0x48>)
  402af8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402afa:	2800      	cmp	r0, #0
  402afc:	d0e8      	beq.n	402ad0 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402afe:	490b      	ldr	r1, [pc, #44]	; (402b2c <prvCheckForValidListAndQueue+0x68>)
  402b00:	4b0b      	ldr	r3, [pc, #44]	; (402b30 <prvCheckForValidListAndQueue+0x6c>)
  402b02:	4798      	blx	r3
  402b04:	e7e4      	b.n	402ad0 <prvCheckForValidListAndQueue+0xc>
  402b06:	bf00      	nop
  402b08:	004010c5 	.word	0x004010c5
  402b0c:	20400b98 	.word	0x20400b98
  402b10:	00401111 	.word	0x00401111
  402b14:	20400b6c 	.word	0x20400b6c
  402b18:	00400f61 	.word	0x00400f61
  402b1c:	20400b80 	.word	0x20400b80
  402b20:	20400b64 	.word	0x20400b64
  402b24:	20400b68 	.word	0x20400b68
  402b28:	00401631 	.word	0x00401631
  402b2c:	00406b60 	.word	0x00406b60
  402b30:	00401e01 	.word	0x00401e01

00402b34 <xTimerCreateTimerTask>:
{
  402b34:	b510      	push	{r4, lr}
  402b36:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402b38:	4b0e      	ldr	r3, [pc, #56]	; (402b74 <xTimerCreateTimerTask+0x40>)
  402b3a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402b3c:	4b0e      	ldr	r3, [pc, #56]	; (402b78 <xTimerCreateTimerTask+0x44>)
  402b3e:	681b      	ldr	r3, [r3, #0]
  402b40:	b16b      	cbz	r3, 402b5e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402b42:	4b0e      	ldr	r3, [pc, #56]	; (402b7c <xTimerCreateTimerTask+0x48>)
  402b44:	9301      	str	r3, [sp, #4]
  402b46:	2304      	movs	r3, #4
  402b48:	9300      	str	r3, [sp, #0]
  402b4a:	2300      	movs	r3, #0
  402b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
  402b50:	490b      	ldr	r1, [pc, #44]	; (402b80 <xTimerCreateTimerTask+0x4c>)
  402b52:	480c      	ldr	r0, [pc, #48]	; (402b84 <xTimerCreateTimerTask+0x50>)
  402b54:	4c0c      	ldr	r4, [pc, #48]	; (402b88 <xTimerCreateTimerTask+0x54>)
  402b56:	47a0      	blx	r4
	configASSERT( xReturn );
  402b58:	b108      	cbz	r0, 402b5e <xTimerCreateTimerTask+0x2a>
}
  402b5a:	b002      	add	sp, #8
  402b5c:	bd10      	pop	{r4, pc}
  402b5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b62:	b672      	cpsid	i
  402b64:	f383 8811 	msr	BASEPRI, r3
  402b68:	f3bf 8f6f 	isb	sy
  402b6c:	f3bf 8f4f 	dsb	sy
  402b70:	b662      	cpsie	i
  402b72:	e7fe      	b.n	402b72 <xTimerCreateTimerTask+0x3e>
  402b74:	00402ac5 	.word	0x00402ac5
  402b78:	20400b98 	.word	0x20400b98
  402b7c:	20400b9c 	.word	0x20400b9c
  402b80:	00406b68 	.word	0x00406b68
  402b84:	00402cb5 	.word	0x00402cb5
  402b88:	00401ff1 	.word	0x00401ff1

00402b8c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402b8c:	b1d8      	cbz	r0, 402bc6 <xTimerGenericCommand+0x3a>
{
  402b8e:	b530      	push	{r4, r5, lr}
  402b90:	b085      	sub	sp, #20
  402b92:	4615      	mov	r5, r2
  402b94:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402b96:	4a15      	ldr	r2, [pc, #84]	; (402bec <xTimerGenericCommand+0x60>)
  402b98:	6810      	ldr	r0, [r2, #0]
  402b9a:	b320      	cbz	r0, 402be6 <xTimerGenericCommand+0x5a>
  402b9c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402b9e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ba0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ba2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ba4:	2905      	cmp	r1, #5
  402ba6:	dc19      	bgt.n	402bdc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402ba8:	4b11      	ldr	r3, [pc, #68]	; (402bf0 <xTimerGenericCommand+0x64>)
  402baa:	4798      	blx	r3
  402bac:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402bae:	f04f 0300 	mov.w	r3, #0
  402bb2:	bf0c      	ite	eq
  402bb4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402bb6:	461a      	movne	r2, r3
  402bb8:	4669      	mov	r1, sp
  402bba:	480c      	ldr	r0, [pc, #48]	; (402bec <xTimerGenericCommand+0x60>)
  402bbc:	6800      	ldr	r0, [r0, #0]
  402bbe:	4c0d      	ldr	r4, [pc, #52]	; (402bf4 <xTimerGenericCommand+0x68>)
  402bc0:	47a0      	blx	r4
}
  402bc2:	b005      	add	sp, #20
  402bc4:	bd30      	pop	{r4, r5, pc}
  402bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bca:	b672      	cpsid	i
  402bcc:	f383 8811 	msr	BASEPRI, r3
  402bd0:	f3bf 8f6f 	isb	sy
  402bd4:	f3bf 8f4f 	dsb	sy
  402bd8:	b662      	cpsie	i
  402bda:	e7fe      	b.n	402bda <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402bdc:	2300      	movs	r3, #0
  402bde:	4669      	mov	r1, sp
  402be0:	4c05      	ldr	r4, [pc, #20]	; (402bf8 <xTimerGenericCommand+0x6c>)
  402be2:	47a0      	blx	r4
  402be4:	e7ed      	b.n	402bc2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402be6:	2000      	movs	r0, #0
	return xReturn;
  402be8:	e7eb      	b.n	402bc2 <xTimerGenericCommand+0x36>
  402bea:	bf00      	nop
  402bec:	20400b98 	.word	0x20400b98
  402bf0:	004027f5 	.word	0x004027f5
  402bf4:	0040168d 	.word	0x0040168d
  402bf8:	0040187d 	.word	0x0040187d

00402bfc <prvSampleTimeNow>:
{
  402bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c00:	b082      	sub	sp, #8
  402c02:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402c04:	4b24      	ldr	r3, [pc, #144]	; (402c98 <prvSampleTimeNow+0x9c>)
  402c06:	4798      	blx	r3
  402c08:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402c0a:	4b24      	ldr	r3, [pc, #144]	; (402c9c <prvSampleTimeNow+0xa0>)
  402c0c:	681b      	ldr	r3, [r3, #0]
  402c0e:	4298      	cmp	r0, r3
  402c10:	d31b      	bcc.n	402c4a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402c12:	2300      	movs	r3, #0
  402c14:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402c18:	4b20      	ldr	r3, [pc, #128]	; (402c9c <prvSampleTimeNow+0xa0>)
  402c1a:	601f      	str	r7, [r3, #0]
}
  402c1c:	4638      	mov	r0, r7
  402c1e:	b002      	add	sp, #8
  402c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c24:	2100      	movs	r1, #0
  402c26:	9100      	str	r1, [sp, #0]
  402c28:	460b      	mov	r3, r1
  402c2a:	4652      	mov	r2, sl
  402c2c:	4620      	mov	r0, r4
  402c2e:	4c1c      	ldr	r4, [pc, #112]	; (402ca0 <prvSampleTimeNow+0xa4>)
  402c30:	47a0      	blx	r4
				configASSERT( xResult );
  402c32:	b960      	cbnz	r0, 402c4e <prvSampleTimeNow+0x52>
  402c34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c38:	b672      	cpsid	i
  402c3a:	f383 8811 	msr	BASEPRI, r3
  402c3e:	f3bf 8f6f 	isb	sy
  402c42:	f3bf 8f4f 	dsb	sy
  402c46:	b662      	cpsie	i
  402c48:	e7fe      	b.n	402c48 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402c4a:	4d16      	ldr	r5, [pc, #88]	; (402ca4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c4c:	4e16      	ldr	r6, [pc, #88]	; (402ca8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402c4e:	682b      	ldr	r3, [r5, #0]
  402c50:	681a      	ldr	r2, [r3, #0]
  402c52:	b1c2      	cbz	r2, 402c86 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c54:	68db      	ldr	r3, [r3, #12]
  402c56:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c5a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c5c:	f104 0904 	add.w	r9, r4, #4
  402c60:	4648      	mov	r0, r9
  402c62:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c66:	4620      	mov	r0, r4
  402c68:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c6a:	69e3      	ldr	r3, [r4, #28]
  402c6c:	2b01      	cmp	r3, #1
  402c6e:	d1ee      	bne.n	402c4e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402c70:	69a3      	ldr	r3, [r4, #24]
  402c72:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402c74:	459a      	cmp	sl, r3
  402c76:	d2d5      	bcs.n	402c24 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402c78:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402c7a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402c7c:	4649      	mov	r1, r9
  402c7e:	6828      	ldr	r0, [r5, #0]
  402c80:	4b0a      	ldr	r3, [pc, #40]	; (402cac <prvSampleTimeNow+0xb0>)
  402c82:	4798      	blx	r3
  402c84:	e7e3      	b.n	402c4e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402c86:	4a0a      	ldr	r2, [pc, #40]	; (402cb0 <prvSampleTimeNow+0xb4>)
  402c88:	6810      	ldr	r0, [r2, #0]
  402c8a:	4906      	ldr	r1, [pc, #24]	; (402ca4 <prvSampleTimeNow+0xa8>)
  402c8c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402c8e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402c90:	2301      	movs	r3, #1
  402c92:	f8c8 3000 	str.w	r3, [r8]
  402c96:	e7bf      	b.n	402c18 <prvSampleTimeNow+0x1c>
  402c98:	00402289 	.word	0x00402289
  402c9c:	20400b94 	.word	0x20400b94
  402ca0:	00402b8d 	.word	0x00402b8d
  402ca4:	20400b64 	.word	0x20400b64
  402ca8:	00400fc9 	.word	0x00400fc9
  402cac:	00400f95 	.word	0x00400f95
  402cb0:	20400b68 	.word	0x20400b68

00402cb4 <prvTimerTask>:
{
  402cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cb8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402cba:	4e75      	ldr	r6, [pc, #468]	; (402e90 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402cbc:	4f75      	ldr	r7, [pc, #468]	; (402e94 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402cbe:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402ebc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402cc2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402ec0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402cc6:	6833      	ldr	r3, [r6, #0]
  402cc8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402cca:	2a00      	cmp	r2, #0
  402ccc:	f000 80ce 	beq.w	402e6c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402cd0:	68db      	ldr	r3, [r3, #12]
  402cd2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402cd4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402cd6:	a804      	add	r0, sp, #16
  402cd8:	4b6f      	ldr	r3, [pc, #444]	; (402e98 <prvTimerTask+0x1e4>)
  402cda:	4798      	blx	r3
  402cdc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402cde:	9b04      	ldr	r3, [sp, #16]
  402ce0:	2b00      	cmp	r3, #0
  402ce2:	d144      	bne.n	402d6e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402ce4:	42a0      	cmp	r0, r4
  402ce6:	d212      	bcs.n	402d0e <prvTimerTask+0x5a>
  402ce8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402cea:	1b61      	subs	r1, r4, r5
  402cec:	4b6b      	ldr	r3, [pc, #428]	; (402e9c <prvTimerTask+0x1e8>)
  402cee:	6818      	ldr	r0, [r3, #0]
  402cf0:	4b6b      	ldr	r3, [pc, #428]	; (402ea0 <prvTimerTask+0x1ec>)
  402cf2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402cf4:	4b6b      	ldr	r3, [pc, #428]	; (402ea4 <prvTimerTask+0x1f0>)
  402cf6:	4798      	blx	r3
  402cf8:	2800      	cmp	r0, #0
  402cfa:	d13a      	bne.n	402d72 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402d00:	f8c9 3000 	str.w	r3, [r9]
  402d04:	f3bf 8f4f 	dsb	sy
  402d08:	f3bf 8f6f 	isb	sy
  402d0c:	e031      	b.n	402d72 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402d0e:	4b65      	ldr	r3, [pc, #404]	; (402ea4 <prvTimerTask+0x1f0>)
  402d10:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d12:	6833      	ldr	r3, [r6, #0]
  402d14:	68db      	ldr	r3, [r3, #12]
  402d16:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402d1a:	f10a 0004 	add.w	r0, sl, #4
  402d1e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402d20:	f8da 301c 	ldr.w	r3, [sl, #28]
  402d24:	2b01      	cmp	r3, #1
  402d26:	d004      	beq.n	402d32 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402d28:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402d2c:	4650      	mov	r0, sl
  402d2e:	4798      	blx	r3
  402d30:	e01f      	b.n	402d72 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  402d32:	f8da 1018 	ldr.w	r1, [sl, #24]
  402d36:	4623      	mov	r3, r4
  402d38:	462a      	mov	r2, r5
  402d3a:	4421      	add	r1, r4
  402d3c:	4650      	mov	r0, sl
  402d3e:	4d5a      	ldr	r5, [pc, #360]	; (402ea8 <prvTimerTask+0x1f4>)
  402d40:	47a8      	blx	r5
  402d42:	2800      	cmp	r0, #0
  402d44:	d0f0      	beq.n	402d28 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402d46:	2100      	movs	r1, #0
  402d48:	9100      	str	r1, [sp, #0]
  402d4a:	460b      	mov	r3, r1
  402d4c:	4622      	mov	r2, r4
  402d4e:	4650      	mov	r0, sl
  402d50:	4c56      	ldr	r4, [pc, #344]	; (402eac <prvTimerTask+0x1f8>)
  402d52:	47a0      	blx	r4
			configASSERT( xResult );
  402d54:	2800      	cmp	r0, #0
  402d56:	d1e7      	bne.n	402d28 <prvTimerTask+0x74>
  402d58:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d5c:	b672      	cpsid	i
  402d5e:	f383 8811 	msr	BASEPRI, r3
  402d62:	f3bf 8f6f 	isb	sy
  402d66:	f3bf 8f4f 	dsb	sy
  402d6a:	b662      	cpsie	i
  402d6c:	e7fe      	b.n	402d6c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402d6e:	4b4d      	ldr	r3, [pc, #308]	; (402ea4 <prvTimerTask+0x1f0>)
  402d70:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402d72:	4d4a      	ldr	r5, [pc, #296]	; (402e9c <prvTimerTask+0x1e8>)
  402d74:	4c4e      	ldr	r4, [pc, #312]	; (402eb0 <prvTimerTask+0x1fc>)
  402d76:	e006      	b.n	402d86 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402d78:	9907      	ldr	r1, [sp, #28]
  402d7a:	9806      	ldr	r0, [sp, #24]
  402d7c:	9b05      	ldr	r3, [sp, #20]
  402d7e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402d80:	9b04      	ldr	r3, [sp, #16]
  402d82:	2b00      	cmp	r3, #0
  402d84:	da08      	bge.n	402d98 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402d86:	2200      	movs	r2, #0
  402d88:	a904      	add	r1, sp, #16
  402d8a:	6828      	ldr	r0, [r5, #0]
  402d8c:	47a0      	blx	r4
  402d8e:	2800      	cmp	r0, #0
  402d90:	d099      	beq.n	402cc6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402d92:	9b04      	ldr	r3, [sp, #16]
  402d94:	2b00      	cmp	r3, #0
  402d96:	dbef      	blt.n	402d78 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402d98:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402d9c:	f8da 3014 	ldr.w	r3, [sl, #20]
  402da0:	b113      	cbz	r3, 402da8 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402da2:	f10a 0004 	add.w	r0, sl, #4
  402da6:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402da8:	a803      	add	r0, sp, #12
  402daa:	4b3b      	ldr	r3, [pc, #236]	; (402e98 <prvTimerTask+0x1e4>)
  402dac:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402dae:	9b04      	ldr	r3, [sp, #16]
  402db0:	2b09      	cmp	r3, #9
  402db2:	d8e8      	bhi.n	402d86 <prvTimerTask+0xd2>
  402db4:	a201      	add	r2, pc, #4	; (adr r2, 402dbc <prvTimerTask+0x108>)
  402db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dba:	bf00      	nop
  402dbc:	00402de5 	.word	0x00402de5
  402dc0:	00402de5 	.word	0x00402de5
  402dc4:	00402de5 	.word	0x00402de5
  402dc8:	00402d87 	.word	0x00402d87
  402dcc:	00402e39 	.word	0x00402e39
  402dd0:	00402e65 	.word	0x00402e65
  402dd4:	00402de5 	.word	0x00402de5
  402dd8:	00402de5 	.word	0x00402de5
  402ddc:	00402d87 	.word	0x00402d87
  402de0:	00402e39 	.word	0x00402e39
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402de4:	9c05      	ldr	r4, [sp, #20]
  402de6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402dea:	4623      	mov	r3, r4
  402dec:	4602      	mov	r2, r0
  402dee:	4421      	add	r1, r4
  402df0:	4650      	mov	r0, sl
  402df2:	4c2d      	ldr	r4, [pc, #180]	; (402ea8 <prvTimerTask+0x1f4>)
  402df4:	47a0      	blx	r4
  402df6:	2800      	cmp	r0, #0
  402df8:	d0bc      	beq.n	402d74 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402dfa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402dfe:	4650      	mov	r0, sl
  402e00:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402e02:	f8da 301c 	ldr.w	r3, [sl, #28]
  402e06:	2b01      	cmp	r3, #1
  402e08:	d1b4      	bne.n	402d74 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402e0a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402e0e:	2100      	movs	r1, #0
  402e10:	9100      	str	r1, [sp, #0]
  402e12:	460b      	mov	r3, r1
  402e14:	9805      	ldr	r0, [sp, #20]
  402e16:	4402      	add	r2, r0
  402e18:	4650      	mov	r0, sl
  402e1a:	4c24      	ldr	r4, [pc, #144]	; (402eac <prvTimerTask+0x1f8>)
  402e1c:	47a0      	blx	r4
							configASSERT( xResult );
  402e1e:	2800      	cmp	r0, #0
  402e20:	d1a8      	bne.n	402d74 <prvTimerTask+0xc0>
  402e22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e26:	b672      	cpsid	i
  402e28:	f383 8811 	msr	BASEPRI, r3
  402e2c:	f3bf 8f6f 	isb	sy
  402e30:	f3bf 8f4f 	dsb	sy
  402e34:	b662      	cpsie	i
  402e36:	e7fe      	b.n	402e36 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402e38:	9905      	ldr	r1, [sp, #20]
  402e3a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402e3e:	b131      	cbz	r1, 402e4e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402e40:	4603      	mov	r3, r0
  402e42:	4602      	mov	r2, r0
  402e44:	4401      	add	r1, r0
  402e46:	4650      	mov	r0, sl
  402e48:	4c17      	ldr	r4, [pc, #92]	; (402ea8 <prvTimerTask+0x1f4>)
  402e4a:	47a0      	blx	r4
  402e4c:	e792      	b.n	402d74 <prvTimerTask+0xc0>
  402e4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e52:	b672      	cpsid	i
  402e54:	f383 8811 	msr	BASEPRI, r3
  402e58:	f3bf 8f6f 	isb	sy
  402e5c:	f3bf 8f4f 	dsb	sy
  402e60:	b662      	cpsie	i
  402e62:	e7fe      	b.n	402e62 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  402e64:	4650      	mov	r0, sl
  402e66:	4b13      	ldr	r3, [pc, #76]	; (402eb4 <prvTimerTask+0x200>)
  402e68:	4798      	blx	r3
  402e6a:	e783      	b.n	402d74 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402e6c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e6e:	a804      	add	r0, sp, #16
  402e70:	4b09      	ldr	r3, [pc, #36]	; (402e98 <prvTimerTask+0x1e4>)
  402e72:	4798      	blx	r3
  402e74:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402e76:	9b04      	ldr	r3, [sp, #16]
  402e78:	2b00      	cmp	r3, #0
  402e7a:	f47f af78 	bne.w	402d6e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402e7e:	4b0e      	ldr	r3, [pc, #56]	; (402eb8 <prvTimerTask+0x204>)
  402e80:	681b      	ldr	r3, [r3, #0]
  402e82:	681a      	ldr	r2, [r3, #0]
  402e84:	fab2 f282 	clz	r2, r2
  402e88:	0952      	lsrs	r2, r2, #5
  402e8a:	2400      	movs	r4, #0
  402e8c:	e72d      	b.n	402cea <prvTimerTask+0x36>
  402e8e:	bf00      	nop
  402e90:	20400b64 	.word	0x20400b64
  402e94:	00402279 	.word	0x00402279
  402e98:	00402bfd 	.word	0x00402bfd
  402e9c:	20400b98 	.word	0x20400b98
  402ea0:	00401e35 	.word	0x00401e35
  402ea4:	004023dd 	.word	0x004023dd
  402ea8:	00402a79 	.word	0x00402a79
  402eac:	00402b8d 	.word	0x00402b8d
  402eb0:	00401a75 	.word	0x00401a75
  402eb4:	00401381 	.word	0x00401381
  402eb8:	20400b68 	.word	0x20400b68
  402ebc:	e000ed04 	.word	0xe000ed04
  402ec0:	00400fc9 	.word	0x00400fc9

00402ec4 <but1_callback>:

/**                                                               
* callback do botao                                               
* libera semaforo: xSemaphore                                    
*/
void but1_callback(void){
  402ec4:	b530      	push	{r4, r5, lr}
  402ec6:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402ec8:	ac02      	add	r4, sp, #8
  402eca:	2300      	movs	r3, #0
  402ecc:	f844 3d04 	str.w	r3, [r4, #-4]!
    printf("but1_callback \n");
  402ed0:	4805      	ldr	r0, [pc, #20]	; (402ee8 <but1_callback+0x24>)
  402ed2:	4d06      	ldr	r5, [pc, #24]	; (402eec <but1_callback+0x28>)
  402ed4:	47a8      	blx	r5
    xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  402ed6:	4621      	mov	r1, r4
  402ed8:	4b05      	ldr	r3, [pc, #20]	; (402ef0 <but1_callback+0x2c>)
  402eda:	6818      	ldr	r0, [r3, #0]
  402edc:	4b05      	ldr	r3, [pc, #20]	; (402ef4 <but1_callback+0x30>)
  402ede:	4798      	blx	r3
    printf("semafaro tx \n");
  402ee0:	4805      	ldr	r0, [pc, #20]	; (402ef8 <but1_callback+0x34>)
  402ee2:	47a8      	blx	r5
}
  402ee4:	b003      	add	sp, #12
  402ee6:	bd30      	pop	{r4, r5, pc}
  402ee8:	00406b70 	.word	0x00406b70
  402eec:	00403931 	.word	0x00403931
  402ef0:	20400c24 	.word	0x20400c24
  402ef4:	00401991 	.word	0x00401991
  402ef8:	00406b80 	.word	0x00406b80

00402efc <but2_callback>:
void but2_callback(void){
  402efc:	b530      	push	{r4, r5, lr}
  402efe:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402f00:	ac02      	add	r4, sp, #8
  402f02:	2300      	movs	r3, #0
  402f04:	f844 3d04 	str.w	r3, [r4, #-4]!
    printf("but2_callback \n");
  402f08:	4805      	ldr	r0, [pc, #20]	; (402f20 <but2_callback+0x24>)
  402f0a:	4d06      	ldr	r5, [pc, #24]	; (402f24 <but2_callback+0x28>)
  402f0c:	47a8      	blx	r5
    xSemaphoreGiveFromISR(xSemaphore2, &xHigherPriorityTaskWoken);
  402f0e:	4621      	mov	r1, r4
  402f10:	4b05      	ldr	r3, [pc, #20]	; (402f28 <but2_callback+0x2c>)
  402f12:	6818      	ldr	r0, [r3, #0]
  402f14:	4b05      	ldr	r3, [pc, #20]	; (402f2c <but2_callback+0x30>)
  402f16:	4798      	blx	r3
    printf("semafaro tx \n");
  402f18:	4805      	ldr	r0, [pc, #20]	; (402f30 <but2_callback+0x34>)
  402f1a:	47a8      	blx	r5
}
  402f1c:	b003      	add	sp, #12
  402f1e:	bd30      	pop	{r4, r5, pc}
  402f20:	00406b90 	.word	0x00406b90
  402f24:	00403931 	.word	0x00403931
  402f28:	20400c2c 	.word	0x20400c2c
  402f2c:	00401991 	.word	0x00401991
  402f30:	00406b80 	.word	0x00406b80

00402f34 <but3_callback>:
void but3_callback(void){
  402f34:	b530      	push	{r4, r5, lr}
  402f36:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402f38:	ac02      	add	r4, sp, #8
  402f3a:	2300      	movs	r3, #0
  402f3c:	f844 3d04 	str.w	r3, [r4, #-4]!
    printf("but3_callback \n");
  402f40:	4805      	ldr	r0, [pc, #20]	; (402f58 <but3_callback+0x24>)
  402f42:	4d06      	ldr	r5, [pc, #24]	; (402f5c <but3_callback+0x28>)
  402f44:	47a8      	blx	r5
    xSemaphoreGiveFromISR(xSemaphore3, &xHigherPriorityTaskWoken);
  402f46:	4621      	mov	r1, r4
  402f48:	4b05      	ldr	r3, [pc, #20]	; (402f60 <but3_callback+0x2c>)
  402f4a:	6818      	ldr	r0, [r3, #0]
  402f4c:	4b05      	ldr	r3, [pc, #20]	; (402f64 <but3_callback+0x30>)
  402f4e:	4798      	blx	r3
    printf("semafaro tx \n");
  402f50:	4805      	ldr	r0, [pc, #20]	; (402f68 <but3_callback+0x34>)
  402f52:	47a8      	blx	r5
}
  402f54:	b003      	add	sp, #12
  402f56:	bd30      	pop	{r4, r5, pc}
  402f58:	00406ba0 	.word	0x00406ba0
  402f5c:	00403931 	.word	0x00403931
  402f60:	20400c20 	.word	0x20400c20
  402f64:	00401991 	.word	0x00401991
  402f68:	00406b80 	.word	0x00406b80

00402f6c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f6e:	b083      	sub	sp, #12
  402f70:	4605      	mov	r5, r0
  402f72:	460c      	mov	r4, r1
	uint32_t val = 0;
  402f74:	2300      	movs	r3, #0
  402f76:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402f78:	4b2a      	ldr	r3, [pc, #168]	; (403024 <usart_serial_getchar+0xb8>)
  402f7a:	4298      	cmp	r0, r3
  402f7c:	d013      	beq.n	402fa6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402f7e:	4b2a      	ldr	r3, [pc, #168]	; (403028 <usart_serial_getchar+0xbc>)
  402f80:	4298      	cmp	r0, r3
  402f82:	d018      	beq.n	402fb6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402f84:	4b29      	ldr	r3, [pc, #164]	; (40302c <usart_serial_getchar+0xc0>)
  402f86:	4298      	cmp	r0, r3
  402f88:	d01d      	beq.n	402fc6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402f8a:	4b29      	ldr	r3, [pc, #164]	; (403030 <usart_serial_getchar+0xc4>)
  402f8c:	429d      	cmp	r5, r3
  402f8e:	d022      	beq.n	402fd6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402f90:	4b28      	ldr	r3, [pc, #160]	; (403034 <usart_serial_getchar+0xc8>)
  402f92:	429d      	cmp	r5, r3
  402f94:	d027      	beq.n	402fe6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402f96:	4b28      	ldr	r3, [pc, #160]	; (403038 <usart_serial_getchar+0xcc>)
  402f98:	429d      	cmp	r5, r3
  402f9a:	d02e      	beq.n	402ffa <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402f9c:	4b27      	ldr	r3, [pc, #156]	; (40303c <usart_serial_getchar+0xd0>)
  402f9e:	429d      	cmp	r5, r3
  402fa0:	d035      	beq.n	40300e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402fa2:	b003      	add	sp, #12
  402fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402fa6:	461f      	mov	r7, r3
  402fa8:	4e25      	ldr	r6, [pc, #148]	; (403040 <usart_serial_getchar+0xd4>)
  402faa:	4621      	mov	r1, r4
  402fac:	4638      	mov	r0, r7
  402fae:	47b0      	blx	r6
  402fb0:	2800      	cmp	r0, #0
  402fb2:	d1fa      	bne.n	402faa <usart_serial_getchar+0x3e>
  402fb4:	e7e9      	b.n	402f8a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402fb6:	461f      	mov	r7, r3
  402fb8:	4e21      	ldr	r6, [pc, #132]	; (403040 <usart_serial_getchar+0xd4>)
  402fba:	4621      	mov	r1, r4
  402fbc:	4638      	mov	r0, r7
  402fbe:	47b0      	blx	r6
  402fc0:	2800      	cmp	r0, #0
  402fc2:	d1fa      	bne.n	402fba <usart_serial_getchar+0x4e>
  402fc4:	e7e4      	b.n	402f90 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402fc6:	461f      	mov	r7, r3
  402fc8:	4e1d      	ldr	r6, [pc, #116]	; (403040 <usart_serial_getchar+0xd4>)
  402fca:	4621      	mov	r1, r4
  402fcc:	4638      	mov	r0, r7
  402fce:	47b0      	blx	r6
  402fd0:	2800      	cmp	r0, #0
  402fd2:	d1fa      	bne.n	402fca <usart_serial_getchar+0x5e>
  402fd4:	e7df      	b.n	402f96 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402fd6:	461f      	mov	r7, r3
  402fd8:	4e19      	ldr	r6, [pc, #100]	; (403040 <usart_serial_getchar+0xd4>)
  402fda:	4621      	mov	r1, r4
  402fdc:	4638      	mov	r0, r7
  402fde:	47b0      	blx	r6
  402fe0:	2800      	cmp	r0, #0
  402fe2:	d1fa      	bne.n	402fda <usart_serial_getchar+0x6e>
  402fe4:	e7da      	b.n	402f9c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402fe6:	461e      	mov	r6, r3
  402fe8:	4d16      	ldr	r5, [pc, #88]	; (403044 <usart_serial_getchar+0xd8>)
  402fea:	a901      	add	r1, sp, #4
  402fec:	4630      	mov	r0, r6
  402fee:	47a8      	blx	r5
  402ff0:	2800      	cmp	r0, #0
  402ff2:	d1fa      	bne.n	402fea <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402ff4:	9b01      	ldr	r3, [sp, #4]
  402ff6:	7023      	strb	r3, [r4, #0]
  402ff8:	e7d3      	b.n	402fa2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402ffa:	461e      	mov	r6, r3
  402ffc:	4d11      	ldr	r5, [pc, #68]	; (403044 <usart_serial_getchar+0xd8>)
  402ffe:	a901      	add	r1, sp, #4
  403000:	4630      	mov	r0, r6
  403002:	47a8      	blx	r5
  403004:	2800      	cmp	r0, #0
  403006:	d1fa      	bne.n	402ffe <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403008:	9b01      	ldr	r3, [sp, #4]
  40300a:	7023      	strb	r3, [r4, #0]
  40300c:	e7c9      	b.n	402fa2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40300e:	461e      	mov	r6, r3
  403010:	4d0c      	ldr	r5, [pc, #48]	; (403044 <usart_serial_getchar+0xd8>)
  403012:	a901      	add	r1, sp, #4
  403014:	4630      	mov	r0, r6
  403016:	47a8      	blx	r5
  403018:	2800      	cmp	r0, #0
  40301a:	d1fa      	bne.n	403012 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40301c:	9b01      	ldr	r3, [sp, #4]
  40301e:	7023      	strb	r3, [r4, #0]
}
  403020:	e7bf      	b.n	402fa2 <usart_serial_getchar+0x36>
  403022:	bf00      	nop
  403024:	400e0800 	.word	0x400e0800
  403028:	400e0a00 	.word	0x400e0a00
  40302c:	400e1a00 	.word	0x400e1a00
  403030:	400e1c00 	.word	0x400e1c00
  403034:	40024000 	.word	0x40024000
  403038:	40028000 	.word	0x40028000
  40303c:	4002c000 	.word	0x4002c000
  403040:	00400b83 	.word	0x00400b83
  403044:	00400c97 	.word	0x00400c97

00403048 <usart_serial_putchar>:
{
  403048:	b570      	push	{r4, r5, r6, lr}
  40304a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40304c:	4b2a      	ldr	r3, [pc, #168]	; (4030f8 <usart_serial_putchar+0xb0>)
  40304e:	4298      	cmp	r0, r3
  403050:	d013      	beq.n	40307a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403052:	4b2a      	ldr	r3, [pc, #168]	; (4030fc <usart_serial_putchar+0xb4>)
  403054:	4298      	cmp	r0, r3
  403056:	d019      	beq.n	40308c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403058:	4b29      	ldr	r3, [pc, #164]	; (403100 <usart_serial_putchar+0xb8>)
  40305a:	4298      	cmp	r0, r3
  40305c:	d01f      	beq.n	40309e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40305e:	4b29      	ldr	r3, [pc, #164]	; (403104 <usart_serial_putchar+0xbc>)
  403060:	4298      	cmp	r0, r3
  403062:	d025      	beq.n	4030b0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403064:	4b28      	ldr	r3, [pc, #160]	; (403108 <usart_serial_putchar+0xc0>)
  403066:	4298      	cmp	r0, r3
  403068:	d02b      	beq.n	4030c2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40306a:	4b28      	ldr	r3, [pc, #160]	; (40310c <usart_serial_putchar+0xc4>)
  40306c:	4298      	cmp	r0, r3
  40306e:	d031      	beq.n	4030d4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403070:	4b27      	ldr	r3, [pc, #156]	; (403110 <usart_serial_putchar+0xc8>)
  403072:	4298      	cmp	r0, r3
  403074:	d037      	beq.n	4030e6 <usart_serial_putchar+0x9e>
	return 0;
  403076:	2000      	movs	r0, #0
}
  403078:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40307a:	461e      	mov	r6, r3
  40307c:	4d25      	ldr	r5, [pc, #148]	; (403114 <usart_serial_putchar+0xcc>)
  40307e:	4621      	mov	r1, r4
  403080:	4630      	mov	r0, r6
  403082:	47a8      	blx	r5
  403084:	2800      	cmp	r0, #0
  403086:	d1fa      	bne.n	40307e <usart_serial_putchar+0x36>
		return 1;
  403088:	2001      	movs	r0, #1
  40308a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40308c:	461e      	mov	r6, r3
  40308e:	4d21      	ldr	r5, [pc, #132]	; (403114 <usart_serial_putchar+0xcc>)
  403090:	4621      	mov	r1, r4
  403092:	4630      	mov	r0, r6
  403094:	47a8      	blx	r5
  403096:	2800      	cmp	r0, #0
  403098:	d1fa      	bne.n	403090 <usart_serial_putchar+0x48>
		return 1;
  40309a:	2001      	movs	r0, #1
  40309c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40309e:	461e      	mov	r6, r3
  4030a0:	4d1c      	ldr	r5, [pc, #112]	; (403114 <usart_serial_putchar+0xcc>)
  4030a2:	4621      	mov	r1, r4
  4030a4:	4630      	mov	r0, r6
  4030a6:	47a8      	blx	r5
  4030a8:	2800      	cmp	r0, #0
  4030aa:	d1fa      	bne.n	4030a2 <usart_serial_putchar+0x5a>
		return 1;
  4030ac:	2001      	movs	r0, #1
  4030ae:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4030b0:	461e      	mov	r6, r3
  4030b2:	4d18      	ldr	r5, [pc, #96]	; (403114 <usart_serial_putchar+0xcc>)
  4030b4:	4621      	mov	r1, r4
  4030b6:	4630      	mov	r0, r6
  4030b8:	47a8      	blx	r5
  4030ba:	2800      	cmp	r0, #0
  4030bc:	d1fa      	bne.n	4030b4 <usart_serial_putchar+0x6c>
		return 1;
  4030be:	2001      	movs	r0, #1
  4030c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030c2:	461e      	mov	r6, r3
  4030c4:	4d14      	ldr	r5, [pc, #80]	; (403118 <usart_serial_putchar+0xd0>)
  4030c6:	4621      	mov	r1, r4
  4030c8:	4630      	mov	r0, r6
  4030ca:	47a8      	blx	r5
  4030cc:	2800      	cmp	r0, #0
  4030ce:	d1fa      	bne.n	4030c6 <usart_serial_putchar+0x7e>
		return 1;
  4030d0:	2001      	movs	r0, #1
  4030d2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030d4:	461e      	mov	r6, r3
  4030d6:	4d10      	ldr	r5, [pc, #64]	; (403118 <usart_serial_putchar+0xd0>)
  4030d8:	4621      	mov	r1, r4
  4030da:	4630      	mov	r0, r6
  4030dc:	47a8      	blx	r5
  4030de:	2800      	cmp	r0, #0
  4030e0:	d1fa      	bne.n	4030d8 <usart_serial_putchar+0x90>
		return 1;
  4030e2:	2001      	movs	r0, #1
  4030e4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030e6:	461e      	mov	r6, r3
  4030e8:	4d0b      	ldr	r5, [pc, #44]	; (403118 <usart_serial_putchar+0xd0>)
  4030ea:	4621      	mov	r1, r4
  4030ec:	4630      	mov	r0, r6
  4030ee:	47a8      	blx	r5
  4030f0:	2800      	cmp	r0, #0
  4030f2:	d1fa      	bne.n	4030ea <usart_serial_putchar+0xa2>
		return 1;
  4030f4:	2001      	movs	r0, #1
  4030f6:	bd70      	pop	{r4, r5, r6, pc}
  4030f8:	400e0800 	.word	0x400e0800
  4030fc:	400e0a00 	.word	0x400e0a00
  403100:	400e1a00 	.word	0x400e1a00
  403104:	400e1c00 	.word	0x400e1c00
  403108:	40024000 	.word	0x40024000
  40310c:	40028000 	.word	0x40028000
  403110:	4002c000 	.word	0x4002c000
  403114:	00400b71 	.word	0x00400b71
  403118:	00400c81 	.word	0x00400c81

0040311c <task_uartRX>:
		}
		vTaskDelay(xDelay);
	}
}

static void task_uartRX(void *pvpParameters){
  40311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403120:	b08a      	sub	sp, #40	; 0x28
    
    char letter;
    char word[32];
    int i =0;
  403122:	2600      	movs	r6, #0
    while(1){
      if (xQueueReceive(xQueueChar,&letter,( TickType_t )  100 / portTICK_PERIOD_MS)){
  403124:	4d12      	ldr	r5, [pc, #72]	; (403170 <task_uartRX+0x54>)
  403126:	4c13      	ldr	r4, [pc, #76]	; (403174 <task_uartRX+0x58>)
        if (letter=='\n'){
          word[i] =0;
		  printf("Enviou commando");
  403128:	f8df 8058 	ldr.w	r8, [pc, #88]	; 403184 <task_uartRX+0x68>
  40312c:	e00e      	b.n	40314c <task_uartRX+0x30>
          word[i] =0;
  40312e:	ab0a      	add	r3, sp, #40	; 0x28
  403130:	4433      	add	r3, r6
  403132:	2600      	movs	r6, #0
  403134:	f803 6c24 	strb.w	r6, [r3, #-36]
		  printf("Enviou commando");
  403138:	4640      	mov	r0, r8
  40313a:	4b0f      	ldr	r3, [pc, #60]	; (403178 <task_uartRX+0x5c>)
  40313c:	4798      	blx	r3
          xQueueSend(xQueueCommand,&word,0);
  40313e:	4633      	mov	r3, r6
  403140:	4632      	mov	r2, r6
  403142:	a901      	add	r1, sp, #4
  403144:	480d      	ldr	r0, [pc, #52]	; (40317c <task_uartRX+0x60>)
  403146:	6800      	ldr	r0, [r0, #0]
  403148:	4f0d      	ldr	r7, [pc, #52]	; (403180 <task_uartRX+0x64>)
  40314a:	47b8      	blx	r7
      if (xQueueReceive(xQueueChar,&letter,( TickType_t )  100 / portTICK_PERIOD_MS)){
  40314c:	2264      	movs	r2, #100	; 0x64
  40314e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  403152:	6828      	ldr	r0, [r5, #0]
  403154:	47a0      	blx	r4
  403156:	2800      	cmp	r0, #0
  403158:	d0f8      	beq.n	40314c <task_uartRX+0x30>
        if (letter=='\n'){
  40315a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  40315e:	2b0a      	cmp	r3, #10
  403160:	d0e5      	beq.n	40312e <task_uartRX+0x12>
          i =0;
        } else {
          word[i] = letter;
  403162:	aa0a      	add	r2, sp, #40	; 0x28
  403164:	4432      	add	r2, r6
  403166:	f802 3c24 	strb.w	r3, [r2, #-36]
          i++;
  40316a:	3601      	adds	r6, #1
  40316c:	e7ee      	b.n	40314c <task_uartRX+0x30>
  40316e:	bf00      	nop
  403170:	20400c28 	.word	0x20400c28
  403174:	00401a75 	.word	0x00401a75
  403178:	00403931 	.word	0x00403931
  40317c:	20400c30 	.word	0x20400c30
  403180:	0040168d 	.word	0x0040168d
  403184:	00406dcc 	.word	0x00406dcc

00403188 <task_led1>:
static void task_led1(void *pvParameters){
  403188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  40318c:	4f0b      	ldr	r7, [pc, #44]	; (4031bc <task_led1+0x34>)
  40318e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4031c8 <task_led1+0x40>
			vTaskDelay(xDelayLed);
  403192:	4d0b      	ldr	r5, [pc, #44]	; (4031c0 <task_led1+0x38>)
  403194:	e002      	b.n	40319c <task_led1+0x14>
		vTaskDelay(xDelay);
  403196:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40319a:	47a8      	blx	r5
static void task_led1(void *pvParameters){
  40319c:	2405      	movs	r4, #5
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  40319e:	2601      	movs	r6, #1
  4031a0:	4631      	mov	r1, r6
  4031a2:	4638      	mov	r0, r7
  4031a4:	47c0      	blx	r8
			vTaskDelay(xDelayLed);
  4031a6:	20c8      	movs	r0, #200	; 0xc8
  4031a8:	47a8      	blx	r5
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4031aa:	4631      	mov	r1, r6
  4031ac:	4638      	mov	r0, r7
  4031ae:	4b05      	ldr	r3, [pc, #20]	; (4031c4 <task_led1+0x3c>)
  4031b0:	4798      	blx	r3
			vTaskDelay(xDelayLed);
  4031b2:	20c8      	movs	r0, #200	; 0xc8
  4031b4:	47a8      	blx	r5
		for (uint i=0; i<5; i++){
  4031b6:	3c01      	subs	r4, #1
  4031b8:	d1f2      	bne.n	4031a0 <task_led1+0x18>
  4031ba:	e7ec      	b.n	403196 <task_led1+0xe>
  4031bc:	400e0e00 	.word	0x400e0e00
  4031c0:	004024f5 	.word	0x004024f5
  4031c4:	00400465 	.word	0x00400465
  4031c8:	00400469 	.word	0x00400469

004031cc <vApplicationStackOverflowHook>:
{
  4031cc:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4031ce:	460a      	mov	r2, r1
  4031d0:	4601      	mov	r1, r0
  4031d2:	4802      	ldr	r0, [pc, #8]	; (4031dc <vApplicationStackOverflowHook+0x10>)
  4031d4:	4b02      	ldr	r3, [pc, #8]	; (4031e0 <vApplicationStackOverflowHook+0x14>)
  4031d6:	4798      	blx	r3
  4031d8:	e7fe      	b.n	4031d8 <vApplicationStackOverflowHook+0xc>
  4031da:	bf00      	nop
  4031dc:	00406ddc 	.word	0x00406ddc
  4031e0:	00403931 	.word	0x00403931

004031e4 <vApplicationIdleHook>:
{
  4031e4:	b508      	push	{r3, lr}
	pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4031e6:	2002      	movs	r0, #2
  4031e8:	4b01      	ldr	r3, [pc, #4]	; (4031f0 <vApplicationIdleHook+0xc>)
  4031ea:	4798      	blx	r3
  4031ec:	bd08      	pop	{r3, pc}
  4031ee:	bf00      	nop
  4031f0:	004008fd 	.word	0x004008fd

004031f4 <vApplicationTickHook>:
{
  4031f4:	4770      	bx	lr

004031f6 <vApplicationMallocFailedHook>:
  4031f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031fa:	b672      	cpsid	i
  4031fc:	f383 8811 	msr	BASEPRI, r3
  403200:	f3bf 8f6f 	isb	sy
  403204:	f3bf 8f4f 	dsb	sy
  403208:	b662      	cpsie	i
  40320a:	e7fe      	b.n	40320a <vApplicationMallocFailedHook+0x14>

0040320c <led_toggle>:
void led_toggle(Pio *pio, const pio_type_t ul_type, const uint32_t ul_mask) {
  40320c:	b538      	push	{r3, r4, r5, lr}
  40320e:	4604      	mov	r4, r0
  403210:	4615      	mov	r5, r2
	if (pio_get(pio,ul_type,ul_mask)) pio_clear(pio, ul_mask);
  403212:	4b06      	ldr	r3, [pc, #24]	; (40322c <led_toggle+0x20>)
  403214:	4798      	blx	r3
  403216:	b920      	cbnz	r0, 403222 <led_toggle+0x16>
	else pio_set(pio,ul_mask);
  403218:	4629      	mov	r1, r5
  40321a:	4620      	mov	r0, r4
  40321c:	4b04      	ldr	r3, [pc, #16]	; (403230 <led_toggle+0x24>)
  40321e:	4798      	blx	r3
  403220:	bd38      	pop	{r3, r4, r5, pc}
	if (pio_get(pio,ul_type,ul_mask)) pio_clear(pio, ul_mask);
  403222:	4629      	mov	r1, r5
  403224:	4620      	mov	r0, r4
  403226:	4b03      	ldr	r3, [pc, #12]	; (403234 <led_toggle+0x28>)
  403228:	4798      	blx	r3
  40322a:	bd38      	pop	{r3, r4, r5, pc}
  40322c:	0040046d 	.word	0x0040046d
  403230:	00400465 	.word	0x00400465
  403234:	00400469 	.word	0x00400469

00403238 <task_execute>:
        }
      }
    }
}

static void task_execute(void *pvpParameters){
  403238:	b580      	push	{r7, lr}
  40323a:	b088      	sub	sp, #32
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  40323c:	4e40      	ldr	r6, [pc, #256]	; (403340 <task_execute+0x108>)
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  40323e:	4f41      	ldr	r7, [pc, #260]	; (403344 <task_execute+0x10c>)
  403240:	e005      	b.n	40324e <task_execute+0x16>
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  403242:	f44f 7280 	mov.w	r2, #256	; 0x100
  403246:	210c      	movs	r1, #12
  403248:	4630      	mov	r0, r6
  40324a:	4b3f      	ldr	r3, [pc, #252]	; (403348 <task_execute+0x110>)
  40324c:	4798      	blx	r3
      if (xQueueReceive(xQueueCommand,&command, 100 / portTICK_PERIOD_MS)){
  40324e:	4d3f      	ldr	r5, [pc, #252]	; (40334c <task_execute+0x114>)
  403250:	4c3f      	ldr	r4, [pc, #252]	; (403350 <task_execute+0x118>)
  403252:	2264      	movs	r2, #100	; 0x64
  403254:	4669      	mov	r1, sp
  403256:	6828      	ldr	r0, [r5, #0]
  403258:	47a0      	blx	r4
  40325a:	2800      	cmp	r0, #0
  40325c:	d0f9      	beq.n	403252 <task_execute+0x1a>
		  printf("Dentro do receive command");
  40325e:	483d      	ldr	r0, [pc, #244]	; (403354 <task_execute+0x11c>)
  403260:	4b3d      	ldr	r3, [pc, #244]	; (403358 <task_execute+0x120>)
  403262:	4798      	blx	r3
        if (strcmp(command, "led 0 toggle")==0) led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  403264:	493d      	ldr	r1, [pc, #244]	; (40335c <task_execute+0x124>)
  403266:	4668      	mov	r0, sp
  403268:	4b3d      	ldr	r3, [pc, #244]	; (403360 <task_execute+0x128>)
  40326a:	4798      	blx	r3
  40326c:	2800      	cmp	r0, #0
  40326e:	d0e8      	beq.n	403242 <task_execute+0xa>
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
  403270:	493c      	ldr	r1, [pc, #240]	; (403364 <task_execute+0x12c>)
  403272:	4668      	mov	r0, sp
  403274:	4b3a      	ldr	r3, [pc, #232]	; (403360 <task_execute+0x128>)
  403276:	4798      	blx	r3
  403278:	2800      	cmp	r0, #0
  40327a:	d034      	beq.n	4032e6 <task_execute+0xae>
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  40327c:	493a      	ldr	r1, [pc, #232]	; (403368 <task_execute+0x130>)
  40327e:	4668      	mov	r0, sp
  403280:	4b37      	ldr	r3, [pc, #220]	; (403360 <task_execute+0x128>)
  403282:	4798      	blx	r3
  403284:	2800      	cmp	r0, #0
  403286:	d034      	beq.n	4032f2 <task_execute+0xba>
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  403288:	4938      	ldr	r1, [pc, #224]	; (40336c <task_execute+0x134>)
  40328a:	4668      	mov	r0, sp
  40328c:	4b34      	ldr	r3, [pc, #208]	; (403360 <task_execute+0x128>)
  40328e:	4798      	blx	r3
  403290:	2800      	cmp	r0, #0
  403292:	d035      	beq.n	403300 <task_execute+0xc8>
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  403294:	4936      	ldr	r1, [pc, #216]	; (403370 <task_execute+0x138>)
  403296:	4668      	mov	r0, sp
  403298:	4b31      	ldr	r3, [pc, #196]	; (403360 <task_execute+0x128>)
  40329a:	4798      	blx	r3
  40329c:	2800      	cmp	r0, #0
  40329e:	d035      	beq.n	40330c <task_execute+0xd4>
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  4032a0:	4934      	ldr	r1, [pc, #208]	; (403374 <task_execute+0x13c>)
  4032a2:	4668      	mov	r0, sp
  4032a4:	4b2e      	ldr	r3, [pc, #184]	; (403360 <task_execute+0x128>)
  4032a6:	4798      	blx	r3
  4032a8:	2800      	cmp	r0, #0
  4032aa:	d034      	beq.n	403316 <task_execute+0xde>
        else if (strcmp(command, "led 2 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  4032ac:	4932      	ldr	r1, [pc, #200]	; (403378 <task_execute+0x140>)
  4032ae:	4668      	mov	r0, sp
  4032b0:	4b2b      	ldr	r3, [pc, #172]	; (403360 <task_execute+0x128>)
  4032b2:	4798      	blx	r3
  4032b4:	2800      	cmp	r0, #0
  4032b6:	d034      	beq.n	403322 <task_execute+0xea>
        else if (strcmp(command, "led 2 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  4032b8:	4930      	ldr	r1, [pc, #192]	; (40337c <task_execute+0x144>)
  4032ba:	4668      	mov	r0, sp
  4032bc:	4b28      	ldr	r3, [pc, #160]	; (403360 <task_execute+0x128>)
  4032be:	4798      	blx	r3
  4032c0:	2800      	cmp	r0, #0
  4032c2:	d033      	beq.n	40332c <task_execute+0xf4>
        else if (strcmp(command, "led 3 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  4032c4:	492e      	ldr	r1, [pc, #184]	; (403380 <task_execute+0x148>)
  4032c6:	4668      	mov	r0, sp
  4032c8:	4b25      	ldr	r3, [pc, #148]	; (403360 <task_execute+0x128>)
  4032ca:	4798      	blx	r3
  4032cc:	2800      	cmp	r0, #0
  4032ce:	d032      	beq.n	403336 <task_execute+0xfe>
        else if (strcmp(command, "led 3 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  4032d0:	492c      	ldr	r1, [pc, #176]	; (403384 <task_execute+0x14c>)
  4032d2:	4668      	mov	r0, sp
  4032d4:	4b22      	ldr	r3, [pc, #136]	; (403360 <task_execute+0x128>)
  4032d6:	4798      	blx	r3
  4032d8:	2800      	cmp	r0, #0
  4032da:	d1b8      	bne.n	40324e <task_execute+0x16>
  4032dc:	2104      	movs	r1, #4
  4032de:	482a      	ldr	r0, [pc, #168]	; (403388 <task_execute+0x150>)
  4032e0:	4b2a      	ldr	r3, [pc, #168]	; (40338c <task_execute+0x154>)
  4032e2:	4798      	blx	r3
  4032e4:	e7b3      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 1 toggle")==0) led_toggle(LED1_PIO,LED1_PIO_ID,LED1_PIO_IDX_MASK);
  4032e6:	2201      	movs	r2, #1
  4032e8:	210a      	movs	r1, #10
  4032ea:	4638      	mov	r0, r7
  4032ec:	4b16      	ldr	r3, [pc, #88]	; (403348 <task_execute+0x110>)
  4032ee:	4798      	blx	r3
  4032f0:	e7ad      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 2 toggle")==0) led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  4032f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4032f6:	210c      	movs	r1, #12
  4032f8:	4630      	mov	r0, r6
  4032fa:	4b13      	ldr	r3, [pc, #76]	; (403348 <task_execute+0x110>)
  4032fc:	4798      	blx	r3
  4032fe:	e7a6      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 3 toggle")==0) led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  403300:	2204      	movs	r2, #4
  403302:	210b      	movs	r1, #11
  403304:	4820      	ldr	r0, [pc, #128]	; (403388 <task_execute+0x150>)
  403306:	4b10      	ldr	r3, [pc, #64]	; (403348 <task_execute+0x110>)
  403308:	4798      	blx	r3
  40330a:	e7a0      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 1 on")==0) pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  40330c:	2101      	movs	r1, #1
  40330e:	4638      	mov	r0, r7
  403310:	4b1e      	ldr	r3, [pc, #120]	; (40338c <task_execute+0x154>)
  403312:	4798      	blx	r3
  403314:	e79b      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 1 off")==0) pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  403316:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40331a:	4630      	mov	r0, r6
  40331c:	4b1c      	ldr	r3, [pc, #112]	; (403390 <task_execute+0x158>)
  40331e:	4798      	blx	r3
  403320:	e795      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 2 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  403322:	2104      	movs	r1, #4
  403324:	4818      	ldr	r0, [pc, #96]	; (403388 <task_execute+0x150>)
  403326:	4b1a      	ldr	r3, [pc, #104]	; (403390 <task_execute+0x158>)
  403328:	4798      	blx	r3
  40332a:	e790      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 2 on")==0) pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  40332c:	2104      	movs	r1, #4
  40332e:	4816      	ldr	r0, [pc, #88]	; (403388 <task_execute+0x150>)
  403330:	4b16      	ldr	r3, [pc, #88]	; (40338c <task_execute+0x154>)
  403332:	4798      	blx	r3
  403334:	e78b      	b.n	40324e <task_execute+0x16>
        else if (strcmp(command, "led 3 off")==0) pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  403336:	2104      	movs	r1, #4
  403338:	4813      	ldr	r0, [pc, #76]	; (403388 <task_execute+0x150>)
  40333a:	4b15      	ldr	r3, [pc, #84]	; (403390 <task_execute+0x158>)
  40333c:	4798      	blx	r3
  40333e:	e786      	b.n	40324e <task_execute+0x16>
  403340:	400e1200 	.word	0x400e1200
  403344:	400e0e00 	.word	0x400e0e00
  403348:	0040320d 	.word	0x0040320d
  40334c:	20400c30 	.word	0x20400c30
  403350:	00401a75 	.word	0x00401a75
  403354:	00406d0c 	.word	0x00406d0c
  403358:	00403931 	.word	0x00403931
  40335c:	00406d28 	.word	0x00406d28
  403360:	004042a9 	.word	0x004042a9
  403364:	00406d38 	.word	0x00406d38
  403368:	00406d48 	.word	0x00406d48
  40336c:	00406d58 	.word	0x00406d58
  403370:	00406d68 	.word	0x00406d68
  403374:	00406d74 	.word	0x00406d74
  403378:	00406d80 	.word	0x00406d80
  40337c:	00406d8c 	.word	0x00406d8c
  403380:	00406d98 	.word	0x00406d98
  403384:	00406da4 	.word	0x00406da4
  403388:	400e1000 	.word	0x400e1000
  40338c:	00400469 	.word	0x00400469
  403390:	00400465 	.word	0x00400465

00403394 <task_led3>:
static void task_led3(void *pvParameters) {
  403394:	b580      	push	{r7, lr}
  403396:	b082      	sub	sp, #8
  xSemaphore3 = xSemaphoreCreateBinary();
  403398:	2203      	movs	r2, #3
  40339a:	2100      	movs	r1, #0
  40339c:	2001      	movs	r0, #1
  40339e:	4b1d      	ldr	r3, [pc, #116]	; (403414 <task_led3+0x80>)
  4033a0:	4798      	blx	r3
  4033a2:	4d1d      	ldr	r5, [pc, #116]	; (403418 <task_led3+0x84>)
  4033a4:	6028      	str	r0, [r5, #0]
  pmc_enable_periph_clk(BUT3_PIO_ID);
  4033a6:	200a      	movs	r0, #10
  4033a8:	4b1c      	ldr	r3, [pc, #112]	; (40341c <task_led3+0x88>)
  4033aa:	4798      	blx	r3
  pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP);
  4033ac:	4c1c      	ldr	r4, [pc, #112]	; (403420 <task_led3+0x8c>)
  4033ae:	2301      	movs	r3, #1
  4033b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4033b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4033b8:	4620      	mov	r0, r4
  4033ba:	4e1a      	ldr	r6, [pc, #104]	; (403424 <task_led3+0x90>)
  4033bc:	47b0      	blx	r6
  pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);
  4033be:	4b1a      	ldr	r3, [pc, #104]	; (403428 <task_led3+0x94>)
  4033c0:	9300      	str	r3, [sp, #0]
  4033c2:	2350      	movs	r3, #80	; 0x50
  4033c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4033c8:	210a      	movs	r1, #10
  4033ca:	4620      	mov	r0, r4
  4033cc:	4e17      	ldr	r6, [pc, #92]	; (40342c <task_led3+0x98>)
  4033ce:	47b0      	blx	r6
  pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  4033d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4033d4:	4620      	mov	r0, r4
  4033d6:	4b16      	ldr	r3, [pc, #88]	; (403430 <task_led3+0x9c>)
  4033d8:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4033da:	4b16      	ldr	r3, [pc, #88]	; (403434 <task_led3+0xa0>)
  4033dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4033e0:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4033e2:	2280      	movs	r2, #128	; 0x80
  4033e4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  if (xSemaphore3 == NULL)
  4033e8:	682b      	ldr	r3, [r5, #0]
  4033ea:	b913      	cbnz	r3, 4033f2 <task_led3+0x5e>
    printf("falha em criar o semaforo \n");
  4033ec:	4812      	ldr	r0, [pc, #72]	; (403438 <task_led3+0xa4>)
  4033ee:	4b13      	ldr	r3, [pc, #76]	; (40343c <task_led3+0xa8>)
  4033f0:	4798      	blx	r3
    if( xSemaphoreTake(xSemaphore3, ( TickType_t ) 500) == pdTRUE ){
  4033f2:	4e09      	ldr	r6, [pc, #36]	; (403418 <task_led3+0x84>)
  4033f4:	4d12      	ldr	r5, [pc, #72]	; (403440 <task_led3+0xac>)
        led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  4033f6:	4f13      	ldr	r7, [pc, #76]	; (403444 <task_led3+0xb0>)
    if( xSemaphoreTake(xSemaphore3, ( TickType_t ) 500) == pdTRUE ){
  4033f8:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  4033fc:	4621      	mov	r1, r4
  4033fe:	6830      	ldr	r0, [r6, #0]
  403400:	47a8      	blx	r5
  403402:	2801      	cmp	r0, #1
  403404:	d1fa      	bne.n	4033fc <task_led3+0x68>
        led_toggle(LED3_PIO,LED3_PIO_ID,LED3_PIO_IDX_MASK);
  403406:	2204      	movs	r2, #4
  403408:	210b      	movs	r1, #11
  40340a:	4638      	mov	r0, r7
  40340c:	4b0e      	ldr	r3, [pc, #56]	; (403448 <task_led3+0xb4>)
  40340e:	4798      	blx	r3
  403410:	e7f2      	b.n	4033f8 <task_led3+0x64>
  403412:	bf00      	nop
  403414:	00401631 	.word	0x00401631
  403418:	20400c20 	.word	0x20400c20
  40341c:	0040088d 	.word	0x0040088d
  403420:	400e0e00 	.word	0x400e0e00
  403424:	00400579 	.word	0x00400579
  403428:	00402f35 	.word	0x00402f35
  40342c:	00400699 	.word	0x00400699
  403430:	0040063b 	.word	0x0040063b
  403434:	e000e100 	.word	0xe000e100
  403438:	00406db0 	.word	0x00406db0
  40343c:	00403931 	.word	0x00403931
  403440:	00401c0d 	.word	0x00401c0d
  403444:	400e1000 	.word	0x400e1000
  403448:	0040320d 	.word	0x0040320d

0040344c <task_led2>:
static void task_led2(void *pvParameters) {
  40344c:	b580      	push	{r7, lr}
  40344e:	b082      	sub	sp, #8
  xSemaphore2 = xSemaphoreCreateBinary();
  403450:	2203      	movs	r2, #3
  403452:	2100      	movs	r1, #0
  403454:	2001      	movs	r0, #1
  403456:	4b1d      	ldr	r3, [pc, #116]	; (4034cc <task_led2+0x80>)
  403458:	4798      	blx	r3
  40345a:	4d1d      	ldr	r5, [pc, #116]	; (4034d0 <task_led2+0x84>)
  40345c:	6028      	str	r0, [r5, #0]
  pmc_enable_periph_clk(BUT2_PIO_ID);
  40345e:	200c      	movs	r0, #12
  403460:	4b1c      	ldr	r3, [pc, #112]	; (4034d4 <task_led2+0x88>)
  403462:	4798      	blx	r3
  pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP);
  403464:	4c1c      	ldr	r4, [pc, #112]	; (4034d8 <task_led2+0x8c>)
  403466:	2301      	movs	r3, #1
  403468:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40346c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403470:	4620      	mov	r0, r4
  403472:	4e1a      	ldr	r6, [pc, #104]	; (4034dc <task_led2+0x90>)
  403474:	47b0      	blx	r6
  pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  403476:	4b1a      	ldr	r3, [pc, #104]	; (4034e0 <task_led2+0x94>)
  403478:	9300      	str	r3, [sp, #0]
  40347a:	2350      	movs	r3, #80	; 0x50
  40347c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403480:	210c      	movs	r1, #12
  403482:	4620      	mov	r0, r4
  403484:	4e17      	ldr	r6, [pc, #92]	; (4034e4 <task_led2+0x98>)
  403486:	47b0      	blx	r6
  pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  403488:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40348c:	4620      	mov	r0, r4
  40348e:	4b16      	ldr	r3, [pc, #88]	; (4034e8 <task_led2+0x9c>)
  403490:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403492:	4b16      	ldr	r3, [pc, #88]	; (4034ec <task_led2+0xa0>)
  403494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403498:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40349a:	2280      	movs	r2, #128	; 0x80
  40349c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  if (xSemaphore2 == NULL)
  4034a0:	682b      	ldr	r3, [r5, #0]
  4034a2:	b913      	cbnz	r3, 4034aa <task_led2+0x5e>
    printf("falha em criar o semaforo \n");
  4034a4:	4812      	ldr	r0, [pc, #72]	; (4034f0 <task_led2+0xa4>)
  4034a6:	4b13      	ldr	r3, [pc, #76]	; (4034f4 <task_led2+0xa8>)
  4034a8:	4798      	blx	r3
    if( xSemaphoreTake(xSemaphore2, ( TickType_t ) 500) == pdTRUE ){
  4034aa:	4e09      	ldr	r6, [pc, #36]	; (4034d0 <task_led2+0x84>)
  4034ac:	4d12      	ldr	r5, [pc, #72]	; (4034f8 <task_led2+0xac>)
        led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  4034ae:	4f0a      	ldr	r7, [pc, #40]	; (4034d8 <task_led2+0x8c>)
    if( xSemaphoreTake(xSemaphore2, ( TickType_t ) 500) == pdTRUE ){
  4034b0:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  4034b4:	4621      	mov	r1, r4
  4034b6:	6830      	ldr	r0, [r6, #0]
  4034b8:	47a8      	blx	r5
  4034ba:	2801      	cmp	r0, #1
  4034bc:	d1fa      	bne.n	4034b4 <task_led2+0x68>
        led_toggle(LED2_PIO,LED2_PIO_ID,LED2_PIO_IDX_MASK);
  4034be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4034c2:	210c      	movs	r1, #12
  4034c4:	4638      	mov	r0, r7
  4034c6:	4b0d      	ldr	r3, [pc, #52]	; (4034fc <task_led2+0xb0>)
  4034c8:	4798      	blx	r3
  4034ca:	e7f1      	b.n	4034b0 <task_led2+0x64>
  4034cc:	00401631 	.word	0x00401631
  4034d0:	20400c2c 	.word	0x20400c2c
  4034d4:	0040088d 	.word	0x0040088d
  4034d8:	400e1200 	.word	0x400e1200
  4034dc:	00400579 	.word	0x00400579
  4034e0:	00402efd 	.word	0x00402efd
  4034e4:	00400699 	.word	0x00400699
  4034e8:	0040063b 	.word	0x0040063b
  4034ec:	e000e100 	.word	0xe000e100
  4034f0:	00406db0 	.word	0x00406db0
  4034f4:	00403931 	.word	0x00403931
  4034f8:	00401c0d 	.word	0x00401c0d
  4034fc:	0040320d 	.word	0x0040320d

00403500 <task_led>:
static void task_led(void *pvParameters) {
  403500:	b580      	push	{r7, lr}
  403502:	b082      	sub	sp, #8
  xSemaphore = xSemaphoreCreateBinary();
  403504:	2203      	movs	r2, #3
  403506:	2100      	movs	r1, #0
  403508:	2001      	movs	r0, #1
  40350a:	4b1d      	ldr	r3, [pc, #116]	; (403580 <task_led+0x80>)
  40350c:	4798      	blx	r3
  40350e:	4d1d      	ldr	r5, [pc, #116]	; (403584 <task_led+0x84>)
  403510:	6028      	str	r0, [r5, #0]
  pmc_enable_periph_clk(BUT1_PIO_ID);
  403512:	2010      	movs	r0, #16
  403514:	4b1c      	ldr	r3, [pc, #112]	; (403588 <task_led+0x88>)
  403516:	4798      	blx	r3
  pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP);
  403518:	4c1c      	ldr	r4, [pc, #112]	; (40358c <task_led+0x8c>)
  40351a:	2301      	movs	r3, #1
  40351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403520:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403524:	4620      	mov	r0, r4
  403526:	4e1a      	ldr	r6, [pc, #104]	; (403590 <task_led+0x90>)
  403528:	47b0      	blx	r6
  pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  40352a:	4b1a      	ldr	r3, [pc, #104]	; (403594 <task_led+0x94>)
  40352c:	9300      	str	r3, [sp, #0]
  40352e:	2350      	movs	r3, #80	; 0x50
  403530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403534:	2110      	movs	r1, #16
  403536:	4620      	mov	r0, r4
  403538:	4e17      	ldr	r6, [pc, #92]	; (403598 <task_led+0x98>)
  40353a:	47b0      	blx	r6
  pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  40353c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403540:	4620      	mov	r0, r4
  403542:	4b16      	ldr	r3, [pc, #88]	; (40359c <task_led+0x9c>)
  403544:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403546:	4b16      	ldr	r3, [pc, #88]	; (4035a0 <task_led+0xa0>)
  403548:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40354c:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40354e:	2280      	movs	r2, #128	; 0x80
  403550:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  if (xSemaphore == NULL)
  403554:	682b      	ldr	r3, [r5, #0]
  403556:	b913      	cbnz	r3, 40355e <task_led+0x5e>
    printf("falha em criar o semaforo \n");
  403558:	4812      	ldr	r0, [pc, #72]	; (4035a4 <task_led+0xa4>)
  40355a:	4b13      	ldr	r3, [pc, #76]	; (4035a8 <task_led+0xa8>)
  40355c:	4798      	blx	r3
    if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  40355e:	4e09      	ldr	r6, [pc, #36]	; (403584 <task_led+0x84>)
  403560:	4d12      	ldr	r5, [pc, #72]	; (4035ac <task_led+0xac>)
        led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  403562:	4f13      	ldr	r7, [pc, #76]	; (4035b0 <task_led+0xb0>)
    if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  403564:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  403568:	4621      	mov	r1, r4
  40356a:	6830      	ldr	r0, [r6, #0]
  40356c:	47a8      	blx	r5
  40356e:	2801      	cmp	r0, #1
  403570:	d1fa      	bne.n	403568 <task_led+0x68>
        led_toggle(LED_PIO,LED_PIO_ID,LED_PIO_IDX_MASK);
  403572:	f44f 7280 	mov.w	r2, #256	; 0x100
  403576:	210c      	movs	r1, #12
  403578:	4638      	mov	r0, r7
  40357a:	4b0e      	ldr	r3, [pc, #56]	; (4035b4 <task_led+0xb4>)
  40357c:	4798      	blx	r3
  40357e:	e7f1      	b.n	403564 <task_led+0x64>
  403580:	00401631 	.word	0x00401631
  403584:	20400c24 	.word	0x20400c24
  403588:	0040088d 	.word	0x0040088d
  40358c:	400e1400 	.word	0x400e1400
  403590:	00400579 	.word	0x00400579
  403594:	00402ec5 	.word	0x00402ec5
  403598:	00400699 	.word	0x00400699
  40359c:	0040063b 	.word	0x0040063b
  4035a0:	e000e100 	.word	0xe000e100
  4035a4:	00406db0 	.word	0x00406db0
  4035a8:	00403931 	.word	0x00403931
  4035ac:	00401c0d 	.word	0x00401c0d
  4035b0:	400e1200 	.word	0x400e1200
  4035b4:	0040320d 	.word	0x0040320d

004035b8 <led_init>:
      }
    }
}

led_init(){
  4035b8:	b570      	push	{r4, r5, r6, lr}
  4035ba:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED1_PIO_ID);
  4035bc:	200a      	movs	r0, #10
  4035be:	4e0e      	ldr	r6, [pc, #56]	; (4035f8 <led_init+0x40>)
  4035c0:	47b0      	blx	r6
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  4035c2:	2400      	movs	r4, #0
  4035c4:	9400      	str	r4, [sp, #0]
  4035c6:	4623      	mov	r3, r4
  4035c8:	4622      	mov	r2, r4
  4035ca:	2101      	movs	r1, #1
  4035cc:	480b      	ldr	r0, [pc, #44]	; (4035fc <led_init+0x44>)
  4035ce:	4d0c      	ldr	r5, [pc, #48]	; (403600 <led_init+0x48>)
  4035d0:	47a8      	blx	r5

	pmc_enable_periph_clk(LED2_PIO_ID);
  4035d2:	200c      	movs	r0, #12
  4035d4:	47b0      	blx	r6
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  4035d6:	9400      	str	r4, [sp, #0]
  4035d8:	4623      	mov	r3, r4
  4035da:	4622      	mov	r2, r4
  4035dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035e0:	4808      	ldr	r0, [pc, #32]	; (403604 <led_init+0x4c>)
  4035e2:	47a8      	blx	r5

	pmc_enable_periph_clk(LED3_PIO_ID);
  4035e4:	200b      	movs	r0, #11
  4035e6:	47b0      	blx	r6
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);
  4035e8:	9400      	str	r4, [sp, #0]
  4035ea:	4623      	mov	r3, r4
  4035ec:	4622      	mov	r2, r4
  4035ee:	2104      	movs	r1, #4
  4035f0:	4805      	ldr	r0, [pc, #20]	; (403608 <led_init+0x50>)
  4035f2:	47a8      	blx	r5

}
  4035f4:	b002      	add	sp, #8
  4035f6:	bd70      	pop	{r4, r5, r6, pc}
  4035f8:	0040088d 	.word	0x0040088d
  4035fc:	400e0e00 	.word	0x400e0e00
  403600:	0040054f 	.word	0x0040054f
  403604:	400e1200 	.word	0x400e1200
  403608:	400e1000 	.word	0x400e1000

0040360c <USART1_Handler>:
  usart_enable_interrupt(USART1, US_IER_RXRDY);
  NVIC_SetPriority(ID_USART1, 4);
  NVIC_EnableIRQ(ID_USART1);
}

void USART1_Handler(void){
  40360c:	b570      	push	{r4, r5, r6, lr}
  40360e:	b082      	sub	sp, #8
  uint32_t ret = usart_get_status(USART1);
  403610:	480e      	ldr	r0, [pc, #56]	; (40364c <USART1_Handler+0x40>)
  403612:	4b0f      	ldr	r3, [pc, #60]	; (403650 <USART1_Handler+0x44>)
  403614:	4798      	blx	r3

  // Verifica por qual motivo entrou na interrupçcao?
  // RXRDY ou TXRDY

  //  Dados disponível para leitura
  if(ret & US_IER_RXRDY){
  403616:	f010 0f01 	tst.w	r0, #1
  40361a:	d101      	bne.n	403620 <USART1_Handler+0x14>
	  xQueueSendFromISR(xQueueChar,&c,0);
  // -  Transmissoa finalizada
  } else if(ret & US_IER_TXRDY){

  }
}
  40361c:	b002      	add	sp, #8
  40361e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  403620:	ac02      	add	r4, sp, #8
  403622:	2300      	movs	r3, #0
  403624:	f844 3d08 	str.w	r3, [r4, #-8]!
		while (usart_read(p_usart, &val));
  403628:	4e08      	ldr	r6, [pc, #32]	; (40364c <USART1_Handler+0x40>)
  40362a:	4d0a      	ldr	r5, [pc, #40]	; (403654 <USART1_Handler+0x48>)
  40362c:	4621      	mov	r1, r4
  40362e:	4630      	mov	r0, r6
  403630:	47a8      	blx	r5
  403632:	2800      	cmp	r0, #0
  403634:	d1fa      	bne.n	40362c <USART1_Handler+0x20>
		*data = (uint8_t)(val & 0xFF);
  403636:	a902      	add	r1, sp, #8
  403638:	9b00      	ldr	r3, [sp, #0]
  40363a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	  xQueueSendFromISR(xQueueChar,&c,0);
  40363e:	2300      	movs	r3, #0
  403640:	461a      	mov	r2, r3
  403642:	4805      	ldr	r0, [pc, #20]	; (403658 <USART1_Handler+0x4c>)
  403644:	6800      	ldr	r0, [r0, #0]
  403646:	4c05      	ldr	r4, [pc, #20]	; (40365c <USART1_Handler+0x50>)
  403648:	47a0      	blx	r4
}
  40364a:	e7e7      	b.n	40361c <USART1_Handler+0x10>
  40364c:	40028000 	.word	0x40028000
  403650:	00400c7d 	.word	0x00400c7d
  403654:	00400c97 	.word	0x00400c97
  403658:	20400c28 	.word	0x20400c28
  40365c:	0040187d 	.word	0x0040187d

00403660 <main>:
    while(*(pstring + i))
        if(uart_is_tx_empty(USART1))
            usart_serial_putchar(USART1, *(pstring+i++));
}

int main(void) {
  403660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403664:	b089      	sub	sp, #36	; 0x24
	
	  xQueueChar = xQueueCreate(32,sizeof(char));
  403666:	2200      	movs	r2, #0
  403668:	2101      	movs	r1, #1
  40366a:	2020      	movs	r0, #32
  40366c:	4c68      	ldr	r4, [pc, #416]	; (403810 <main+0x1b0>)
  40366e:	47a0      	blx	r4
  403670:	4b68      	ldr	r3, [pc, #416]	; (403814 <main+0x1b4>)
  403672:	6018      	str	r0, [r3, #0]
	  xQueueCommand = xQueueCreate(5,sizeof(char)*32);
  403674:	2200      	movs	r2, #0
  403676:	2120      	movs	r1, #32
  403678:	2005      	movs	r0, #5
  40367a:	47a0      	blx	r4
  40367c:	4b66      	ldr	r3, [pc, #408]	; (403818 <main+0x1b8>)
  40367e:	6018      	str	r0, [r3, #0]
	  
	/* Initialize the SAM system */
	sysclk_init();
  403680:	4b66      	ldr	r3, [pc, #408]	; (40381c <main+0x1bc>)
  403682:	4798      	blx	r3
	board_init();
  403684:	4b66      	ldr	r3, [pc, #408]	; (403820 <main+0x1c0>)
  403686:	4798      	blx	r3
	led_init();
  403688:	4b66      	ldr	r3, [pc, #408]	; (403824 <main+0x1c4>)
  40368a:	4798      	blx	r3
  40368c:	200b      	movs	r0, #11
  40368e:	f8df 823c 	ldr.w	r8, [pc, #572]	; 4038cc <main+0x26c>
  403692:	47c0      	blx	r8
  403694:	200a      	movs	r0, #10
  403696:	47c0      	blx	r8
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4); // RX
  403698:	2210      	movs	r2, #16
  40369a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40369e:	4862      	ldr	r0, [pc, #392]	; (403828 <main+0x1c8>)
  4036a0:	4c62      	ldr	r4, [pc, #392]	; (40382c <main+0x1cc>)
  4036a2:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  4036a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4036a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4036ac:	4860      	ldr	r0, [pc, #384]	; (403830 <main+0x1d0>)
  4036ae:	47a0      	blx	r4
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4036b0:	4a60      	ldr	r2, [pc, #384]	; (403834 <main+0x1d4>)
  4036b2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4036b6:	f043 0310 	orr.w	r3, r3, #16
  4036ba:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  4036be:	200e      	movs	r0, #14
  4036c0:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4036c2:	4b5d      	ldr	r3, [pc, #372]	; (403838 <main+0x1d8>)
  4036c4:	4a5d      	ldr	r2, [pc, #372]	; (40383c <main+0x1dc>)
  4036c6:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4036c8:	4e5d      	ldr	r6, [pc, #372]	; (403840 <main+0x1e0>)
  4036ca:	4f5e      	ldr	r7, [pc, #376]	; (403844 <main+0x1e4>)
  4036cc:	6037      	str	r7, [r6, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4036ce:	4d5e      	ldr	r5, [pc, #376]	; (403848 <main+0x1e8>)
  4036d0:	4b5e      	ldr	r3, [pc, #376]	; (40384c <main+0x1ec>)
  4036d2:	602b      	str	r3, [r5, #0]
	usart_settings.baudrate = opt->baudrate;
  4036d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4036d8:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  4036da:	23c0      	movs	r3, #192	; 0xc0
  4036dc:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  4036de:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4036e2:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  4036e4:	2400      	movs	r4, #0
  4036e6:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4036e8:	9406      	str	r4, [sp, #24]
  4036ea:	200e      	movs	r0, #14
  4036ec:	47c0      	blx	r8
		usart_init_rs232(p_usart, &usart_settings,
  4036ee:	4a58      	ldr	r2, [pc, #352]	; (403850 <main+0x1f0>)
  4036f0:	a902      	add	r1, sp, #8
  4036f2:	4852      	ldr	r0, [pc, #328]	; (40383c <main+0x1dc>)
  4036f4:	4b57      	ldr	r3, [pc, #348]	; (403854 <main+0x1f4>)
  4036f6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4036f8:	4850      	ldr	r0, [pc, #320]	; (40383c <main+0x1dc>)
  4036fa:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 4038d0 <main+0x270>
  4036fe:	47c8      	blx	r9
		usart_enable_rx(p_usart);
  403700:	484e      	ldr	r0, [pc, #312]	; (40383c <main+0x1dc>)
  403702:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 4038d4 <main+0x274>
  403706:	47c0      	blx	r8
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403708:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 4038d8 <main+0x278>
  40370c:	f8db 3000 	ldr.w	r3, [fp]
  403710:	4621      	mov	r1, r4
  403712:	6898      	ldr	r0, [r3, #8]
  403714:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 4038dc <main+0x27c>
  403718:	47d0      	blx	sl
	setbuf(stdin, NULL);
  40371a:	f8db 3000 	ldr.w	r3, [fp]
  40371e:	4621      	mov	r1, r4
  403720:	6858      	ldr	r0, [r3, #4]
  403722:	47d0      	blx	sl
  usart_enable_tx(USART1);
  403724:	4845      	ldr	r0, [pc, #276]	; (40383c <main+0x1dc>)
  403726:	47c8      	blx	r9
  usart_enable_rx(USART1);
  403728:	4844      	ldr	r0, [pc, #272]	; (40383c <main+0x1dc>)
  40372a:	47c0      	blx	r8
  ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40372c:	6037      	str	r7, [r6, #0]
  ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40372e:	4b47      	ldr	r3, [pc, #284]	; (40384c <main+0x1ec>)
  403730:	602b      	str	r3, [r5, #0]
  usart_enable_interrupt(USART1, US_IER_RXRDY);
  403732:	2101      	movs	r1, #1
  403734:	4841      	ldr	r0, [pc, #260]	; (40383c <main+0x1dc>)
  403736:	4b48      	ldr	r3, [pc, #288]	; (403858 <main+0x1f8>)
  403738:	4798      	blx	r3
  40373a:	4b48      	ldr	r3, [pc, #288]	; (40385c <main+0x1fc>)
  40373c:	2280      	movs	r2, #128	; 0x80
  40373e:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403746:	601a      	str	r2, [r3, #0]


	USART1_init();
	/* Output demo information. */
	printf("-- Freertos Example --\n\r");
  403748:	4845      	ldr	r0, [pc, #276]	; (403860 <main+0x200>)
  40374a:	4d46      	ldr	r5, [pc, #280]	; (403864 <main+0x204>)
  40374c:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  40374e:	4946      	ldr	r1, [pc, #280]	; (403868 <main+0x208>)
  403750:	4846      	ldr	r0, [pc, #280]	; (40386c <main+0x20c>)
  403752:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  403754:	4a46      	ldr	r2, [pc, #280]	; (403870 <main+0x210>)
  403756:	4947      	ldr	r1, [pc, #284]	; (403874 <main+0x214>)
  403758:	4847      	ldr	r0, [pc, #284]	; (403878 <main+0x218>)
  40375a:	47a8      	blx	r5
		//	TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Monitor task\r\n");
	//}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  40375c:	9401      	str	r4, [sp, #4]
  40375e:	9400      	str	r4, [sp, #0]
  403760:	4623      	mov	r3, r4
  403762:	f44f 7280 	mov.w	r2, #256	; 0x100
  403766:	4945      	ldr	r1, [pc, #276]	; (40387c <main+0x21c>)
  403768:	4845      	ldr	r0, [pc, #276]	; (403880 <main+0x220>)
  40376a:	4c46      	ldr	r4, [pc, #280]	; (403884 <main+0x224>)
  40376c:	47a0      	blx	r4
  40376e:	2801      	cmp	r0, #1
  403770:	d001      	beq.n	403776 <main+0x116>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  403772:	4845      	ldr	r0, [pc, #276]	; (403888 <main+0x228>)
  403774:	47a8      	blx	r5
	}
	if (xTaskCreate(task_led1, "Led1", TASK_LED1_STACK_SIZE, NULL, TASK_LED1_STACK_PRIORITY, NULL) != pdPASS) {
  403776:	2300      	movs	r3, #0
  403778:	9301      	str	r3, [sp, #4]
  40377a:	9300      	str	r3, [sp, #0]
  40377c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403780:	4942      	ldr	r1, [pc, #264]	; (40388c <main+0x22c>)
  403782:	4843      	ldr	r0, [pc, #268]	; (403890 <main+0x230>)
  403784:	4c3f      	ldr	r4, [pc, #252]	; (403884 <main+0x224>)
  403786:	47a0      	blx	r4
  403788:	2801      	cmp	r0, #1
  40378a:	d002      	beq.n	403792 <main+0x132>
		printf("Failed to create test led1 task\r\n");
  40378c:	4841      	ldr	r0, [pc, #260]	; (403894 <main+0x234>)
  40378e:	4b35      	ldr	r3, [pc, #212]	; (403864 <main+0x204>)
  403790:	4798      	blx	r3
	}
	if (xTaskCreate(task_led2, "Led2", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  403792:	2300      	movs	r3, #0
  403794:	9301      	str	r3, [sp, #4]
  403796:	9300      	str	r3, [sp, #0]
  403798:	f44f 7280 	mov.w	r2, #256	; 0x100
  40379c:	493e      	ldr	r1, [pc, #248]	; (403898 <main+0x238>)
  40379e:	483f      	ldr	r0, [pc, #252]	; (40389c <main+0x23c>)
  4037a0:	4c38      	ldr	r4, [pc, #224]	; (403884 <main+0x224>)
  4037a2:	47a0      	blx	r4
  4037a4:	2801      	cmp	r0, #1
  4037a6:	d002      	beq.n	4037ae <main+0x14e>
		printf("Failed to create test led2 task\r\n");
  4037a8:	483d      	ldr	r0, [pc, #244]	; (4038a0 <main+0x240>)
  4037aa:	4b2e      	ldr	r3, [pc, #184]	; (403864 <main+0x204>)
  4037ac:	4798      	blx	r3
	}
	if (xTaskCreate(task_led3, "Led3", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  4037ae:	2300      	movs	r3, #0
  4037b0:	9301      	str	r3, [sp, #4]
  4037b2:	9300      	str	r3, [sp, #0]
  4037b4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4037b8:	493a      	ldr	r1, [pc, #232]	; (4038a4 <main+0x244>)
  4037ba:	483b      	ldr	r0, [pc, #236]	; (4038a8 <main+0x248>)
  4037bc:	4c31      	ldr	r4, [pc, #196]	; (403884 <main+0x224>)
  4037be:	47a0      	blx	r4
  4037c0:	2801      	cmp	r0, #1
  4037c2:	d002      	beq.n	4037ca <main+0x16a>
		printf("Failed to create test led3 task\r\n");
  4037c4:	4839      	ldr	r0, [pc, #228]	; (4038ac <main+0x24c>)
  4037c6:	4b27      	ldr	r3, [pc, #156]	; (403864 <main+0x204>)
  4037c8:	4798      	blx	r3
	}
  if (xTaskCreate(task_uartRX, "uart_rx", TASK_UARTRX_STACK_SIZE, NULL, TASK_UARTRX_STACK_PRIORITY, NULL) != pdPASS) {
  4037ca:	2300      	movs	r3, #0
  4037cc:	9301      	str	r3, [sp, #4]
  4037ce:	9300      	str	r3, [sp, #0]
  4037d0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4037d4:	4936      	ldr	r1, [pc, #216]	; (4038b0 <main+0x250>)
  4037d6:	4837      	ldr	r0, [pc, #220]	; (4038b4 <main+0x254>)
  4037d8:	4c2a      	ldr	r4, [pc, #168]	; (403884 <main+0x224>)
  4037da:	47a0      	blx	r4
  4037dc:	2801      	cmp	r0, #1
  4037de:	d002      	beq.n	4037e6 <main+0x186>
        printf("Falha ao criar task_uartRX\r\n");
  4037e0:	4835      	ldr	r0, [pc, #212]	; (4038b8 <main+0x258>)
  4037e2:	4b20      	ldr	r3, [pc, #128]	; (403864 <main+0x204>)
  4037e4:	4798      	blx	r3
  }

  if (xTaskCreate(task_execute, "execute", TASK_EXECUTE_STACK_SIZE, NULL, TASK_EXECUTE_STACK_PRIORITY, NULL) != pdPASS) {
  4037e6:	2300      	movs	r3, #0
  4037e8:	9301      	str	r3, [sp, #4]
  4037ea:	9300      	str	r3, [sp, #0]
  4037ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4037f0:	4932      	ldr	r1, [pc, #200]	; (4038bc <main+0x25c>)
  4037f2:	4833      	ldr	r0, [pc, #204]	; (4038c0 <main+0x260>)
  4037f4:	4c23      	ldr	r4, [pc, #140]	; (403884 <main+0x224>)
  4037f6:	47a0      	blx	r4
  4037f8:	2801      	cmp	r0, #1
  4037fa:	d002      	beq.n	403802 <main+0x1a2>
        printf("Falha ao criar task_execute\r\n");
  4037fc:	4831      	ldr	r0, [pc, #196]	; (4038c4 <main+0x264>)
  4037fe:	4b19      	ldr	r3, [pc, #100]	; (403864 <main+0x204>)
  403800:	4798      	blx	r3
  }
	/* Start the scheduler. */
	vTaskStartScheduler();
  403802:	4b31      	ldr	r3, [pc, #196]	; (4038c8 <main+0x268>)
  403804:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  403806:	2000      	movs	r0, #0
  403808:	b009      	add	sp, #36	; 0x24
  40380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40380e:	bf00      	nop
  403810:	00401631 	.word	0x00401631
  403814:	20400c28 	.word	0x20400c28
  403818:	20400c30 	.word	0x20400c30
  40381c:	004001d5 	.word	0x004001d5
  403820:	004002d1 	.word	0x004002d1
  403824:	004035b9 	.word	0x004035b9
  403828:	400e1000 	.word	0x400e1000
  40382c:	00400487 	.word	0x00400487
  403830:	400e0e00 	.word	0x400e0e00
  403834:	40088000 	.word	0x40088000
  403838:	20400bdc 	.word	0x20400bdc
  40383c:	40028000 	.word	0x40028000
  403840:	20400bd8 	.word	0x20400bd8
  403844:	00403049 	.word	0x00403049
  403848:	20400bd4 	.word	0x20400bd4
  40384c:	00402f6d 	.word	0x00402f6d
  403850:	08f0d180 	.word	0x08f0d180
  403854:	00400c19 	.word	0x00400c19
  403858:	00400c79 	.word	0x00400c79
  40385c:	e000e100 	.word	0xe000e100
  403860:	00406bb0 	.word	0x00406bb0
  403864:	00403931 	.word	0x00403931
  403868:	00406bcc 	.word	0x00406bcc
  40386c:	00406bd8 	.word	0x00406bd8
  403870:	00406be0 	.word	0x00406be0
  403874:	00406bec 	.word	0x00406bec
  403878:	00406bf8 	.word	0x00406bf8
  40387c:	00406c10 	.word	0x00406c10
  403880:	00403501 	.word	0x00403501
  403884:	00401ff1 	.word	0x00401ff1
  403888:	00406c14 	.word	0x00406c14
  40388c:	00406c38 	.word	0x00406c38
  403890:	00403189 	.word	0x00403189
  403894:	00406c40 	.word	0x00406c40
  403898:	00406c64 	.word	0x00406c64
  40389c:	0040344d 	.word	0x0040344d
  4038a0:	00406c6c 	.word	0x00406c6c
  4038a4:	00406c90 	.word	0x00406c90
  4038a8:	00403395 	.word	0x00403395
  4038ac:	00406c98 	.word	0x00406c98
  4038b0:	00406cbc 	.word	0x00406cbc
  4038b4:	0040311d 	.word	0x0040311d
  4038b8:	00406cc4 	.word	0x00406cc4
  4038bc:	00406ce4 	.word	0x00406ce4
  4038c0:	00403239 	.word	0x00403239
  4038c4:	00406cec 	.word	0x00406cec
  4038c8:	004021e5 	.word	0x004021e5
  4038cc:	0040088d 	.word	0x0040088d
  4038d0:	00400c6d 	.word	0x00400c6d
  4038d4:	00400c73 	.word	0x00400c73
  4038d8:	2040000c 	.word	0x2040000c
  4038dc:	004040e5 	.word	0x004040e5

004038e0 <__libc_init_array>:
  4038e0:	b570      	push	{r4, r5, r6, lr}
  4038e2:	4e0f      	ldr	r6, [pc, #60]	; (403920 <__libc_init_array+0x40>)
  4038e4:	4d0f      	ldr	r5, [pc, #60]	; (403924 <__libc_init_array+0x44>)
  4038e6:	1b76      	subs	r6, r6, r5
  4038e8:	10b6      	asrs	r6, r6, #2
  4038ea:	bf18      	it	ne
  4038ec:	2400      	movne	r4, #0
  4038ee:	d005      	beq.n	4038fc <__libc_init_array+0x1c>
  4038f0:	3401      	adds	r4, #1
  4038f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4038f6:	4798      	blx	r3
  4038f8:	42a6      	cmp	r6, r4
  4038fa:	d1f9      	bne.n	4038f0 <__libc_init_array+0x10>
  4038fc:	4e0a      	ldr	r6, [pc, #40]	; (403928 <__libc_init_array+0x48>)
  4038fe:	4d0b      	ldr	r5, [pc, #44]	; (40392c <__libc_init_array+0x4c>)
  403900:	1b76      	subs	r6, r6, r5
  403902:	f003 fb2b 	bl	406f5c <_init>
  403906:	10b6      	asrs	r6, r6, #2
  403908:	bf18      	it	ne
  40390a:	2400      	movne	r4, #0
  40390c:	d006      	beq.n	40391c <__libc_init_array+0x3c>
  40390e:	3401      	adds	r4, #1
  403910:	f855 3b04 	ldr.w	r3, [r5], #4
  403914:	4798      	blx	r3
  403916:	42a6      	cmp	r6, r4
  403918:	d1f9      	bne.n	40390e <__libc_init_array+0x2e>
  40391a:	bd70      	pop	{r4, r5, r6, pc}
  40391c:	bd70      	pop	{r4, r5, r6, pc}
  40391e:	bf00      	nop
  403920:	00406f68 	.word	0x00406f68
  403924:	00406f68 	.word	0x00406f68
  403928:	00406f70 	.word	0x00406f70
  40392c:	00406f68 	.word	0x00406f68

00403930 <iprintf>:
  403930:	b40f      	push	{r0, r1, r2, r3}
  403932:	b500      	push	{lr}
  403934:	4907      	ldr	r1, [pc, #28]	; (403954 <iprintf+0x24>)
  403936:	b083      	sub	sp, #12
  403938:	ab04      	add	r3, sp, #16
  40393a:	6808      	ldr	r0, [r1, #0]
  40393c:	f853 2b04 	ldr.w	r2, [r3], #4
  403940:	6881      	ldr	r1, [r0, #8]
  403942:	9301      	str	r3, [sp, #4]
  403944:	f000 feca 	bl	4046dc <_vfiprintf_r>
  403948:	b003      	add	sp, #12
  40394a:	f85d eb04 	ldr.w	lr, [sp], #4
  40394e:	b004      	add	sp, #16
  403950:	4770      	bx	lr
  403952:	bf00      	nop
  403954:	2040000c 	.word	0x2040000c

00403958 <malloc>:
  403958:	4b02      	ldr	r3, [pc, #8]	; (403964 <malloc+0xc>)
  40395a:	4601      	mov	r1, r0
  40395c:	6818      	ldr	r0, [r3, #0]
  40395e:	f000 b80b 	b.w	403978 <_malloc_r>
  403962:	bf00      	nop
  403964:	2040000c 	.word	0x2040000c

00403968 <free>:
  403968:	4b02      	ldr	r3, [pc, #8]	; (403974 <free+0xc>)
  40396a:	4601      	mov	r1, r0
  40396c:	6818      	ldr	r0, [r3, #0]
  40396e:	f001 bfd1 	b.w	405914 <_free_r>
  403972:	bf00      	nop
  403974:	2040000c 	.word	0x2040000c

00403978 <_malloc_r>:
  403978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40397c:	f101 060b 	add.w	r6, r1, #11
  403980:	2e16      	cmp	r6, #22
  403982:	b083      	sub	sp, #12
  403984:	4605      	mov	r5, r0
  403986:	f240 809e 	bls.w	403ac6 <_malloc_r+0x14e>
  40398a:	f036 0607 	bics.w	r6, r6, #7
  40398e:	f100 80bd 	bmi.w	403b0c <_malloc_r+0x194>
  403992:	42b1      	cmp	r1, r6
  403994:	f200 80ba 	bhi.w	403b0c <_malloc_r+0x194>
  403998:	f000 fb86 	bl	4040a8 <__malloc_lock>
  40399c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4039a0:	f0c0 8293 	bcc.w	403eca <_malloc_r+0x552>
  4039a4:	0a73      	lsrs	r3, r6, #9
  4039a6:	f000 80b8 	beq.w	403b1a <_malloc_r+0x1a2>
  4039aa:	2b04      	cmp	r3, #4
  4039ac:	f200 8179 	bhi.w	403ca2 <_malloc_r+0x32a>
  4039b0:	09b3      	lsrs	r3, r6, #6
  4039b2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4039b6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4039ba:	00c3      	lsls	r3, r0, #3
  4039bc:	4fbf      	ldr	r7, [pc, #764]	; (403cbc <_malloc_r+0x344>)
  4039be:	443b      	add	r3, r7
  4039c0:	f1a3 0108 	sub.w	r1, r3, #8
  4039c4:	685c      	ldr	r4, [r3, #4]
  4039c6:	42a1      	cmp	r1, r4
  4039c8:	d106      	bne.n	4039d8 <_malloc_r+0x60>
  4039ca:	e00c      	b.n	4039e6 <_malloc_r+0x6e>
  4039cc:	2a00      	cmp	r2, #0
  4039ce:	f280 80aa 	bge.w	403b26 <_malloc_r+0x1ae>
  4039d2:	68e4      	ldr	r4, [r4, #12]
  4039d4:	42a1      	cmp	r1, r4
  4039d6:	d006      	beq.n	4039e6 <_malloc_r+0x6e>
  4039d8:	6863      	ldr	r3, [r4, #4]
  4039da:	f023 0303 	bic.w	r3, r3, #3
  4039de:	1b9a      	subs	r2, r3, r6
  4039e0:	2a0f      	cmp	r2, #15
  4039e2:	ddf3      	ble.n	4039cc <_malloc_r+0x54>
  4039e4:	4670      	mov	r0, lr
  4039e6:	693c      	ldr	r4, [r7, #16]
  4039e8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403cd0 <_malloc_r+0x358>
  4039ec:	4574      	cmp	r4, lr
  4039ee:	f000 81ab 	beq.w	403d48 <_malloc_r+0x3d0>
  4039f2:	6863      	ldr	r3, [r4, #4]
  4039f4:	f023 0303 	bic.w	r3, r3, #3
  4039f8:	1b9a      	subs	r2, r3, r6
  4039fa:	2a0f      	cmp	r2, #15
  4039fc:	f300 8190 	bgt.w	403d20 <_malloc_r+0x3a8>
  403a00:	2a00      	cmp	r2, #0
  403a02:	f8c7 e014 	str.w	lr, [r7, #20]
  403a06:	f8c7 e010 	str.w	lr, [r7, #16]
  403a0a:	f280 809d 	bge.w	403b48 <_malloc_r+0x1d0>
  403a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403a12:	f080 8161 	bcs.w	403cd8 <_malloc_r+0x360>
  403a16:	08db      	lsrs	r3, r3, #3
  403a18:	f103 0c01 	add.w	ip, r3, #1
  403a1c:	1099      	asrs	r1, r3, #2
  403a1e:	687a      	ldr	r2, [r7, #4]
  403a20:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403a24:	f8c4 8008 	str.w	r8, [r4, #8]
  403a28:	2301      	movs	r3, #1
  403a2a:	408b      	lsls	r3, r1
  403a2c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403a30:	4313      	orrs	r3, r2
  403a32:	3908      	subs	r1, #8
  403a34:	60e1      	str	r1, [r4, #12]
  403a36:	607b      	str	r3, [r7, #4]
  403a38:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403a3c:	f8c8 400c 	str.w	r4, [r8, #12]
  403a40:	1082      	asrs	r2, r0, #2
  403a42:	2401      	movs	r4, #1
  403a44:	4094      	lsls	r4, r2
  403a46:	429c      	cmp	r4, r3
  403a48:	f200 808b 	bhi.w	403b62 <_malloc_r+0x1ea>
  403a4c:	421c      	tst	r4, r3
  403a4e:	d106      	bne.n	403a5e <_malloc_r+0xe6>
  403a50:	f020 0003 	bic.w	r0, r0, #3
  403a54:	0064      	lsls	r4, r4, #1
  403a56:	421c      	tst	r4, r3
  403a58:	f100 0004 	add.w	r0, r0, #4
  403a5c:	d0fa      	beq.n	403a54 <_malloc_r+0xdc>
  403a5e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403a62:	46cc      	mov	ip, r9
  403a64:	4680      	mov	r8, r0
  403a66:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403a6a:	459c      	cmp	ip, r3
  403a6c:	d107      	bne.n	403a7e <_malloc_r+0x106>
  403a6e:	e16d      	b.n	403d4c <_malloc_r+0x3d4>
  403a70:	2a00      	cmp	r2, #0
  403a72:	f280 817b 	bge.w	403d6c <_malloc_r+0x3f4>
  403a76:	68db      	ldr	r3, [r3, #12]
  403a78:	459c      	cmp	ip, r3
  403a7a:	f000 8167 	beq.w	403d4c <_malloc_r+0x3d4>
  403a7e:	6859      	ldr	r1, [r3, #4]
  403a80:	f021 0103 	bic.w	r1, r1, #3
  403a84:	1b8a      	subs	r2, r1, r6
  403a86:	2a0f      	cmp	r2, #15
  403a88:	ddf2      	ble.n	403a70 <_malloc_r+0xf8>
  403a8a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403a8e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403a92:	9300      	str	r3, [sp, #0]
  403a94:	199c      	adds	r4, r3, r6
  403a96:	4628      	mov	r0, r5
  403a98:	f046 0601 	orr.w	r6, r6, #1
  403a9c:	f042 0501 	orr.w	r5, r2, #1
  403aa0:	605e      	str	r6, [r3, #4]
  403aa2:	f8c8 c00c 	str.w	ip, [r8, #12]
  403aa6:	f8cc 8008 	str.w	r8, [ip, #8]
  403aaa:	617c      	str	r4, [r7, #20]
  403aac:	613c      	str	r4, [r7, #16]
  403aae:	f8c4 e00c 	str.w	lr, [r4, #12]
  403ab2:	f8c4 e008 	str.w	lr, [r4, #8]
  403ab6:	6065      	str	r5, [r4, #4]
  403ab8:	505a      	str	r2, [r3, r1]
  403aba:	f000 fafb 	bl	4040b4 <__malloc_unlock>
  403abe:	9b00      	ldr	r3, [sp, #0]
  403ac0:	f103 0408 	add.w	r4, r3, #8
  403ac4:	e01e      	b.n	403b04 <_malloc_r+0x18c>
  403ac6:	2910      	cmp	r1, #16
  403ac8:	d820      	bhi.n	403b0c <_malloc_r+0x194>
  403aca:	f000 faed 	bl	4040a8 <__malloc_lock>
  403ace:	2610      	movs	r6, #16
  403ad0:	2318      	movs	r3, #24
  403ad2:	2002      	movs	r0, #2
  403ad4:	4f79      	ldr	r7, [pc, #484]	; (403cbc <_malloc_r+0x344>)
  403ad6:	443b      	add	r3, r7
  403ad8:	f1a3 0208 	sub.w	r2, r3, #8
  403adc:	685c      	ldr	r4, [r3, #4]
  403ade:	4294      	cmp	r4, r2
  403ae0:	f000 813d 	beq.w	403d5e <_malloc_r+0x3e6>
  403ae4:	6863      	ldr	r3, [r4, #4]
  403ae6:	68e1      	ldr	r1, [r4, #12]
  403ae8:	68a6      	ldr	r6, [r4, #8]
  403aea:	f023 0303 	bic.w	r3, r3, #3
  403aee:	4423      	add	r3, r4
  403af0:	4628      	mov	r0, r5
  403af2:	685a      	ldr	r2, [r3, #4]
  403af4:	60f1      	str	r1, [r6, #12]
  403af6:	f042 0201 	orr.w	r2, r2, #1
  403afa:	608e      	str	r6, [r1, #8]
  403afc:	605a      	str	r2, [r3, #4]
  403afe:	f000 fad9 	bl	4040b4 <__malloc_unlock>
  403b02:	3408      	adds	r4, #8
  403b04:	4620      	mov	r0, r4
  403b06:	b003      	add	sp, #12
  403b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b0c:	2400      	movs	r4, #0
  403b0e:	230c      	movs	r3, #12
  403b10:	4620      	mov	r0, r4
  403b12:	602b      	str	r3, [r5, #0]
  403b14:	b003      	add	sp, #12
  403b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b1a:	2040      	movs	r0, #64	; 0x40
  403b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403b20:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403b24:	e74a      	b.n	4039bc <_malloc_r+0x44>
  403b26:	4423      	add	r3, r4
  403b28:	68e1      	ldr	r1, [r4, #12]
  403b2a:	685a      	ldr	r2, [r3, #4]
  403b2c:	68a6      	ldr	r6, [r4, #8]
  403b2e:	f042 0201 	orr.w	r2, r2, #1
  403b32:	60f1      	str	r1, [r6, #12]
  403b34:	4628      	mov	r0, r5
  403b36:	608e      	str	r6, [r1, #8]
  403b38:	605a      	str	r2, [r3, #4]
  403b3a:	f000 fabb 	bl	4040b4 <__malloc_unlock>
  403b3e:	3408      	adds	r4, #8
  403b40:	4620      	mov	r0, r4
  403b42:	b003      	add	sp, #12
  403b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b48:	4423      	add	r3, r4
  403b4a:	4628      	mov	r0, r5
  403b4c:	685a      	ldr	r2, [r3, #4]
  403b4e:	f042 0201 	orr.w	r2, r2, #1
  403b52:	605a      	str	r2, [r3, #4]
  403b54:	f000 faae 	bl	4040b4 <__malloc_unlock>
  403b58:	3408      	adds	r4, #8
  403b5a:	4620      	mov	r0, r4
  403b5c:	b003      	add	sp, #12
  403b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b62:	68bc      	ldr	r4, [r7, #8]
  403b64:	6863      	ldr	r3, [r4, #4]
  403b66:	f023 0803 	bic.w	r8, r3, #3
  403b6a:	45b0      	cmp	r8, r6
  403b6c:	d304      	bcc.n	403b78 <_malloc_r+0x200>
  403b6e:	eba8 0306 	sub.w	r3, r8, r6
  403b72:	2b0f      	cmp	r3, #15
  403b74:	f300 8085 	bgt.w	403c82 <_malloc_r+0x30a>
  403b78:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403cd4 <_malloc_r+0x35c>
  403b7c:	4b50      	ldr	r3, [pc, #320]	; (403cc0 <_malloc_r+0x348>)
  403b7e:	f8d9 2000 	ldr.w	r2, [r9]
  403b82:	681b      	ldr	r3, [r3, #0]
  403b84:	3201      	adds	r2, #1
  403b86:	4433      	add	r3, r6
  403b88:	eb04 0a08 	add.w	sl, r4, r8
  403b8c:	f000 8155 	beq.w	403e3a <_malloc_r+0x4c2>
  403b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403b94:	330f      	adds	r3, #15
  403b96:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403b9a:	f02b 0b0f 	bic.w	fp, fp, #15
  403b9e:	4659      	mov	r1, fp
  403ba0:	4628      	mov	r0, r5
  403ba2:	f000 fa8d 	bl	4040c0 <_sbrk_r>
  403ba6:	1c41      	adds	r1, r0, #1
  403ba8:	4602      	mov	r2, r0
  403baa:	f000 80fc 	beq.w	403da6 <_malloc_r+0x42e>
  403bae:	4582      	cmp	sl, r0
  403bb0:	f200 80f7 	bhi.w	403da2 <_malloc_r+0x42a>
  403bb4:	4b43      	ldr	r3, [pc, #268]	; (403cc4 <_malloc_r+0x34c>)
  403bb6:	6819      	ldr	r1, [r3, #0]
  403bb8:	4459      	add	r1, fp
  403bba:	6019      	str	r1, [r3, #0]
  403bbc:	f000 814d 	beq.w	403e5a <_malloc_r+0x4e2>
  403bc0:	f8d9 0000 	ldr.w	r0, [r9]
  403bc4:	3001      	adds	r0, #1
  403bc6:	bf1b      	ittet	ne
  403bc8:	eba2 0a0a 	subne.w	sl, r2, sl
  403bcc:	4451      	addne	r1, sl
  403bce:	f8c9 2000 	streq.w	r2, [r9]
  403bd2:	6019      	strne	r1, [r3, #0]
  403bd4:	f012 0107 	ands.w	r1, r2, #7
  403bd8:	f000 8115 	beq.w	403e06 <_malloc_r+0x48e>
  403bdc:	f1c1 0008 	rsb	r0, r1, #8
  403be0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403be4:	4402      	add	r2, r0
  403be6:	3108      	adds	r1, #8
  403be8:	eb02 090b 	add.w	r9, r2, fp
  403bec:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403bf0:	eba1 0909 	sub.w	r9, r1, r9
  403bf4:	4649      	mov	r1, r9
  403bf6:	4628      	mov	r0, r5
  403bf8:	9301      	str	r3, [sp, #4]
  403bfa:	9200      	str	r2, [sp, #0]
  403bfc:	f000 fa60 	bl	4040c0 <_sbrk_r>
  403c00:	1c43      	adds	r3, r0, #1
  403c02:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403c06:	f000 8143 	beq.w	403e90 <_malloc_r+0x518>
  403c0a:	1a80      	subs	r0, r0, r2
  403c0c:	4448      	add	r0, r9
  403c0e:	f040 0001 	orr.w	r0, r0, #1
  403c12:	6819      	ldr	r1, [r3, #0]
  403c14:	60ba      	str	r2, [r7, #8]
  403c16:	4449      	add	r1, r9
  403c18:	42bc      	cmp	r4, r7
  403c1a:	6050      	str	r0, [r2, #4]
  403c1c:	6019      	str	r1, [r3, #0]
  403c1e:	d017      	beq.n	403c50 <_malloc_r+0x2d8>
  403c20:	f1b8 0f0f 	cmp.w	r8, #15
  403c24:	f240 80fb 	bls.w	403e1e <_malloc_r+0x4a6>
  403c28:	6860      	ldr	r0, [r4, #4]
  403c2a:	f1a8 020c 	sub.w	r2, r8, #12
  403c2e:	f022 0207 	bic.w	r2, r2, #7
  403c32:	eb04 0e02 	add.w	lr, r4, r2
  403c36:	f000 0001 	and.w	r0, r0, #1
  403c3a:	f04f 0c05 	mov.w	ip, #5
  403c3e:	4310      	orrs	r0, r2
  403c40:	2a0f      	cmp	r2, #15
  403c42:	6060      	str	r0, [r4, #4]
  403c44:	f8ce c004 	str.w	ip, [lr, #4]
  403c48:	f8ce c008 	str.w	ip, [lr, #8]
  403c4c:	f200 8117 	bhi.w	403e7e <_malloc_r+0x506>
  403c50:	4b1d      	ldr	r3, [pc, #116]	; (403cc8 <_malloc_r+0x350>)
  403c52:	68bc      	ldr	r4, [r7, #8]
  403c54:	681a      	ldr	r2, [r3, #0]
  403c56:	4291      	cmp	r1, r2
  403c58:	bf88      	it	hi
  403c5a:	6019      	strhi	r1, [r3, #0]
  403c5c:	4b1b      	ldr	r3, [pc, #108]	; (403ccc <_malloc_r+0x354>)
  403c5e:	681a      	ldr	r2, [r3, #0]
  403c60:	4291      	cmp	r1, r2
  403c62:	6862      	ldr	r2, [r4, #4]
  403c64:	bf88      	it	hi
  403c66:	6019      	strhi	r1, [r3, #0]
  403c68:	f022 0203 	bic.w	r2, r2, #3
  403c6c:	4296      	cmp	r6, r2
  403c6e:	eba2 0306 	sub.w	r3, r2, r6
  403c72:	d801      	bhi.n	403c78 <_malloc_r+0x300>
  403c74:	2b0f      	cmp	r3, #15
  403c76:	dc04      	bgt.n	403c82 <_malloc_r+0x30a>
  403c78:	4628      	mov	r0, r5
  403c7a:	f000 fa1b 	bl	4040b4 <__malloc_unlock>
  403c7e:	2400      	movs	r4, #0
  403c80:	e740      	b.n	403b04 <_malloc_r+0x18c>
  403c82:	19a2      	adds	r2, r4, r6
  403c84:	f043 0301 	orr.w	r3, r3, #1
  403c88:	f046 0601 	orr.w	r6, r6, #1
  403c8c:	6066      	str	r6, [r4, #4]
  403c8e:	4628      	mov	r0, r5
  403c90:	60ba      	str	r2, [r7, #8]
  403c92:	6053      	str	r3, [r2, #4]
  403c94:	f000 fa0e 	bl	4040b4 <__malloc_unlock>
  403c98:	3408      	adds	r4, #8
  403c9a:	4620      	mov	r0, r4
  403c9c:	b003      	add	sp, #12
  403c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ca2:	2b14      	cmp	r3, #20
  403ca4:	d971      	bls.n	403d8a <_malloc_r+0x412>
  403ca6:	2b54      	cmp	r3, #84	; 0x54
  403ca8:	f200 80a3 	bhi.w	403df2 <_malloc_r+0x47a>
  403cac:	0b33      	lsrs	r3, r6, #12
  403cae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403cb2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403cb6:	00c3      	lsls	r3, r0, #3
  403cb8:	e680      	b.n	4039bc <_malloc_r+0x44>
  403cba:	bf00      	nop
  403cbc:	20400438 	.word	0x20400438
  403cc0:	20400bd0 	.word	0x20400bd0
  403cc4:	20400ba0 	.word	0x20400ba0
  403cc8:	20400bc8 	.word	0x20400bc8
  403ccc:	20400bcc 	.word	0x20400bcc
  403cd0:	20400440 	.word	0x20400440
  403cd4:	20400840 	.word	0x20400840
  403cd8:	0a5a      	lsrs	r2, r3, #9
  403cda:	2a04      	cmp	r2, #4
  403cdc:	d95b      	bls.n	403d96 <_malloc_r+0x41e>
  403cde:	2a14      	cmp	r2, #20
  403ce0:	f200 80ae 	bhi.w	403e40 <_malloc_r+0x4c8>
  403ce4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403ce8:	00c9      	lsls	r1, r1, #3
  403cea:	325b      	adds	r2, #91	; 0x5b
  403cec:	eb07 0c01 	add.w	ip, r7, r1
  403cf0:	5879      	ldr	r1, [r7, r1]
  403cf2:	f1ac 0c08 	sub.w	ip, ip, #8
  403cf6:	458c      	cmp	ip, r1
  403cf8:	f000 8088 	beq.w	403e0c <_malloc_r+0x494>
  403cfc:	684a      	ldr	r2, [r1, #4]
  403cfe:	f022 0203 	bic.w	r2, r2, #3
  403d02:	4293      	cmp	r3, r2
  403d04:	d273      	bcs.n	403dee <_malloc_r+0x476>
  403d06:	6889      	ldr	r1, [r1, #8]
  403d08:	458c      	cmp	ip, r1
  403d0a:	d1f7      	bne.n	403cfc <_malloc_r+0x384>
  403d0c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403d10:	687b      	ldr	r3, [r7, #4]
  403d12:	60e2      	str	r2, [r4, #12]
  403d14:	f8c4 c008 	str.w	ip, [r4, #8]
  403d18:	6094      	str	r4, [r2, #8]
  403d1a:	f8cc 400c 	str.w	r4, [ip, #12]
  403d1e:	e68f      	b.n	403a40 <_malloc_r+0xc8>
  403d20:	19a1      	adds	r1, r4, r6
  403d22:	f046 0c01 	orr.w	ip, r6, #1
  403d26:	f042 0601 	orr.w	r6, r2, #1
  403d2a:	f8c4 c004 	str.w	ip, [r4, #4]
  403d2e:	4628      	mov	r0, r5
  403d30:	6179      	str	r1, [r7, #20]
  403d32:	6139      	str	r1, [r7, #16]
  403d34:	f8c1 e00c 	str.w	lr, [r1, #12]
  403d38:	f8c1 e008 	str.w	lr, [r1, #8]
  403d3c:	604e      	str	r6, [r1, #4]
  403d3e:	50e2      	str	r2, [r4, r3]
  403d40:	f000 f9b8 	bl	4040b4 <__malloc_unlock>
  403d44:	3408      	adds	r4, #8
  403d46:	e6dd      	b.n	403b04 <_malloc_r+0x18c>
  403d48:	687b      	ldr	r3, [r7, #4]
  403d4a:	e679      	b.n	403a40 <_malloc_r+0xc8>
  403d4c:	f108 0801 	add.w	r8, r8, #1
  403d50:	f018 0f03 	tst.w	r8, #3
  403d54:	f10c 0c08 	add.w	ip, ip, #8
  403d58:	f47f ae85 	bne.w	403a66 <_malloc_r+0xee>
  403d5c:	e02d      	b.n	403dba <_malloc_r+0x442>
  403d5e:	68dc      	ldr	r4, [r3, #12]
  403d60:	42a3      	cmp	r3, r4
  403d62:	bf08      	it	eq
  403d64:	3002      	addeq	r0, #2
  403d66:	f43f ae3e 	beq.w	4039e6 <_malloc_r+0x6e>
  403d6a:	e6bb      	b.n	403ae4 <_malloc_r+0x16c>
  403d6c:	4419      	add	r1, r3
  403d6e:	461c      	mov	r4, r3
  403d70:	684a      	ldr	r2, [r1, #4]
  403d72:	68db      	ldr	r3, [r3, #12]
  403d74:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403d78:	f042 0201 	orr.w	r2, r2, #1
  403d7c:	604a      	str	r2, [r1, #4]
  403d7e:	4628      	mov	r0, r5
  403d80:	60f3      	str	r3, [r6, #12]
  403d82:	609e      	str	r6, [r3, #8]
  403d84:	f000 f996 	bl	4040b4 <__malloc_unlock>
  403d88:	e6bc      	b.n	403b04 <_malloc_r+0x18c>
  403d8a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403d8e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403d92:	00c3      	lsls	r3, r0, #3
  403d94:	e612      	b.n	4039bc <_malloc_r+0x44>
  403d96:	099a      	lsrs	r2, r3, #6
  403d98:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403d9c:	00c9      	lsls	r1, r1, #3
  403d9e:	3238      	adds	r2, #56	; 0x38
  403da0:	e7a4      	b.n	403cec <_malloc_r+0x374>
  403da2:	42bc      	cmp	r4, r7
  403da4:	d054      	beq.n	403e50 <_malloc_r+0x4d8>
  403da6:	68bc      	ldr	r4, [r7, #8]
  403da8:	6862      	ldr	r2, [r4, #4]
  403daa:	f022 0203 	bic.w	r2, r2, #3
  403dae:	e75d      	b.n	403c6c <_malloc_r+0x2f4>
  403db0:	f859 3908 	ldr.w	r3, [r9], #-8
  403db4:	4599      	cmp	r9, r3
  403db6:	f040 8086 	bne.w	403ec6 <_malloc_r+0x54e>
  403dba:	f010 0f03 	tst.w	r0, #3
  403dbe:	f100 30ff 	add.w	r0, r0, #4294967295
  403dc2:	d1f5      	bne.n	403db0 <_malloc_r+0x438>
  403dc4:	687b      	ldr	r3, [r7, #4]
  403dc6:	ea23 0304 	bic.w	r3, r3, r4
  403dca:	607b      	str	r3, [r7, #4]
  403dcc:	0064      	lsls	r4, r4, #1
  403dce:	429c      	cmp	r4, r3
  403dd0:	f63f aec7 	bhi.w	403b62 <_malloc_r+0x1ea>
  403dd4:	2c00      	cmp	r4, #0
  403dd6:	f43f aec4 	beq.w	403b62 <_malloc_r+0x1ea>
  403dda:	421c      	tst	r4, r3
  403ddc:	4640      	mov	r0, r8
  403dde:	f47f ae3e 	bne.w	403a5e <_malloc_r+0xe6>
  403de2:	0064      	lsls	r4, r4, #1
  403de4:	421c      	tst	r4, r3
  403de6:	f100 0004 	add.w	r0, r0, #4
  403dea:	d0fa      	beq.n	403de2 <_malloc_r+0x46a>
  403dec:	e637      	b.n	403a5e <_malloc_r+0xe6>
  403dee:	468c      	mov	ip, r1
  403df0:	e78c      	b.n	403d0c <_malloc_r+0x394>
  403df2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403df6:	d815      	bhi.n	403e24 <_malloc_r+0x4ac>
  403df8:	0bf3      	lsrs	r3, r6, #15
  403dfa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403dfe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403e02:	00c3      	lsls	r3, r0, #3
  403e04:	e5da      	b.n	4039bc <_malloc_r+0x44>
  403e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403e0a:	e6ed      	b.n	403be8 <_malloc_r+0x270>
  403e0c:	687b      	ldr	r3, [r7, #4]
  403e0e:	1092      	asrs	r2, r2, #2
  403e10:	2101      	movs	r1, #1
  403e12:	fa01 f202 	lsl.w	r2, r1, r2
  403e16:	4313      	orrs	r3, r2
  403e18:	607b      	str	r3, [r7, #4]
  403e1a:	4662      	mov	r2, ip
  403e1c:	e779      	b.n	403d12 <_malloc_r+0x39a>
  403e1e:	2301      	movs	r3, #1
  403e20:	6053      	str	r3, [r2, #4]
  403e22:	e729      	b.n	403c78 <_malloc_r+0x300>
  403e24:	f240 5254 	movw	r2, #1364	; 0x554
  403e28:	4293      	cmp	r3, r2
  403e2a:	d822      	bhi.n	403e72 <_malloc_r+0x4fa>
  403e2c:	0cb3      	lsrs	r3, r6, #18
  403e2e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403e32:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403e36:	00c3      	lsls	r3, r0, #3
  403e38:	e5c0      	b.n	4039bc <_malloc_r+0x44>
  403e3a:	f103 0b10 	add.w	fp, r3, #16
  403e3e:	e6ae      	b.n	403b9e <_malloc_r+0x226>
  403e40:	2a54      	cmp	r2, #84	; 0x54
  403e42:	d829      	bhi.n	403e98 <_malloc_r+0x520>
  403e44:	0b1a      	lsrs	r2, r3, #12
  403e46:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403e4a:	00c9      	lsls	r1, r1, #3
  403e4c:	326e      	adds	r2, #110	; 0x6e
  403e4e:	e74d      	b.n	403cec <_malloc_r+0x374>
  403e50:	4b20      	ldr	r3, [pc, #128]	; (403ed4 <_malloc_r+0x55c>)
  403e52:	6819      	ldr	r1, [r3, #0]
  403e54:	4459      	add	r1, fp
  403e56:	6019      	str	r1, [r3, #0]
  403e58:	e6b2      	b.n	403bc0 <_malloc_r+0x248>
  403e5a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403e5e:	2800      	cmp	r0, #0
  403e60:	f47f aeae 	bne.w	403bc0 <_malloc_r+0x248>
  403e64:	eb08 030b 	add.w	r3, r8, fp
  403e68:	68ba      	ldr	r2, [r7, #8]
  403e6a:	f043 0301 	orr.w	r3, r3, #1
  403e6e:	6053      	str	r3, [r2, #4]
  403e70:	e6ee      	b.n	403c50 <_malloc_r+0x2d8>
  403e72:	207f      	movs	r0, #127	; 0x7f
  403e74:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403e78:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403e7c:	e59e      	b.n	4039bc <_malloc_r+0x44>
  403e7e:	f104 0108 	add.w	r1, r4, #8
  403e82:	4628      	mov	r0, r5
  403e84:	9300      	str	r3, [sp, #0]
  403e86:	f001 fd45 	bl	405914 <_free_r>
  403e8a:	9b00      	ldr	r3, [sp, #0]
  403e8c:	6819      	ldr	r1, [r3, #0]
  403e8e:	e6df      	b.n	403c50 <_malloc_r+0x2d8>
  403e90:	2001      	movs	r0, #1
  403e92:	f04f 0900 	mov.w	r9, #0
  403e96:	e6bc      	b.n	403c12 <_malloc_r+0x29a>
  403e98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e9c:	d805      	bhi.n	403eaa <_malloc_r+0x532>
  403e9e:	0bda      	lsrs	r2, r3, #15
  403ea0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403ea4:	00c9      	lsls	r1, r1, #3
  403ea6:	3277      	adds	r2, #119	; 0x77
  403ea8:	e720      	b.n	403cec <_malloc_r+0x374>
  403eaa:	f240 5154 	movw	r1, #1364	; 0x554
  403eae:	428a      	cmp	r2, r1
  403eb0:	d805      	bhi.n	403ebe <_malloc_r+0x546>
  403eb2:	0c9a      	lsrs	r2, r3, #18
  403eb4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403eb8:	00c9      	lsls	r1, r1, #3
  403eba:	327c      	adds	r2, #124	; 0x7c
  403ebc:	e716      	b.n	403cec <_malloc_r+0x374>
  403ebe:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403ec2:	227e      	movs	r2, #126	; 0x7e
  403ec4:	e712      	b.n	403cec <_malloc_r+0x374>
  403ec6:	687b      	ldr	r3, [r7, #4]
  403ec8:	e780      	b.n	403dcc <_malloc_r+0x454>
  403eca:	08f0      	lsrs	r0, r6, #3
  403ecc:	f106 0308 	add.w	r3, r6, #8
  403ed0:	e600      	b.n	403ad4 <_malloc_r+0x15c>
  403ed2:	bf00      	nop
  403ed4:	20400ba0 	.word	0x20400ba0

00403ed8 <memcpy>:
  403ed8:	4684      	mov	ip, r0
  403eda:	ea41 0300 	orr.w	r3, r1, r0
  403ede:	f013 0303 	ands.w	r3, r3, #3
  403ee2:	d16d      	bne.n	403fc0 <memcpy+0xe8>
  403ee4:	3a40      	subs	r2, #64	; 0x40
  403ee6:	d341      	bcc.n	403f6c <memcpy+0x94>
  403ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  403eec:	f840 3b04 	str.w	r3, [r0], #4
  403ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef4:	f840 3b04 	str.w	r3, [r0], #4
  403ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  403efc:	f840 3b04 	str.w	r3, [r0], #4
  403f00:	f851 3b04 	ldr.w	r3, [r1], #4
  403f04:	f840 3b04 	str.w	r3, [r0], #4
  403f08:	f851 3b04 	ldr.w	r3, [r1], #4
  403f0c:	f840 3b04 	str.w	r3, [r0], #4
  403f10:	f851 3b04 	ldr.w	r3, [r1], #4
  403f14:	f840 3b04 	str.w	r3, [r0], #4
  403f18:	f851 3b04 	ldr.w	r3, [r1], #4
  403f1c:	f840 3b04 	str.w	r3, [r0], #4
  403f20:	f851 3b04 	ldr.w	r3, [r1], #4
  403f24:	f840 3b04 	str.w	r3, [r0], #4
  403f28:	f851 3b04 	ldr.w	r3, [r1], #4
  403f2c:	f840 3b04 	str.w	r3, [r0], #4
  403f30:	f851 3b04 	ldr.w	r3, [r1], #4
  403f34:	f840 3b04 	str.w	r3, [r0], #4
  403f38:	f851 3b04 	ldr.w	r3, [r1], #4
  403f3c:	f840 3b04 	str.w	r3, [r0], #4
  403f40:	f851 3b04 	ldr.w	r3, [r1], #4
  403f44:	f840 3b04 	str.w	r3, [r0], #4
  403f48:	f851 3b04 	ldr.w	r3, [r1], #4
  403f4c:	f840 3b04 	str.w	r3, [r0], #4
  403f50:	f851 3b04 	ldr.w	r3, [r1], #4
  403f54:	f840 3b04 	str.w	r3, [r0], #4
  403f58:	f851 3b04 	ldr.w	r3, [r1], #4
  403f5c:	f840 3b04 	str.w	r3, [r0], #4
  403f60:	f851 3b04 	ldr.w	r3, [r1], #4
  403f64:	f840 3b04 	str.w	r3, [r0], #4
  403f68:	3a40      	subs	r2, #64	; 0x40
  403f6a:	d2bd      	bcs.n	403ee8 <memcpy+0x10>
  403f6c:	3230      	adds	r2, #48	; 0x30
  403f6e:	d311      	bcc.n	403f94 <memcpy+0xbc>
  403f70:	f851 3b04 	ldr.w	r3, [r1], #4
  403f74:	f840 3b04 	str.w	r3, [r0], #4
  403f78:	f851 3b04 	ldr.w	r3, [r1], #4
  403f7c:	f840 3b04 	str.w	r3, [r0], #4
  403f80:	f851 3b04 	ldr.w	r3, [r1], #4
  403f84:	f840 3b04 	str.w	r3, [r0], #4
  403f88:	f851 3b04 	ldr.w	r3, [r1], #4
  403f8c:	f840 3b04 	str.w	r3, [r0], #4
  403f90:	3a10      	subs	r2, #16
  403f92:	d2ed      	bcs.n	403f70 <memcpy+0x98>
  403f94:	320c      	adds	r2, #12
  403f96:	d305      	bcc.n	403fa4 <memcpy+0xcc>
  403f98:	f851 3b04 	ldr.w	r3, [r1], #4
  403f9c:	f840 3b04 	str.w	r3, [r0], #4
  403fa0:	3a04      	subs	r2, #4
  403fa2:	d2f9      	bcs.n	403f98 <memcpy+0xc0>
  403fa4:	3204      	adds	r2, #4
  403fa6:	d008      	beq.n	403fba <memcpy+0xe2>
  403fa8:	07d2      	lsls	r2, r2, #31
  403faa:	bf1c      	itt	ne
  403fac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403fb0:	f800 3b01 	strbne.w	r3, [r0], #1
  403fb4:	d301      	bcc.n	403fba <memcpy+0xe2>
  403fb6:	880b      	ldrh	r3, [r1, #0]
  403fb8:	8003      	strh	r3, [r0, #0]
  403fba:	4660      	mov	r0, ip
  403fbc:	4770      	bx	lr
  403fbe:	bf00      	nop
  403fc0:	2a08      	cmp	r2, #8
  403fc2:	d313      	bcc.n	403fec <memcpy+0x114>
  403fc4:	078b      	lsls	r3, r1, #30
  403fc6:	d08d      	beq.n	403ee4 <memcpy+0xc>
  403fc8:	f010 0303 	ands.w	r3, r0, #3
  403fcc:	d08a      	beq.n	403ee4 <memcpy+0xc>
  403fce:	f1c3 0304 	rsb	r3, r3, #4
  403fd2:	1ad2      	subs	r2, r2, r3
  403fd4:	07db      	lsls	r3, r3, #31
  403fd6:	bf1c      	itt	ne
  403fd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403fdc:	f800 3b01 	strbne.w	r3, [r0], #1
  403fe0:	d380      	bcc.n	403ee4 <memcpy+0xc>
  403fe2:	f831 3b02 	ldrh.w	r3, [r1], #2
  403fe6:	f820 3b02 	strh.w	r3, [r0], #2
  403fea:	e77b      	b.n	403ee4 <memcpy+0xc>
  403fec:	3a04      	subs	r2, #4
  403fee:	d3d9      	bcc.n	403fa4 <memcpy+0xcc>
  403ff0:	3a01      	subs	r2, #1
  403ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
  403ff6:	f800 3b01 	strb.w	r3, [r0], #1
  403ffa:	d2f9      	bcs.n	403ff0 <memcpy+0x118>
  403ffc:	780b      	ldrb	r3, [r1, #0]
  403ffe:	7003      	strb	r3, [r0, #0]
  404000:	784b      	ldrb	r3, [r1, #1]
  404002:	7043      	strb	r3, [r0, #1]
  404004:	788b      	ldrb	r3, [r1, #2]
  404006:	7083      	strb	r3, [r0, #2]
  404008:	4660      	mov	r0, ip
  40400a:	4770      	bx	lr

0040400c <memset>:
  40400c:	b470      	push	{r4, r5, r6}
  40400e:	0786      	lsls	r6, r0, #30
  404010:	d046      	beq.n	4040a0 <memset+0x94>
  404012:	1e54      	subs	r4, r2, #1
  404014:	2a00      	cmp	r2, #0
  404016:	d041      	beq.n	40409c <memset+0x90>
  404018:	b2ca      	uxtb	r2, r1
  40401a:	4603      	mov	r3, r0
  40401c:	e002      	b.n	404024 <memset+0x18>
  40401e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404022:	d33b      	bcc.n	40409c <memset+0x90>
  404024:	f803 2b01 	strb.w	r2, [r3], #1
  404028:	079d      	lsls	r5, r3, #30
  40402a:	d1f8      	bne.n	40401e <memset+0x12>
  40402c:	2c03      	cmp	r4, #3
  40402e:	d92e      	bls.n	40408e <memset+0x82>
  404030:	b2cd      	uxtb	r5, r1
  404032:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404036:	2c0f      	cmp	r4, #15
  404038:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40403c:	d919      	bls.n	404072 <memset+0x66>
  40403e:	f103 0210 	add.w	r2, r3, #16
  404042:	4626      	mov	r6, r4
  404044:	3e10      	subs	r6, #16
  404046:	2e0f      	cmp	r6, #15
  404048:	f842 5c10 	str.w	r5, [r2, #-16]
  40404c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404050:	f842 5c08 	str.w	r5, [r2, #-8]
  404054:	f842 5c04 	str.w	r5, [r2, #-4]
  404058:	f102 0210 	add.w	r2, r2, #16
  40405c:	d8f2      	bhi.n	404044 <memset+0x38>
  40405e:	f1a4 0210 	sub.w	r2, r4, #16
  404062:	f022 020f 	bic.w	r2, r2, #15
  404066:	f004 040f 	and.w	r4, r4, #15
  40406a:	3210      	adds	r2, #16
  40406c:	2c03      	cmp	r4, #3
  40406e:	4413      	add	r3, r2
  404070:	d90d      	bls.n	40408e <memset+0x82>
  404072:	461e      	mov	r6, r3
  404074:	4622      	mov	r2, r4
  404076:	3a04      	subs	r2, #4
  404078:	2a03      	cmp	r2, #3
  40407a:	f846 5b04 	str.w	r5, [r6], #4
  40407e:	d8fa      	bhi.n	404076 <memset+0x6a>
  404080:	1f22      	subs	r2, r4, #4
  404082:	f022 0203 	bic.w	r2, r2, #3
  404086:	3204      	adds	r2, #4
  404088:	4413      	add	r3, r2
  40408a:	f004 0403 	and.w	r4, r4, #3
  40408e:	b12c      	cbz	r4, 40409c <memset+0x90>
  404090:	b2c9      	uxtb	r1, r1
  404092:	441c      	add	r4, r3
  404094:	f803 1b01 	strb.w	r1, [r3], #1
  404098:	429c      	cmp	r4, r3
  40409a:	d1fb      	bne.n	404094 <memset+0x88>
  40409c:	bc70      	pop	{r4, r5, r6}
  40409e:	4770      	bx	lr
  4040a0:	4614      	mov	r4, r2
  4040a2:	4603      	mov	r3, r0
  4040a4:	e7c2      	b.n	40402c <memset+0x20>
  4040a6:	bf00      	nop

004040a8 <__malloc_lock>:
  4040a8:	4801      	ldr	r0, [pc, #4]	; (4040b0 <__malloc_lock+0x8>)
  4040aa:	f001 becd 	b.w	405e48 <__retarget_lock_acquire_recursive>
  4040ae:	bf00      	nop
  4040b0:	20400c44 	.word	0x20400c44

004040b4 <__malloc_unlock>:
  4040b4:	4801      	ldr	r0, [pc, #4]	; (4040bc <__malloc_unlock+0x8>)
  4040b6:	f001 bec9 	b.w	405e4c <__retarget_lock_release_recursive>
  4040ba:	bf00      	nop
  4040bc:	20400c44 	.word	0x20400c44

004040c0 <_sbrk_r>:
  4040c0:	b538      	push	{r3, r4, r5, lr}
  4040c2:	4c07      	ldr	r4, [pc, #28]	; (4040e0 <_sbrk_r+0x20>)
  4040c4:	2300      	movs	r3, #0
  4040c6:	4605      	mov	r5, r0
  4040c8:	4608      	mov	r0, r1
  4040ca:	6023      	str	r3, [r4, #0]
  4040cc:	f7fc ff20 	bl	400f10 <_sbrk>
  4040d0:	1c43      	adds	r3, r0, #1
  4040d2:	d000      	beq.n	4040d6 <_sbrk_r+0x16>
  4040d4:	bd38      	pop	{r3, r4, r5, pc}
  4040d6:	6823      	ldr	r3, [r4, #0]
  4040d8:	2b00      	cmp	r3, #0
  4040da:	d0fb      	beq.n	4040d4 <_sbrk_r+0x14>
  4040dc:	602b      	str	r3, [r5, #0]
  4040de:	bd38      	pop	{r3, r4, r5, pc}
  4040e0:	20400c58 	.word	0x20400c58

004040e4 <setbuf>:
  4040e4:	2900      	cmp	r1, #0
  4040e6:	bf0c      	ite	eq
  4040e8:	2202      	moveq	r2, #2
  4040ea:	2200      	movne	r2, #0
  4040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4040f0:	f000 b800 	b.w	4040f4 <setvbuf>

004040f4 <setvbuf>:
  4040f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4040f8:	4c61      	ldr	r4, [pc, #388]	; (404280 <setvbuf+0x18c>)
  4040fa:	6825      	ldr	r5, [r4, #0]
  4040fc:	b083      	sub	sp, #12
  4040fe:	4604      	mov	r4, r0
  404100:	460f      	mov	r7, r1
  404102:	4690      	mov	r8, r2
  404104:	461e      	mov	r6, r3
  404106:	b115      	cbz	r5, 40410e <setvbuf+0x1a>
  404108:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40410a:	2b00      	cmp	r3, #0
  40410c:	d064      	beq.n	4041d8 <setvbuf+0xe4>
  40410e:	f1b8 0f02 	cmp.w	r8, #2
  404112:	d006      	beq.n	404122 <setvbuf+0x2e>
  404114:	f1b8 0f01 	cmp.w	r8, #1
  404118:	f200 809f 	bhi.w	40425a <setvbuf+0x166>
  40411c:	2e00      	cmp	r6, #0
  40411e:	f2c0 809c 	blt.w	40425a <setvbuf+0x166>
  404122:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404124:	07d8      	lsls	r0, r3, #31
  404126:	d534      	bpl.n	404192 <setvbuf+0x9e>
  404128:	4621      	mov	r1, r4
  40412a:	4628      	mov	r0, r5
  40412c:	f001 fa74 	bl	405618 <_fflush_r>
  404130:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404132:	b141      	cbz	r1, 404146 <setvbuf+0x52>
  404134:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404138:	4299      	cmp	r1, r3
  40413a:	d002      	beq.n	404142 <setvbuf+0x4e>
  40413c:	4628      	mov	r0, r5
  40413e:	f001 fbe9 	bl	405914 <_free_r>
  404142:	2300      	movs	r3, #0
  404144:	6323      	str	r3, [r4, #48]	; 0x30
  404146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40414a:	2200      	movs	r2, #0
  40414c:	61a2      	str	r2, [r4, #24]
  40414e:	6062      	str	r2, [r4, #4]
  404150:	061a      	lsls	r2, r3, #24
  404152:	d43a      	bmi.n	4041ca <setvbuf+0xd6>
  404154:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404158:	f023 0303 	bic.w	r3, r3, #3
  40415c:	f1b8 0f02 	cmp.w	r8, #2
  404160:	81a3      	strh	r3, [r4, #12]
  404162:	d01d      	beq.n	4041a0 <setvbuf+0xac>
  404164:	ab01      	add	r3, sp, #4
  404166:	466a      	mov	r2, sp
  404168:	4621      	mov	r1, r4
  40416a:	4628      	mov	r0, r5
  40416c:	f001 fe70 	bl	405e50 <__swhatbuf_r>
  404170:	89a3      	ldrh	r3, [r4, #12]
  404172:	4318      	orrs	r0, r3
  404174:	81a0      	strh	r0, [r4, #12]
  404176:	2e00      	cmp	r6, #0
  404178:	d132      	bne.n	4041e0 <setvbuf+0xec>
  40417a:	9e00      	ldr	r6, [sp, #0]
  40417c:	4630      	mov	r0, r6
  40417e:	f7ff fbeb 	bl	403958 <malloc>
  404182:	4607      	mov	r7, r0
  404184:	2800      	cmp	r0, #0
  404186:	d06b      	beq.n	404260 <setvbuf+0x16c>
  404188:	89a3      	ldrh	r3, [r4, #12]
  40418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40418e:	81a3      	strh	r3, [r4, #12]
  404190:	e028      	b.n	4041e4 <setvbuf+0xf0>
  404192:	89a3      	ldrh	r3, [r4, #12]
  404194:	0599      	lsls	r1, r3, #22
  404196:	d4c7      	bmi.n	404128 <setvbuf+0x34>
  404198:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40419a:	f001 fe55 	bl	405e48 <__retarget_lock_acquire_recursive>
  40419e:	e7c3      	b.n	404128 <setvbuf+0x34>
  4041a0:	2500      	movs	r5, #0
  4041a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4041a4:	2600      	movs	r6, #0
  4041a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4041aa:	f043 0302 	orr.w	r3, r3, #2
  4041ae:	2001      	movs	r0, #1
  4041b0:	60a6      	str	r6, [r4, #8]
  4041b2:	07ce      	lsls	r6, r1, #31
  4041b4:	81a3      	strh	r3, [r4, #12]
  4041b6:	6022      	str	r2, [r4, #0]
  4041b8:	6122      	str	r2, [r4, #16]
  4041ba:	6160      	str	r0, [r4, #20]
  4041bc:	d401      	bmi.n	4041c2 <setvbuf+0xce>
  4041be:	0598      	lsls	r0, r3, #22
  4041c0:	d53e      	bpl.n	404240 <setvbuf+0x14c>
  4041c2:	4628      	mov	r0, r5
  4041c4:	b003      	add	sp, #12
  4041c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4041ca:	6921      	ldr	r1, [r4, #16]
  4041cc:	4628      	mov	r0, r5
  4041ce:	f001 fba1 	bl	405914 <_free_r>
  4041d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041d6:	e7bd      	b.n	404154 <setvbuf+0x60>
  4041d8:	4628      	mov	r0, r5
  4041da:	f001 fa75 	bl	4056c8 <__sinit>
  4041de:	e796      	b.n	40410e <setvbuf+0x1a>
  4041e0:	2f00      	cmp	r7, #0
  4041e2:	d0cb      	beq.n	40417c <setvbuf+0x88>
  4041e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041e6:	2b00      	cmp	r3, #0
  4041e8:	d033      	beq.n	404252 <setvbuf+0x15e>
  4041ea:	9b00      	ldr	r3, [sp, #0]
  4041ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041f0:	6027      	str	r7, [r4, #0]
  4041f2:	429e      	cmp	r6, r3
  4041f4:	bf1c      	itt	ne
  4041f6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4041fa:	81a2      	strhne	r2, [r4, #12]
  4041fc:	f1b8 0f01 	cmp.w	r8, #1
  404200:	bf04      	itt	eq
  404202:	f042 0201 	orreq.w	r2, r2, #1
  404206:	81a2      	strheq	r2, [r4, #12]
  404208:	b292      	uxth	r2, r2
  40420a:	f012 0308 	ands.w	r3, r2, #8
  40420e:	6127      	str	r7, [r4, #16]
  404210:	6166      	str	r6, [r4, #20]
  404212:	d00e      	beq.n	404232 <setvbuf+0x13e>
  404214:	07d1      	lsls	r1, r2, #31
  404216:	d51a      	bpl.n	40424e <setvbuf+0x15a>
  404218:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40421a:	4276      	negs	r6, r6
  40421c:	2300      	movs	r3, #0
  40421e:	f015 0501 	ands.w	r5, r5, #1
  404222:	61a6      	str	r6, [r4, #24]
  404224:	60a3      	str	r3, [r4, #8]
  404226:	d009      	beq.n	40423c <setvbuf+0x148>
  404228:	2500      	movs	r5, #0
  40422a:	4628      	mov	r0, r5
  40422c:	b003      	add	sp, #12
  40422e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404232:	60a3      	str	r3, [r4, #8]
  404234:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404236:	f015 0501 	ands.w	r5, r5, #1
  40423a:	d1f5      	bne.n	404228 <setvbuf+0x134>
  40423c:	0593      	lsls	r3, r2, #22
  40423e:	d4c0      	bmi.n	4041c2 <setvbuf+0xce>
  404240:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404242:	f001 fe03 	bl	405e4c <__retarget_lock_release_recursive>
  404246:	4628      	mov	r0, r5
  404248:	b003      	add	sp, #12
  40424a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40424e:	60a6      	str	r6, [r4, #8]
  404250:	e7f0      	b.n	404234 <setvbuf+0x140>
  404252:	4628      	mov	r0, r5
  404254:	f001 fa38 	bl	4056c8 <__sinit>
  404258:	e7c7      	b.n	4041ea <setvbuf+0xf6>
  40425a:	f04f 35ff 	mov.w	r5, #4294967295
  40425e:	e7b0      	b.n	4041c2 <setvbuf+0xce>
  404260:	f8dd 9000 	ldr.w	r9, [sp]
  404264:	45b1      	cmp	r9, r6
  404266:	d004      	beq.n	404272 <setvbuf+0x17e>
  404268:	4648      	mov	r0, r9
  40426a:	f7ff fb75 	bl	403958 <malloc>
  40426e:	4607      	mov	r7, r0
  404270:	b920      	cbnz	r0, 40427c <setvbuf+0x188>
  404272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404276:	f04f 35ff 	mov.w	r5, #4294967295
  40427a:	e792      	b.n	4041a2 <setvbuf+0xae>
  40427c:	464e      	mov	r6, r9
  40427e:	e783      	b.n	404188 <setvbuf+0x94>
  404280:	2040000c 	.word	0x2040000c
	...
  4042a0:	eba2 0003 	sub.w	r0, r2, r3
  4042a4:	4770      	bx	lr
  4042a6:	bf00      	nop

004042a8 <strcmp>:
  4042a8:	7802      	ldrb	r2, [r0, #0]
  4042aa:	780b      	ldrb	r3, [r1, #0]
  4042ac:	2a01      	cmp	r2, #1
  4042ae:	bf28      	it	cs
  4042b0:	429a      	cmpcs	r2, r3
  4042b2:	d1f5      	bne.n	4042a0 <setvbuf+0x1ac>
  4042b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4042b8:	ea40 0401 	orr.w	r4, r0, r1
  4042bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4042c0:	f06f 0c00 	mvn.w	ip, #0
  4042c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4042c8:	b312      	cbz	r2, 404310 <strcmp+0x68>
  4042ca:	ea80 0401 	eor.w	r4, r0, r1
  4042ce:	f014 0f07 	tst.w	r4, #7
  4042d2:	d16a      	bne.n	4043aa <strcmp+0x102>
  4042d4:	f000 0407 	and.w	r4, r0, #7
  4042d8:	f020 0007 	bic.w	r0, r0, #7
  4042dc:	f004 0503 	and.w	r5, r4, #3
  4042e0:	f021 0107 	bic.w	r1, r1, #7
  4042e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4042e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4042ec:	f014 0f04 	tst.w	r4, #4
  4042f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4042f4:	fa0c f405 	lsl.w	r4, ip, r5
  4042f8:	ea62 0204 	orn	r2, r2, r4
  4042fc:	ea66 0604 	orn	r6, r6, r4
  404300:	d00a      	beq.n	404318 <strcmp+0x70>
  404302:	ea63 0304 	orn	r3, r3, r4
  404306:	4662      	mov	r2, ip
  404308:	ea67 0704 	orn	r7, r7, r4
  40430c:	4666      	mov	r6, ip
  40430e:	e003      	b.n	404318 <strcmp+0x70>
  404310:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404314:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404318:	fa82 f54c 	uadd8	r5, r2, ip
  40431c:	ea82 0406 	eor.w	r4, r2, r6
  404320:	faa4 f48c 	sel	r4, r4, ip
  404324:	bb6c      	cbnz	r4, 404382 <strcmp+0xda>
  404326:	fa83 f54c 	uadd8	r5, r3, ip
  40432a:	ea83 0507 	eor.w	r5, r3, r7
  40432e:	faa5 f58c 	sel	r5, r5, ip
  404332:	b995      	cbnz	r5, 40435a <strcmp+0xb2>
  404334:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  404338:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40433c:	fa82 f54c 	uadd8	r5, r2, ip
  404340:	ea82 0406 	eor.w	r4, r2, r6
  404344:	faa4 f48c 	sel	r4, r4, ip
  404348:	fa83 f54c 	uadd8	r5, r3, ip
  40434c:	ea83 0507 	eor.w	r5, r3, r7
  404350:	faa5 f58c 	sel	r5, r5, ip
  404354:	4325      	orrs	r5, r4
  404356:	d0db      	beq.n	404310 <strcmp+0x68>
  404358:	b99c      	cbnz	r4, 404382 <strcmp+0xda>
  40435a:	ba2d      	rev	r5, r5
  40435c:	fab5 f485 	clz	r4, r5
  404360:	f024 0407 	bic.w	r4, r4, #7
  404364:	fa27 f104 	lsr.w	r1, r7, r4
  404368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40436c:	fa23 f304 	lsr.w	r3, r3, r4
  404370:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  404374:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404378:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40437c:	eba0 0001 	sub.w	r0, r0, r1
  404380:	4770      	bx	lr
  404382:	ba24      	rev	r4, r4
  404384:	fab4 f484 	clz	r4, r4
  404388:	f024 0407 	bic.w	r4, r4, #7
  40438c:	fa26 f104 	lsr.w	r1, r6, r4
  404390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404394:	fa22 f204 	lsr.w	r2, r2, r4
  404398:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40439c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4043a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4043a4:	eba0 0001 	sub.w	r0, r0, r1
  4043a8:	4770      	bx	lr
  4043aa:	f014 0f03 	tst.w	r4, #3
  4043ae:	d13c      	bne.n	40442a <strcmp+0x182>
  4043b0:	f010 0403 	ands.w	r4, r0, #3
  4043b4:	d128      	bne.n	404408 <strcmp+0x160>
  4043b6:	f850 2b08 	ldr.w	r2, [r0], #8
  4043ba:	f851 3b08 	ldr.w	r3, [r1], #8
  4043be:	fa82 f54c 	uadd8	r5, r2, ip
  4043c2:	ea82 0503 	eor.w	r5, r2, r3
  4043c6:	faa5 f58c 	sel	r5, r5, ip
  4043ca:	b95d      	cbnz	r5, 4043e4 <strcmp+0x13c>
  4043cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4043d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4043d4:	fa82 f54c 	uadd8	r5, r2, ip
  4043d8:	ea82 0503 	eor.w	r5, r2, r3
  4043dc:	faa5 f58c 	sel	r5, r5, ip
  4043e0:	2d00      	cmp	r5, #0
  4043e2:	d0e8      	beq.n	4043b6 <strcmp+0x10e>
  4043e4:	ba2d      	rev	r5, r5
  4043e6:	fab5 f485 	clz	r4, r5
  4043ea:	f024 0407 	bic.w	r4, r4, #7
  4043ee:	fa23 f104 	lsr.w	r1, r3, r4
  4043f2:	fa22 f204 	lsr.w	r2, r2, r4
  4043f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4043fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4043fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404402:	eba0 0001 	sub.w	r0, r0, r1
  404406:	4770      	bx	lr
  404408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40440c:	f020 0003 	bic.w	r0, r0, #3
  404410:	f850 2b08 	ldr.w	r2, [r0], #8
  404414:	f021 0103 	bic.w	r1, r1, #3
  404418:	f851 3b08 	ldr.w	r3, [r1], #8
  40441c:	fa0c f404 	lsl.w	r4, ip, r4
  404420:	ea62 0204 	orn	r2, r2, r4
  404424:	ea63 0304 	orn	r3, r3, r4
  404428:	e7c9      	b.n	4043be <strcmp+0x116>
  40442a:	f010 0403 	ands.w	r4, r0, #3
  40442e:	d01a      	beq.n	404466 <strcmp+0x1be>
  404430:	eba1 0104 	sub.w	r1, r1, r4
  404434:	f020 0003 	bic.w	r0, r0, #3
  404438:	07e4      	lsls	r4, r4, #31
  40443a:	f850 2b04 	ldr.w	r2, [r0], #4
  40443e:	d006      	beq.n	40444e <strcmp+0x1a6>
  404440:	d20f      	bcs.n	404462 <strcmp+0x1ba>
  404442:	788b      	ldrb	r3, [r1, #2]
  404444:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  404448:	1ae4      	subs	r4, r4, r3
  40444a:	d106      	bne.n	40445a <strcmp+0x1b2>
  40444c:	b12b      	cbz	r3, 40445a <strcmp+0x1b2>
  40444e:	78cb      	ldrb	r3, [r1, #3]
  404450:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  404454:	1ae4      	subs	r4, r4, r3
  404456:	d100      	bne.n	40445a <strcmp+0x1b2>
  404458:	b91b      	cbnz	r3, 404462 <strcmp+0x1ba>
  40445a:	4620      	mov	r0, r4
  40445c:	f85d 4b10 	ldr.w	r4, [sp], #16
  404460:	4770      	bx	lr
  404462:	f101 0104 	add.w	r1, r1, #4
  404466:	f850 2b04 	ldr.w	r2, [r0], #4
  40446a:	07cc      	lsls	r4, r1, #31
  40446c:	f021 0103 	bic.w	r1, r1, #3
  404470:	f851 3b04 	ldr.w	r3, [r1], #4
  404474:	d848      	bhi.n	404508 <strcmp+0x260>
  404476:	d224      	bcs.n	4044c2 <strcmp+0x21a>
  404478:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40447c:	fa82 f54c 	uadd8	r5, r2, ip
  404480:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  404484:	faa5 f58c 	sel	r5, r5, ip
  404488:	d10a      	bne.n	4044a0 <strcmp+0x1f8>
  40448a:	b965      	cbnz	r5, 4044a6 <strcmp+0x1fe>
  40448c:	f851 3b04 	ldr.w	r3, [r1], #4
  404490:	ea84 0402 	eor.w	r4, r4, r2
  404494:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  404498:	d10e      	bne.n	4044b8 <strcmp+0x210>
  40449a:	f850 2b04 	ldr.w	r2, [r0], #4
  40449e:	e7eb      	b.n	404478 <strcmp+0x1d0>
  4044a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4044a4:	e055      	b.n	404552 <strcmp+0x2aa>
  4044a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4044aa:	d14d      	bne.n	404548 <strcmp+0x2a0>
  4044ac:	7808      	ldrb	r0, [r1, #0]
  4044ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4044b2:	f1c0 0000 	rsb	r0, r0, #0
  4044b6:	4770      	bx	lr
  4044b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4044bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4044c0:	e047      	b.n	404552 <strcmp+0x2aa>
  4044c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4044c6:	fa82 f54c 	uadd8	r5, r2, ip
  4044ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4044ce:	faa5 f58c 	sel	r5, r5, ip
  4044d2:	d10a      	bne.n	4044ea <strcmp+0x242>
  4044d4:	b965      	cbnz	r5, 4044f0 <strcmp+0x248>
  4044d6:	f851 3b04 	ldr.w	r3, [r1], #4
  4044da:	ea84 0402 	eor.w	r4, r4, r2
  4044de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4044e2:	d10c      	bne.n	4044fe <strcmp+0x256>
  4044e4:	f850 2b04 	ldr.w	r2, [r0], #4
  4044e8:	e7eb      	b.n	4044c2 <strcmp+0x21a>
  4044ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4044ee:	e030      	b.n	404552 <strcmp+0x2aa>
  4044f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4044f4:	d128      	bne.n	404548 <strcmp+0x2a0>
  4044f6:	880b      	ldrh	r3, [r1, #0]
  4044f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4044fc:	e029      	b.n	404552 <strcmp+0x2aa>
  4044fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  404502:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  404506:	e024      	b.n	404552 <strcmp+0x2aa>
  404508:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40450c:	fa82 f54c 	uadd8	r5, r2, ip
  404510:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  404514:	faa5 f58c 	sel	r5, r5, ip
  404518:	d10a      	bne.n	404530 <strcmp+0x288>
  40451a:	b965      	cbnz	r5, 404536 <strcmp+0x28e>
  40451c:	f851 3b04 	ldr.w	r3, [r1], #4
  404520:	ea84 0402 	eor.w	r4, r4, r2
  404524:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  404528:	d109      	bne.n	40453e <strcmp+0x296>
  40452a:	f850 2b04 	ldr.w	r2, [r0], #4
  40452e:	e7eb      	b.n	404508 <strcmp+0x260>
  404530:	ea4f 6313 	mov.w	r3, r3, lsr #24
  404534:	e00d      	b.n	404552 <strcmp+0x2aa>
  404536:	f015 0fff 	tst.w	r5, #255	; 0xff
  40453a:	d105      	bne.n	404548 <strcmp+0x2a0>
  40453c:	680b      	ldr	r3, [r1, #0]
  40453e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  404542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404546:	e004      	b.n	404552 <strcmp+0x2aa>
  404548:	f04f 0000 	mov.w	r0, #0
  40454c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404550:	4770      	bx	lr
  404552:	ba12      	rev	r2, r2
  404554:	ba1b      	rev	r3, r3
  404556:	fa82 f44c 	uadd8	r4, r2, ip
  40455a:	ea82 0403 	eor.w	r4, r2, r3
  40455e:	faa4 f58c 	sel	r5, r4, ip
  404562:	fab5 f485 	clz	r4, r5
  404566:	fa02 f204 	lsl.w	r2, r2, r4
  40456a:	fa03 f304 	lsl.w	r3, r3, r4
  40456e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  404572:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404576:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40457a:	4770      	bx	lr
  40457c:	0000      	movs	r0, r0
	...

00404580 <strlen>:
  404580:	f890 f000 	pld	[r0]
  404584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404588:	f020 0107 	bic.w	r1, r0, #7
  40458c:	f06f 0c00 	mvn.w	ip, #0
  404590:	f010 0407 	ands.w	r4, r0, #7
  404594:	f891 f020 	pld	[r1, #32]
  404598:	f040 8049 	bne.w	40462e <strlen+0xae>
  40459c:	f04f 0400 	mov.w	r4, #0
  4045a0:	f06f 0007 	mvn.w	r0, #7
  4045a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4045a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4045ac:	f100 0008 	add.w	r0, r0, #8
  4045b0:	fa82 f24c 	uadd8	r2, r2, ip
  4045b4:	faa4 f28c 	sel	r2, r4, ip
  4045b8:	fa83 f34c 	uadd8	r3, r3, ip
  4045bc:	faa2 f38c 	sel	r3, r2, ip
  4045c0:	bb4b      	cbnz	r3, 404616 <strlen+0x96>
  4045c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4045c6:	fa82 f24c 	uadd8	r2, r2, ip
  4045ca:	f100 0008 	add.w	r0, r0, #8
  4045ce:	faa4 f28c 	sel	r2, r4, ip
  4045d2:	fa83 f34c 	uadd8	r3, r3, ip
  4045d6:	faa2 f38c 	sel	r3, r2, ip
  4045da:	b9e3      	cbnz	r3, 404616 <strlen+0x96>
  4045dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4045e0:	fa82 f24c 	uadd8	r2, r2, ip
  4045e4:	f100 0008 	add.w	r0, r0, #8
  4045e8:	faa4 f28c 	sel	r2, r4, ip
  4045ec:	fa83 f34c 	uadd8	r3, r3, ip
  4045f0:	faa2 f38c 	sel	r3, r2, ip
  4045f4:	b97b      	cbnz	r3, 404616 <strlen+0x96>
  4045f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4045fa:	f101 0120 	add.w	r1, r1, #32
  4045fe:	fa82 f24c 	uadd8	r2, r2, ip
  404602:	f100 0008 	add.w	r0, r0, #8
  404606:	faa4 f28c 	sel	r2, r4, ip
  40460a:	fa83 f34c 	uadd8	r3, r3, ip
  40460e:	faa2 f38c 	sel	r3, r2, ip
  404612:	2b00      	cmp	r3, #0
  404614:	d0c6      	beq.n	4045a4 <strlen+0x24>
  404616:	2a00      	cmp	r2, #0
  404618:	bf04      	itt	eq
  40461a:	3004      	addeq	r0, #4
  40461c:	461a      	moveq	r2, r3
  40461e:	ba12      	rev	r2, r2
  404620:	fab2 f282 	clz	r2, r2
  404624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40462c:	4770      	bx	lr
  40462e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404632:	f004 0503 	and.w	r5, r4, #3
  404636:	f1c4 0000 	rsb	r0, r4, #0
  40463a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40463e:	f014 0f04 	tst.w	r4, #4
  404642:	f891 f040 	pld	[r1, #64]	; 0x40
  404646:	fa0c f505 	lsl.w	r5, ip, r5
  40464a:	ea62 0205 	orn	r2, r2, r5
  40464e:	bf1c      	itt	ne
  404650:	ea63 0305 	ornne	r3, r3, r5
  404654:	4662      	movne	r2, ip
  404656:	f04f 0400 	mov.w	r4, #0
  40465a:	e7a9      	b.n	4045b0 <strlen+0x30>

0040465c <__sprint_r.part.0>:
  40465c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404660:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404662:	049c      	lsls	r4, r3, #18
  404664:	4693      	mov	fp, r2
  404666:	d52f      	bpl.n	4046c8 <__sprint_r.part.0+0x6c>
  404668:	6893      	ldr	r3, [r2, #8]
  40466a:	6812      	ldr	r2, [r2, #0]
  40466c:	b353      	cbz	r3, 4046c4 <__sprint_r.part.0+0x68>
  40466e:	460e      	mov	r6, r1
  404670:	4607      	mov	r7, r0
  404672:	f102 0908 	add.w	r9, r2, #8
  404676:	e919 0420 	ldmdb	r9, {r5, sl}
  40467a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40467e:	d017      	beq.n	4046b0 <__sprint_r.part.0+0x54>
  404680:	3d04      	subs	r5, #4
  404682:	2400      	movs	r4, #0
  404684:	e001      	b.n	40468a <__sprint_r.part.0+0x2e>
  404686:	45a0      	cmp	r8, r4
  404688:	d010      	beq.n	4046ac <__sprint_r.part.0+0x50>
  40468a:	4632      	mov	r2, r6
  40468c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404690:	4638      	mov	r0, r7
  404692:	f001 f8bb 	bl	40580c <_fputwc_r>
  404696:	1c43      	adds	r3, r0, #1
  404698:	f104 0401 	add.w	r4, r4, #1
  40469c:	d1f3      	bne.n	404686 <__sprint_r.part.0+0x2a>
  40469e:	2300      	movs	r3, #0
  4046a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4046a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4046a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4046b0:	f02a 0a03 	bic.w	sl, sl, #3
  4046b4:	eba3 030a 	sub.w	r3, r3, sl
  4046b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4046bc:	f109 0908 	add.w	r9, r9, #8
  4046c0:	2b00      	cmp	r3, #0
  4046c2:	d1d8      	bne.n	404676 <__sprint_r.part.0+0x1a>
  4046c4:	2000      	movs	r0, #0
  4046c6:	e7ea      	b.n	40469e <__sprint_r.part.0+0x42>
  4046c8:	f001 fa0a 	bl	405ae0 <__sfvwrite_r>
  4046cc:	2300      	movs	r3, #0
  4046ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4046d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4046d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046da:	bf00      	nop

004046dc <_vfiprintf_r>:
  4046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046e0:	b0ad      	sub	sp, #180	; 0xb4
  4046e2:	461d      	mov	r5, r3
  4046e4:	468b      	mov	fp, r1
  4046e6:	4690      	mov	r8, r2
  4046e8:	9307      	str	r3, [sp, #28]
  4046ea:	9006      	str	r0, [sp, #24]
  4046ec:	b118      	cbz	r0, 4046f6 <_vfiprintf_r+0x1a>
  4046ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	f000 80f3 	beq.w	4048dc <_vfiprintf_r+0x200>
  4046f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4046fe:	07df      	lsls	r7, r3, #31
  404700:	b281      	uxth	r1, r0
  404702:	d402      	bmi.n	40470a <_vfiprintf_r+0x2e>
  404704:	058e      	lsls	r6, r1, #22
  404706:	f140 80fc 	bpl.w	404902 <_vfiprintf_r+0x226>
  40470a:	048c      	lsls	r4, r1, #18
  40470c:	d40a      	bmi.n	404724 <_vfiprintf_r+0x48>
  40470e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404712:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40471a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40471e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404722:	b289      	uxth	r1, r1
  404724:	0708      	lsls	r0, r1, #28
  404726:	f140 80b3 	bpl.w	404890 <_vfiprintf_r+0x1b4>
  40472a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40472e:	2b00      	cmp	r3, #0
  404730:	f000 80ae 	beq.w	404890 <_vfiprintf_r+0x1b4>
  404734:	f001 031a 	and.w	r3, r1, #26
  404738:	2b0a      	cmp	r3, #10
  40473a:	f000 80b5 	beq.w	4048a8 <_vfiprintf_r+0x1cc>
  40473e:	2300      	movs	r3, #0
  404740:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404744:	930b      	str	r3, [sp, #44]	; 0x2c
  404746:	9311      	str	r3, [sp, #68]	; 0x44
  404748:	9310      	str	r3, [sp, #64]	; 0x40
  40474a:	9303      	str	r3, [sp, #12]
  40474c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404750:	46ca      	mov	sl, r9
  404752:	f8cd b010 	str.w	fp, [sp, #16]
  404756:	f898 3000 	ldrb.w	r3, [r8]
  40475a:	4644      	mov	r4, r8
  40475c:	b1fb      	cbz	r3, 40479e <_vfiprintf_r+0xc2>
  40475e:	2b25      	cmp	r3, #37	; 0x25
  404760:	d102      	bne.n	404768 <_vfiprintf_r+0x8c>
  404762:	e01c      	b.n	40479e <_vfiprintf_r+0xc2>
  404764:	2b25      	cmp	r3, #37	; 0x25
  404766:	d003      	beq.n	404770 <_vfiprintf_r+0x94>
  404768:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40476c:	2b00      	cmp	r3, #0
  40476e:	d1f9      	bne.n	404764 <_vfiprintf_r+0x88>
  404770:	eba4 0508 	sub.w	r5, r4, r8
  404774:	b19d      	cbz	r5, 40479e <_vfiprintf_r+0xc2>
  404776:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404778:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40477a:	f8ca 8000 	str.w	r8, [sl]
  40477e:	3301      	adds	r3, #1
  404780:	442a      	add	r2, r5
  404782:	2b07      	cmp	r3, #7
  404784:	f8ca 5004 	str.w	r5, [sl, #4]
  404788:	9211      	str	r2, [sp, #68]	; 0x44
  40478a:	9310      	str	r3, [sp, #64]	; 0x40
  40478c:	dd7a      	ble.n	404884 <_vfiprintf_r+0x1a8>
  40478e:	2a00      	cmp	r2, #0
  404790:	f040 84b0 	bne.w	4050f4 <_vfiprintf_r+0xa18>
  404794:	9b03      	ldr	r3, [sp, #12]
  404796:	9210      	str	r2, [sp, #64]	; 0x40
  404798:	442b      	add	r3, r5
  40479a:	46ca      	mov	sl, r9
  40479c:	9303      	str	r3, [sp, #12]
  40479e:	7823      	ldrb	r3, [r4, #0]
  4047a0:	2b00      	cmp	r3, #0
  4047a2:	f000 83e0 	beq.w	404f66 <_vfiprintf_r+0x88a>
  4047a6:	2000      	movs	r0, #0
  4047a8:	f04f 0300 	mov.w	r3, #0
  4047ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4047b0:	f104 0801 	add.w	r8, r4, #1
  4047b4:	7862      	ldrb	r2, [r4, #1]
  4047b6:	4605      	mov	r5, r0
  4047b8:	4606      	mov	r6, r0
  4047ba:	4603      	mov	r3, r0
  4047bc:	f04f 34ff 	mov.w	r4, #4294967295
  4047c0:	f108 0801 	add.w	r8, r8, #1
  4047c4:	f1a2 0120 	sub.w	r1, r2, #32
  4047c8:	2958      	cmp	r1, #88	; 0x58
  4047ca:	f200 82de 	bhi.w	404d8a <_vfiprintf_r+0x6ae>
  4047ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4047d2:	0221      	.short	0x0221
  4047d4:	02dc02dc 	.word	0x02dc02dc
  4047d8:	02dc0229 	.word	0x02dc0229
  4047dc:	02dc02dc 	.word	0x02dc02dc
  4047e0:	02dc02dc 	.word	0x02dc02dc
  4047e4:	028902dc 	.word	0x028902dc
  4047e8:	02dc0295 	.word	0x02dc0295
  4047ec:	02bd00a2 	.word	0x02bd00a2
  4047f0:	019f02dc 	.word	0x019f02dc
  4047f4:	01a401a4 	.word	0x01a401a4
  4047f8:	01a401a4 	.word	0x01a401a4
  4047fc:	01a401a4 	.word	0x01a401a4
  404800:	01a401a4 	.word	0x01a401a4
  404804:	02dc01a4 	.word	0x02dc01a4
  404808:	02dc02dc 	.word	0x02dc02dc
  40480c:	02dc02dc 	.word	0x02dc02dc
  404810:	02dc02dc 	.word	0x02dc02dc
  404814:	02dc02dc 	.word	0x02dc02dc
  404818:	01b202dc 	.word	0x01b202dc
  40481c:	02dc02dc 	.word	0x02dc02dc
  404820:	02dc02dc 	.word	0x02dc02dc
  404824:	02dc02dc 	.word	0x02dc02dc
  404828:	02dc02dc 	.word	0x02dc02dc
  40482c:	02dc02dc 	.word	0x02dc02dc
  404830:	02dc0197 	.word	0x02dc0197
  404834:	02dc02dc 	.word	0x02dc02dc
  404838:	02dc02dc 	.word	0x02dc02dc
  40483c:	02dc019b 	.word	0x02dc019b
  404840:	025302dc 	.word	0x025302dc
  404844:	02dc02dc 	.word	0x02dc02dc
  404848:	02dc02dc 	.word	0x02dc02dc
  40484c:	02dc02dc 	.word	0x02dc02dc
  404850:	02dc02dc 	.word	0x02dc02dc
  404854:	02dc02dc 	.word	0x02dc02dc
  404858:	021b025a 	.word	0x021b025a
  40485c:	02dc02dc 	.word	0x02dc02dc
  404860:	026e02dc 	.word	0x026e02dc
  404864:	02dc021b 	.word	0x02dc021b
  404868:	027302dc 	.word	0x027302dc
  40486c:	01f502dc 	.word	0x01f502dc
  404870:	02090182 	.word	0x02090182
  404874:	02dc02d7 	.word	0x02dc02d7
  404878:	02dc029a 	.word	0x02dc029a
  40487c:	02dc00a7 	.word	0x02dc00a7
  404880:	022e02dc 	.word	0x022e02dc
  404884:	f10a 0a08 	add.w	sl, sl, #8
  404888:	9b03      	ldr	r3, [sp, #12]
  40488a:	442b      	add	r3, r5
  40488c:	9303      	str	r3, [sp, #12]
  40488e:	e786      	b.n	40479e <_vfiprintf_r+0xc2>
  404890:	4659      	mov	r1, fp
  404892:	9806      	ldr	r0, [sp, #24]
  404894:	f000 fdac 	bl	4053f0 <__swsetup_r>
  404898:	bb18      	cbnz	r0, 4048e2 <_vfiprintf_r+0x206>
  40489a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40489e:	f001 031a 	and.w	r3, r1, #26
  4048a2:	2b0a      	cmp	r3, #10
  4048a4:	f47f af4b 	bne.w	40473e <_vfiprintf_r+0x62>
  4048a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4048ac:	2b00      	cmp	r3, #0
  4048ae:	f6ff af46 	blt.w	40473e <_vfiprintf_r+0x62>
  4048b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4048b6:	07db      	lsls	r3, r3, #31
  4048b8:	d405      	bmi.n	4048c6 <_vfiprintf_r+0x1ea>
  4048ba:	058f      	lsls	r7, r1, #22
  4048bc:	d403      	bmi.n	4048c6 <_vfiprintf_r+0x1ea>
  4048be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4048c2:	f001 fac3 	bl	405e4c <__retarget_lock_release_recursive>
  4048c6:	462b      	mov	r3, r5
  4048c8:	4642      	mov	r2, r8
  4048ca:	4659      	mov	r1, fp
  4048cc:	9806      	ldr	r0, [sp, #24]
  4048ce:	f000 fd4d 	bl	40536c <__sbprintf>
  4048d2:	9003      	str	r0, [sp, #12]
  4048d4:	9803      	ldr	r0, [sp, #12]
  4048d6:	b02d      	add	sp, #180	; 0xb4
  4048d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048dc:	f000 fef4 	bl	4056c8 <__sinit>
  4048e0:	e709      	b.n	4046f6 <_vfiprintf_r+0x1a>
  4048e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4048e6:	07d9      	lsls	r1, r3, #31
  4048e8:	d404      	bmi.n	4048f4 <_vfiprintf_r+0x218>
  4048ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4048ee:	059a      	lsls	r2, r3, #22
  4048f0:	f140 84aa 	bpl.w	405248 <_vfiprintf_r+0xb6c>
  4048f4:	f04f 33ff 	mov.w	r3, #4294967295
  4048f8:	9303      	str	r3, [sp, #12]
  4048fa:	9803      	ldr	r0, [sp, #12]
  4048fc:	b02d      	add	sp, #180	; 0xb4
  4048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404902:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404906:	f001 fa9f 	bl	405e48 <__retarget_lock_acquire_recursive>
  40490a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40490e:	b281      	uxth	r1, r0
  404910:	e6fb      	b.n	40470a <_vfiprintf_r+0x2e>
  404912:	4276      	negs	r6, r6
  404914:	9207      	str	r2, [sp, #28]
  404916:	f043 0304 	orr.w	r3, r3, #4
  40491a:	f898 2000 	ldrb.w	r2, [r8]
  40491e:	e74f      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404920:	9608      	str	r6, [sp, #32]
  404922:	069e      	lsls	r6, r3, #26
  404924:	f100 8450 	bmi.w	4051c8 <_vfiprintf_r+0xaec>
  404928:	9907      	ldr	r1, [sp, #28]
  40492a:	06dd      	lsls	r5, r3, #27
  40492c:	460a      	mov	r2, r1
  40492e:	f100 83ef 	bmi.w	405110 <_vfiprintf_r+0xa34>
  404932:	0658      	lsls	r0, r3, #25
  404934:	f140 83ec 	bpl.w	405110 <_vfiprintf_r+0xa34>
  404938:	880e      	ldrh	r6, [r1, #0]
  40493a:	3104      	adds	r1, #4
  40493c:	2700      	movs	r7, #0
  40493e:	2201      	movs	r2, #1
  404940:	9107      	str	r1, [sp, #28]
  404942:	f04f 0100 	mov.w	r1, #0
  404946:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40494a:	2500      	movs	r5, #0
  40494c:	1c61      	adds	r1, r4, #1
  40494e:	f000 8116 	beq.w	404b7e <_vfiprintf_r+0x4a2>
  404952:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404956:	9102      	str	r1, [sp, #8]
  404958:	ea56 0107 	orrs.w	r1, r6, r7
  40495c:	f040 8114 	bne.w	404b88 <_vfiprintf_r+0x4ac>
  404960:	2c00      	cmp	r4, #0
  404962:	f040 835c 	bne.w	40501e <_vfiprintf_r+0x942>
  404966:	2a00      	cmp	r2, #0
  404968:	f040 83b7 	bne.w	4050da <_vfiprintf_r+0x9fe>
  40496c:	f013 0301 	ands.w	r3, r3, #1
  404970:	9305      	str	r3, [sp, #20]
  404972:	f000 8457 	beq.w	405224 <_vfiprintf_r+0xb48>
  404976:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40497a:	2330      	movs	r3, #48	; 0x30
  40497c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404980:	9b05      	ldr	r3, [sp, #20]
  404982:	42a3      	cmp	r3, r4
  404984:	bfb8      	it	lt
  404986:	4623      	movlt	r3, r4
  404988:	9301      	str	r3, [sp, #4]
  40498a:	b10d      	cbz	r5, 404990 <_vfiprintf_r+0x2b4>
  40498c:	3301      	adds	r3, #1
  40498e:	9301      	str	r3, [sp, #4]
  404990:	9b02      	ldr	r3, [sp, #8]
  404992:	f013 0302 	ands.w	r3, r3, #2
  404996:	9309      	str	r3, [sp, #36]	; 0x24
  404998:	d002      	beq.n	4049a0 <_vfiprintf_r+0x2c4>
  40499a:	9b01      	ldr	r3, [sp, #4]
  40499c:	3302      	adds	r3, #2
  40499e:	9301      	str	r3, [sp, #4]
  4049a0:	9b02      	ldr	r3, [sp, #8]
  4049a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4049a6:	930a      	str	r3, [sp, #40]	; 0x28
  4049a8:	f040 8217 	bne.w	404dda <_vfiprintf_r+0x6fe>
  4049ac:	9b08      	ldr	r3, [sp, #32]
  4049ae:	9a01      	ldr	r2, [sp, #4]
  4049b0:	1a9d      	subs	r5, r3, r2
  4049b2:	2d00      	cmp	r5, #0
  4049b4:	f340 8211 	ble.w	404dda <_vfiprintf_r+0x6fe>
  4049b8:	2d10      	cmp	r5, #16
  4049ba:	f340 8490 	ble.w	4052de <_vfiprintf_r+0xc02>
  4049be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049c2:	4ec4      	ldr	r6, [pc, #784]	; (404cd4 <_vfiprintf_r+0x5f8>)
  4049c4:	46d6      	mov	lr, sl
  4049c6:	2710      	movs	r7, #16
  4049c8:	46a2      	mov	sl, r4
  4049ca:	4619      	mov	r1, r3
  4049cc:	9c06      	ldr	r4, [sp, #24]
  4049ce:	e007      	b.n	4049e0 <_vfiprintf_r+0x304>
  4049d0:	f101 0c02 	add.w	ip, r1, #2
  4049d4:	f10e 0e08 	add.w	lr, lr, #8
  4049d8:	4601      	mov	r1, r0
  4049da:	3d10      	subs	r5, #16
  4049dc:	2d10      	cmp	r5, #16
  4049de:	dd11      	ble.n	404a04 <_vfiprintf_r+0x328>
  4049e0:	1c48      	adds	r0, r1, #1
  4049e2:	3210      	adds	r2, #16
  4049e4:	2807      	cmp	r0, #7
  4049e6:	9211      	str	r2, [sp, #68]	; 0x44
  4049e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4049ec:	9010      	str	r0, [sp, #64]	; 0x40
  4049ee:	ddef      	ble.n	4049d0 <_vfiprintf_r+0x2f4>
  4049f0:	2a00      	cmp	r2, #0
  4049f2:	f040 81e4 	bne.w	404dbe <_vfiprintf_r+0x6e2>
  4049f6:	3d10      	subs	r5, #16
  4049f8:	2d10      	cmp	r5, #16
  4049fa:	4611      	mov	r1, r2
  4049fc:	f04f 0c01 	mov.w	ip, #1
  404a00:	46ce      	mov	lr, r9
  404a02:	dced      	bgt.n	4049e0 <_vfiprintf_r+0x304>
  404a04:	4654      	mov	r4, sl
  404a06:	4661      	mov	r1, ip
  404a08:	46f2      	mov	sl, lr
  404a0a:	442a      	add	r2, r5
  404a0c:	2907      	cmp	r1, #7
  404a0e:	9211      	str	r2, [sp, #68]	; 0x44
  404a10:	f8ca 6000 	str.w	r6, [sl]
  404a14:	f8ca 5004 	str.w	r5, [sl, #4]
  404a18:	9110      	str	r1, [sp, #64]	; 0x40
  404a1a:	f300 82ec 	bgt.w	404ff6 <_vfiprintf_r+0x91a>
  404a1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a22:	f10a 0a08 	add.w	sl, sl, #8
  404a26:	1c48      	adds	r0, r1, #1
  404a28:	2d00      	cmp	r5, #0
  404a2a:	f040 81de 	bne.w	404dea <_vfiprintf_r+0x70e>
  404a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a30:	2b00      	cmp	r3, #0
  404a32:	f000 81f8 	beq.w	404e26 <_vfiprintf_r+0x74a>
  404a36:	3202      	adds	r2, #2
  404a38:	a90e      	add	r1, sp, #56	; 0x38
  404a3a:	2302      	movs	r3, #2
  404a3c:	2807      	cmp	r0, #7
  404a3e:	9211      	str	r2, [sp, #68]	; 0x44
  404a40:	9010      	str	r0, [sp, #64]	; 0x40
  404a42:	e88a 000a 	stmia.w	sl, {r1, r3}
  404a46:	f340 81ea 	ble.w	404e1e <_vfiprintf_r+0x742>
  404a4a:	2a00      	cmp	r2, #0
  404a4c:	f040 838c 	bne.w	405168 <_vfiprintf_r+0xa8c>
  404a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a52:	2b80      	cmp	r3, #128	; 0x80
  404a54:	f04f 0001 	mov.w	r0, #1
  404a58:	4611      	mov	r1, r2
  404a5a:	46ca      	mov	sl, r9
  404a5c:	f040 81e7 	bne.w	404e2e <_vfiprintf_r+0x752>
  404a60:	9b08      	ldr	r3, [sp, #32]
  404a62:	9d01      	ldr	r5, [sp, #4]
  404a64:	1b5e      	subs	r6, r3, r5
  404a66:	2e00      	cmp	r6, #0
  404a68:	f340 81e1 	ble.w	404e2e <_vfiprintf_r+0x752>
  404a6c:	2e10      	cmp	r6, #16
  404a6e:	4d9a      	ldr	r5, [pc, #616]	; (404cd8 <_vfiprintf_r+0x5fc>)
  404a70:	f340 8450 	ble.w	405314 <_vfiprintf_r+0xc38>
  404a74:	46d4      	mov	ip, sl
  404a76:	2710      	movs	r7, #16
  404a78:	46a2      	mov	sl, r4
  404a7a:	9c06      	ldr	r4, [sp, #24]
  404a7c:	e007      	b.n	404a8e <_vfiprintf_r+0x3b2>
  404a7e:	f101 0e02 	add.w	lr, r1, #2
  404a82:	f10c 0c08 	add.w	ip, ip, #8
  404a86:	4601      	mov	r1, r0
  404a88:	3e10      	subs	r6, #16
  404a8a:	2e10      	cmp	r6, #16
  404a8c:	dd11      	ble.n	404ab2 <_vfiprintf_r+0x3d6>
  404a8e:	1c48      	adds	r0, r1, #1
  404a90:	3210      	adds	r2, #16
  404a92:	2807      	cmp	r0, #7
  404a94:	9211      	str	r2, [sp, #68]	; 0x44
  404a96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404a9a:	9010      	str	r0, [sp, #64]	; 0x40
  404a9c:	ddef      	ble.n	404a7e <_vfiprintf_r+0x3a2>
  404a9e:	2a00      	cmp	r2, #0
  404aa0:	f040 829d 	bne.w	404fde <_vfiprintf_r+0x902>
  404aa4:	3e10      	subs	r6, #16
  404aa6:	2e10      	cmp	r6, #16
  404aa8:	f04f 0e01 	mov.w	lr, #1
  404aac:	4611      	mov	r1, r2
  404aae:	46cc      	mov	ip, r9
  404ab0:	dced      	bgt.n	404a8e <_vfiprintf_r+0x3b2>
  404ab2:	4654      	mov	r4, sl
  404ab4:	46e2      	mov	sl, ip
  404ab6:	4432      	add	r2, r6
  404ab8:	f1be 0f07 	cmp.w	lr, #7
  404abc:	9211      	str	r2, [sp, #68]	; 0x44
  404abe:	e88a 0060 	stmia.w	sl, {r5, r6}
  404ac2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404ac6:	f300 8369 	bgt.w	40519c <_vfiprintf_r+0xac0>
  404aca:	f10a 0a08 	add.w	sl, sl, #8
  404ace:	f10e 0001 	add.w	r0, lr, #1
  404ad2:	4671      	mov	r1, lr
  404ad4:	e1ab      	b.n	404e2e <_vfiprintf_r+0x752>
  404ad6:	9608      	str	r6, [sp, #32]
  404ad8:	f013 0220 	ands.w	r2, r3, #32
  404adc:	f040 838c 	bne.w	4051f8 <_vfiprintf_r+0xb1c>
  404ae0:	f013 0110 	ands.w	r1, r3, #16
  404ae4:	f040 831a 	bne.w	40511c <_vfiprintf_r+0xa40>
  404ae8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404aec:	f000 8316 	beq.w	40511c <_vfiprintf_r+0xa40>
  404af0:	9807      	ldr	r0, [sp, #28]
  404af2:	460a      	mov	r2, r1
  404af4:	4601      	mov	r1, r0
  404af6:	3104      	adds	r1, #4
  404af8:	8806      	ldrh	r6, [r0, #0]
  404afa:	9107      	str	r1, [sp, #28]
  404afc:	2700      	movs	r7, #0
  404afe:	e720      	b.n	404942 <_vfiprintf_r+0x266>
  404b00:	9608      	str	r6, [sp, #32]
  404b02:	f043 0310 	orr.w	r3, r3, #16
  404b06:	e7e7      	b.n	404ad8 <_vfiprintf_r+0x3fc>
  404b08:	9608      	str	r6, [sp, #32]
  404b0a:	f043 0310 	orr.w	r3, r3, #16
  404b0e:	e708      	b.n	404922 <_vfiprintf_r+0x246>
  404b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404b14:	f898 2000 	ldrb.w	r2, [r8]
  404b18:	e652      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b1e:	2600      	movs	r6, #0
  404b20:	f818 2b01 	ldrb.w	r2, [r8], #1
  404b24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404b28:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404b2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b30:	2909      	cmp	r1, #9
  404b32:	d9f5      	bls.n	404b20 <_vfiprintf_r+0x444>
  404b34:	e646      	b.n	4047c4 <_vfiprintf_r+0xe8>
  404b36:	9608      	str	r6, [sp, #32]
  404b38:	2800      	cmp	r0, #0
  404b3a:	f040 8408 	bne.w	40534e <_vfiprintf_r+0xc72>
  404b3e:	f043 0310 	orr.w	r3, r3, #16
  404b42:	069e      	lsls	r6, r3, #26
  404b44:	f100 834c 	bmi.w	4051e0 <_vfiprintf_r+0xb04>
  404b48:	06dd      	lsls	r5, r3, #27
  404b4a:	f100 82f3 	bmi.w	405134 <_vfiprintf_r+0xa58>
  404b4e:	0658      	lsls	r0, r3, #25
  404b50:	f140 82f0 	bpl.w	405134 <_vfiprintf_r+0xa58>
  404b54:	9d07      	ldr	r5, [sp, #28]
  404b56:	f9b5 6000 	ldrsh.w	r6, [r5]
  404b5a:	462a      	mov	r2, r5
  404b5c:	17f7      	asrs	r7, r6, #31
  404b5e:	3204      	adds	r2, #4
  404b60:	4630      	mov	r0, r6
  404b62:	4639      	mov	r1, r7
  404b64:	9207      	str	r2, [sp, #28]
  404b66:	2800      	cmp	r0, #0
  404b68:	f171 0200 	sbcs.w	r2, r1, #0
  404b6c:	f2c0 835d 	blt.w	40522a <_vfiprintf_r+0xb4e>
  404b70:	1c61      	adds	r1, r4, #1
  404b72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b76:	f04f 0201 	mov.w	r2, #1
  404b7a:	f47f aeea 	bne.w	404952 <_vfiprintf_r+0x276>
  404b7e:	ea56 0107 	orrs.w	r1, r6, r7
  404b82:	f000 824d 	beq.w	405020 <_vfiprintf_r+0x944>
  404b86:	9302      	str	r3, [sp, #8]
  404b88:	2a01      	cmp	r2, #1
  404b8a:	f000 828c 	beq.w	4050a6 <_vfiprintf_r+0x9ca>
  404b8e:	2a02      	cmp	r2, #2
  404b90:	f040 825c 	bne.w	40504c <_vfiprintf_r+0x970>
  404b94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404b96:	46cb      	mov	fp, r9
  404b98:	0933      	lsrs	r3, r6, #4
  404b9a:	f006 010f 	and.w	r1, r6, #15
  404b9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404ba2:	093a      	lsrs	r2, r7, #4
  404ba4:	461e      	mov	r6, r3
  404ba6:	4617      	mov	r7, r2
  404ba8:	5c43      	ldrb	r3, [r0, r1]
  404baa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404bae:	ea56 0307 	orrs.w	r3, r6, r7
  404bb2:	d1f1      	bne.n	404b98 <_vfiprintf_r+0x4bc>
  404bb4:	eba9 030b 	sub.w	r3, r9, fp
  404bb8:	9305      	str	r3, [sp, #20]
  404bba:	e6e1      	b.n	404980 <_vfiprintf_r+0x2a4>
  404bbc:	2800      	cmp	r0, #0
  404bbe:	f040 83c0 	bne.w	405342 <_vfiprintf_r+0xc66>
  404bc2:	0699      	lsls	r1, r3, #26
  404bc4:	f100 8367 	bmi.w	405296 <_vfiprintf_r+0xbba>
  404bc8:	06da      	lsls	r2, r3, #27
  404bca:	f100 80f1 	bmi.w	404db0 <_vfiprintf_r+0x6d4>
  404bce:	065b      	lsls	r3, r3, #25
  404bd0:	f140 80ee 	bpl.w	404db0 <_vfiprintf_r+0x6d4>
  404bd4:	9a07      	ldr	r2, [sp, #28]
  404bd6:	6813      	ldr	r3, [r2, #0]
  404bd8:	3204      	adds	r2, #4
  404bda:	9207      	str	r2, [sp, #28]
  404bdc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404be0:	801a      	strh	r2, [r3, #0]
  404be2:	e5b8      	b.n	404756 <_vfiprintf_r+0x7a>
  404be4:	9807      	ldr	r0, [sp, #28]
  404be6:	4a3d      	ldr	r2, [pc, #244]	; (404cdc <_vfiprintf_r+0x600>)
  404be8:	9608      	str	r6, [sp, #32]
  404bea:	920b      	str	r2, [sp, #44]	; 0x2c
  404bec:	6806      	ldr	r6, [r0, #0]
  404bee:	2278      	movs	r2, #120	; 0x78
  404bf0:	2130      	movs	r1, #48	; 0x30
  404bf2:	3004      	adds	r0, #4
  404bf4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404bf8:	f043 0302 	orr.w	r3, r3, #2
  404bfc:	9007      	str	r0, [sp, #28]
  404bfe:	2700      	movs	r7, #0
  404c00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404c04:	2202      	movs	r2, #2
  404c06:	e69c      	b.n	404942 <_vfiprintf_r+0x266>
  404c08:	9608      	str	r6, [sp, #32]
  404c0a:	2800      	cmp	r0, #0
  404c0c:	d099      	beq.n	404b42 <_vfiprintf_r+0x466>
  404c0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404c12:	e796      	b.n	404b42 <_vfiprintf_r+0x466>
  404c14:	f898 2000 	ldrb.w	r2, [r8]
  404c18:	2d00      	cmp	r5, #0
  404c1a:	f47f add1 	bne.w	4047c0 <_vfiprintf_r+0xe4>
  404c1e:	2001      	movs	r0, #1
  404c20:	2520      	movs	r5, #32
  404c22:	e5cd      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404c24:	f043 0301 	orr.w	r3, r3, #1
  404c28:	f898 2000 	ldrb.w	r2, [r8]
  404c2c:	e5c8      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404c2e:	9608      	str	r6, [sp, #32]
  404c30:	2800      	cmp	r0, #0
  404c32:	f040 8393 	bne.w	40535c <_vfiprintf_r+0xc80>
  404c36:	4929      	ldr	r1, [pc, #164]	; (404cdc <_vfiprintf_r+0x600>)
  404c38:	910b      	str	r1, [sp, #44]	; 0x2c
  404c3a:	069f      	lsls	r7, r3, #26
  404c3c:	f100 82e8 	bmi.w	405210 <_vfiprintf_r+0xb34>
  404c40:	9807      	ldr	r0, [sp, #28]
  404c42:	06de      	lsls	r6, r3, #27
  404c44:	4601      	mov	r1, r0
  404c46:	f100 8270 	bmi.w	40512a <_vfiprintf_r+0xa4e>
  404c4a:	065d      	lsls	r5, r3, #25
  404c4c:	f140 826d 	bpl.w	40512a <_vfiprintf_r+0xa4e>
  404c50:	3104      	adds	r1, #4
  404c52:	8806      	ldrh	r6, [r0, #0]
  404c54:	9107      	str	r1, [sp, #28]
  404c56:	2700      	movs	r7, #0
  404c58:	07d8      	lsls	r0, r3, #31
  404c5a:	f140 8222 	bpl.w	4050a2 <_vfiprintf_r+0x9c6>
  404c5e:	ea56 0107 	orrs.w	r1, r6, r7
  404c62:	f000 821e 	beq.w	4050a2 <_vfiprintf_r+0x9c6>
  404c66:	2130      	movs	r1, #48	; 0x30
  404c68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404c6c:	f043 0302 	orr.w	r3, r3, #2
  404c70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404c74:	2202      	movs	r2, #2
  404c76:	e664      	b.n	404942 <_vfiprintf_r+0x266>
  404c78:	9608      	str	r6, [sp, #32]
  404c7a:	2800      	cmp	r0, #0
  404c7c:	f040 836b 	bne.w	405356 <_vfiprintf_r+0xc7a>
  404c80:	4917      	ldr	r1, [pc, #92]	; (404ce0 <_vfiprintf_r+0x604>)
  404c82:	910b      	str	r1, [sp, #44]	; 0x2c
  404c84:	e7d9      	b.n	404c3a <_vfiprintf_r+0x55e>
  404c86:	9907      	ldr	r1, [sp, #28]
  404c88:	9608      	str	r6, [sp, #32]
  404c8a:	680a      	ldr	r2, [r1, #0]
  404c8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404c90:	f04f 0000 	mov.w	r0, #0
  404c94:	460a      	mov	r2, r1
  404c96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404c9a:	3204      	adds	r2, #4
  404c9c:	2001      	movs	r0, #1
  404c9e:	9001      	str	r0, [sp, #4]
  404ca0:	9207      	str	r2, [sp, #28]
  404ca2:	9005      	str	r0, [sp, #20]
  404ca4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404ca8:	9302      	str	r3, [sp, #8]
  404caa:	2400      	movs	r4, #0
  404cac:	e670      	b.n	404990 <_vfiprintf_r+0x2b4>
  404cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404cb2:	f898 2000 	ldrb.w	r2, [r8]
  404cb6:	e583      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404cb8:	f898 2000 	ldrb.w	r2, [r8]
  404cbc:	2a6c      	cmp	r2, #108	; 0x6c
  404cbe:	bf03      	ittte	eq
  404cc0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404cc4:	f043 0320 	orreq.w	r3, r3, #32
  404cc8:	f108 0801 	addeq.w	r8, r8, #1
  404ccc:	f043 0310 	orrne.w	r3, r3, #16
  404cd0:	e576      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404cd2:	bf00      	nop
  404cd4:	00406e28 	.word	0x00406e28
  404cd8:	00406e38 	.word	0x00406e38
  404cdc:	00406e0c 	.word	0x00406e0c
  404ce0:	00406df8 	.word	0x00406df8
  404ce4:	9907      	ldr	r1, [sp, #28]
  404ce6:	680e      	ldr	r6, [r1, #0]
  404ce8:	460a      	mov	r2, r1
  404cea:	2e00      	cmp	r6, #0
  404cec:	f102 0204 	add.w	r2, r2, #4
  404cf0:	f6ff ae0f 	blt.w	404912 <_vfiprintf_r+0x236>
  404cf4:	9207      	str	r2, [sp, #28]
  404cf6:	f898 2000 	ldrb.w	r2, [r8]
  404cfa:	e561      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404cfc:	f898 2000 	ldrb.w	r2, [r8]
  404d00:	2001      	movs	r0, #1
  404d02:	252b      	movs	r5, #43	; 0x2b
  404d04:	e55c      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404d06:	9907      	ldr	r1, [sp, #28]
  404d08:	9608      	str	r6, [sp, #32]
  404d0a:	f8d1 b000 	ldr.w	fp, [r1]
  404d0e:	f04f 0200 	mov.w	r2, #0
  404d12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404d16:	1d0e      	adds	r6, r1, #4
  404d18:	f1bb 0f00 	cmp.w	fp, #0
  404d1c:	f000 82e5 	beq.w	4052ea <_vfiprintf_r+0xc0e>
  404d20:	1c67      	adds	r7, r4, #1
  404d22:	f000 82c4 	beq.w	4052ae <_vfiprintf_r+0xbd2>
  404d26:	4622      	mov	r2, r4
  404d28:	2100      	movs	r1, #0
  404d2a:	4658      	mov	r0, fp
  404d2c:	9301      	str	r3, [sp, #4]
  404d2e:	f001 f91f 	bl	405f70 <memchr>
  404d32:	9b01      	ldr	r3, [sp, #4]
  404d34:	2800      	cmp	r0, #0
  404d36:	f000 82e5 	beq.w	405304 <_vfiprintf_r+0xc28>
  404d3a:	eba0 020b 	sub.w	r2, r0, fp
  404d3e:	9205      	str	r2, [sp, #20]
  404d40:	9607      	str	r6, [sp, #28]
  404d42:	9302      	str	r3, [sp, #8]
  404d44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404d48:	2400      	movs	r4, #0
  404d4a:	e619      	b.n	404980 <_vfiprintf_r+0x2a4>
  404d4c:	f898 2000 	ldrb.w	r2, [r8]
  404d50:	2a2a      	cmp	r2, #42	; 0x2a
  404d52:	f108 0701 	add.w	r7, r8, #1
  404d56:	f000 82e9 	beq.w	40532c <_vfiprintf_r+0xc50>
  404d5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d5e:	2909      	cmp	r1, #9
  404d60:	46b8      	mov	r8, r7
  404d62:	f04f 0400 	mov.w	r4, #0
  404d66:	f63f ad2d 	bhi.w	4047c4 <_vfiprintf_r+0xe8>
  404d6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404d6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404d76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d7a:	2909      	cmp	r1, #9
  404d7c:	d9f5      	bls.n	404d6a <_vfiprintf_r+0x68e>
  404d7e:	e521      	b.n	4047c4 <_vfiprintf_r+0xe8>
  404d80:	f043 0320 	orr.w	r3, r3, #32
  404d84:	f898 2000 	ldrb.w	r2, [r8]
  404d88:	e51a      	b.n	4047c0 <_vfiprintf_r+0xe4>
  404d8a:	9608      	str	r6, [sp, #32]
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f040 82db 	bne.w	405348 <_vfiprintf_r+0xc6c>
  404d92:	2a00      	cmp	r2, #0
  404d94:	f000 80e7 	beq.w	404f66 <_vfiprintf_r+0x88a>
  404d98:	2101      	movs	r1, #1
  404d9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404d9e:	f04f 0200 	mov.w	r2, #0
  404da2:	9101      	str	r1, [sp, #4]
  404da4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404da8:	9105      	str	r1, [sp, #20]
  404daa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404dae:	e77b      	b.n	404ca8 <_vfiprintf_r+0x5cc>
  404db0:	9a07      	ldr	r2, [sp, #28]
  404db2:	6813      	ldr	r3, [r2, #0]
  404db4:	3204      	adds	r2, #4
  404db6:	9207      	str	r2, [sp, #28]
  404db8:	9a03      	ldr	r2, [sp, #12]
  404dba:	601a      	str	r2, [r3, #0]
  404dbc:	e4cb      	b.n	404756 <_vfiprintf_r+0x7a>
  404dbe:	aa0f      	add	r2, sp, #60	; 0x3c
  404dc0:	9904      	ldr	r1, [sp, #16]
  404dc2:	4620      	mov	r0, r4
  404dc4:	f7ff fc4a 	bl	40465c <__sprint_r.part.0>
  404dc8:	2800      	cmp	r0, #0
  404dca:	f040 8139 	bne.w	405040 <_vfiprintf_r+0x964>
  404dce:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dd2:	f101 0c01 	add.w	ip, r1, #1
  404dd6:	46ce      	mov	lr, r9
  404dd8:	e5ff      	b.n	4049da <_vfiprintf_r+0x2fe>
  404dda:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ddc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dde:	1c48      	adds	r0, r1, #1
  404de0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404de4:	2d00      	cmp	r5, #0
  404de6:	f43f ae22 	beq.w	404a2e <_vfiprintf_r+0x352>
  404dea:	3201      	adds	r2, #1
  404dec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404df0:	2101      	movs	r1, #1
  404df2:	2807      	cmp	r0, #7
  404df4:	9211      	str	r2, [sp, #68]	; 0x44
  404df6:	9010      	str	r0, [sp, #64]	; 0x40
  404df8:	f8ca 5000 	str.w	r5, [sl]
  404dfc:	f8ca 1004 	str.w	r1, [sl, #4]
  404e00:	f340 8108 	ble.w	405014 <_vfiprintf_r+0x938>
  404e04:	2a00      	cmp	r2, #0
  404e06:	f040 81bc 	bne.w	405182 <_vfiprintf_r+0xaa6>
  404e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e0c:	2b00      	cmp	r3, #0
  404e0e:	f43f ae1f 	beq.w	404a50 <_vfiprintf_r+0x374>
  404e12:	ab0e      	add	r3, sp, #56	; 0x38
  404e14:	2202      	movs	r2, #2
  404e16:	4608      	mov	r0, r1
  404e18:	931c      	str	r3, [sp, #112]	; 0x70
  404e1a:	921d      	str	r2, [sp, #116]	; 0x74
  404e1c:	46ca      	mov	sl, r9
  404e1e:	4601      	mov	r1, r0
  404e20:	f10a 0a08 	add.w	sl, sl, #8
  404e24:	3001      	adds	r0, #1
  404e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e28:	2b80      	cmp	r3, #128	; 0x80
  404e2a:	f43f ae19 	beq.w	404a60 <_vfiprintf_r+0x384>
  404e2e:	9b05      	ldr	r3, [sp, #20]
  404e30:	1ae4      	subs	r4, r4, r3
  404e32:	2c00      	cmp	r4, #0
  404e34:	dd2e      	ble.n	404e94 <_vfiprintf_r+0x7b8>
  404e36:	2c10      	cmp	r4, #16
  404e38:	4db3      	ldr	r5, [pc, #716]	; (405108 <_vfiprintf_r+0xa2c>)
  404e3a:	dd1e      	ble.n	404e7a <_vfiprintf_r+0x79e>
  404e3c:	46d6      	mov	lr, sl
  404e3e:	2610      	movs	r6, #16
  404e40:	9f06      	ldr	r7, [sp, #24]
  404e42:	f8dd a010 	ldr.w	sl, [sp, #16]
  404e46:	e006      	b.n	404e56 <_vfiprintf_r+0x77a>
  404e48:	1c88      	adds	r0, r1, #2
  404e4a:	f10e 0e08 	add.w	lr, lr, #8
  404e4e:	4619      	mov	r1, r3
  404e50:	3c10      	subs	r4, #16
  404e52:	2c10      	cmp	r4, #16
  404e54:	dd10      	ble.n	404e78 <_vfiprintf_r+0x79c>
  404e56:	1c4b      	adds	r3, r1, #1
  404e58:	3210      	adds	r2, #16
  404e5a:	2b07      	cmp	r3, #7
  404e5c:	9211      	str	r2, [sp, #68]	; 0x44
  404e5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404e62:	9310      	str	r3, [sp, #64]	; 0x40
  404e64:	ddf0      	ble.n	404e48 <_vfiprintf_r+0x76c>
  404e66:	2a00      	cmp	r2, #0
  404e68:	d165      	bne.n	404f36 <_vfiprintf_r+0x85a>
  404e6a:	3c10      	subs	r4, #16
  404e6c:	2c10      	cmp	r4, #16
  404e6e:	f04f 0001 	mov.w	r0, #1
  404e72:	4611      	mov	r1, r2
  404e74:	46ce      	mov	lr, r9
  404e76:	dcee      	bgt.n	404e56 <_vfiprintf_r+0x77a>
  404e78:	46f2      	mov	sl, lr
  404e7a:	4422      	add	r2, r4
  404e7c:	2807      	cmp	r0, #7
  404e7e:	9211      	str	r2, [sp, #68]	; 0x44
  404e80:	f8ca 5000 	str.w	r5, [sl]
  404e84:	f8ca 4004 	str.w	r4, [sl, #4]
  404e88:	9010      	str	r0, [sp, #64]	; 0x40
  404e8a:	f300 8085 	bgt.w	404f98 <_vfiprintf_r+0x8bc>
  404e8e:	f10a 0a08 	add.w	sl, sl, #8
  404e92:	3001      	adds	r0, #1
  404e94:	9905      	ldr	r1, [sp, #20]
  404e96:	f8ca b000 	str.w	fp, [sl]
  404e9a:	440a      	add	r2, r1
  404e9c:	2807      	cmp	r0, #7
  404e9e:	9211      	str	r2, [sp, #68]	; 0x44
  404ea0:	f8ca 1004 	str.w	r1, [sl, #4]
  404ea4:	9010      	str	r0, [sp, #64]	; 0x40
  404ea6:	f340 8082 	ble.w	404fae <_vfiprintf_r+0x8d2>
  404eaa:	2a00      	cmp	r2, #0
  404eac:	f040 8118 	bne.w	4050e0 <_vfiprintf_r+0xa04>
  404eb0:	9b02      	ldr	r3, [sp, #8]
  404eb2:	9210      	str	r2, [sp, #64]	; 0x40
  404eb4:	0758      	lsls	r0, r3, #29
  404eb6:	d535      	bpl.n	404f24 <_vfiprintf_r+0x848>
  404eb8:	9b08      	ldr	r3, [sp, #32]
  404eba:	9901      	ldr	r1, [sp, #4]
  404ebc:	1a5c      	subs	r4, r3, r1
  404ebe:	2c00      	cmp	r4, #0
  404ec0:	f340 80e7 	ble.w	405092 <_vfiprintf_r+0x9b6>
  404ec4:	46ca      	mov	sl, r9
  404ec6:	2c10      	cmp	r4, #16
  404ec8:	f340 8218 	ble.w	4052fc <_vfiprintf_r+0xc20>
  404ecc:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ece:	4e8f      	ldr	r6, [pc, #572]	; (40510c <_vfiprintf_r+0xa30>)
  404ed0:	9f06      	ldr	r7, [sp, #24]
  404ed2:	f8dd b010 	ldr.w	fp, [sp, #16]
  404ed6:	2510      	movs	r5, #16
  404ed8:	e006      	b.n	404ee8 <_vfiprintf_r+0x80c>
  404eda:	1c88      	adds	r0, r1, #2
  404edc:	f10a 0a08 	add.w	sl, sl, #8
  404ee0:	4619      	mov	r1, r3
  404ee2:	3c10      	subs	r4, #16
  404ee4:	2c10      	cmp	r4, #16
  404ee6:	dd11      	ble.n	404f0c <_vfiprintf_r+0x830>
  404ee8:	1c4b      	adds	r3, r1, #1
  404eea:	3210      	adds	r2, #16
  404eec:	2b07      	cmp	r3, #7
  404eee:	9211      	str	r2, [sp, #68]	; 0x44
  404ef0:	f8ca 6000 	str.w	r6, [sl]
  404ef4:	f8ca 5004 	str.w	r5, [sl, #4]
  404ef8:	9310      	str	r3, [sp, #64]	; 0x40
  404efa:	ddee      	ble.n	404eda <_vfiprintf_r+0x7fe>
  404efc:	bb42      	cbnz	r2, 404f50 <_vfiprintf_r+0x874>
  404efe:	3c10      	subs	r4, #16
  404f00:	2c10      	cmp	r4, #16
  404f02:	f04f 0001 	mov.w	r0, #1
  404f06:	4611      	mov	r1, r2
  404f08:	46ca      	mov	sl, r9
  404f0a:	dced      	bgt.n	404ee8 <_vfiprintf_r+0x80c>
  404f0c:	4422      	add	r2, r4
  404f0e:	2807      	cmp	r0, #7
  404f10:	9211      	str	r2, [sp, #68]	; 0x44
  404f12:	f8ca 6000 	str.w	r6, [sl]
  404f16:	f8ca 4004 	str.w	r4, [sl, #4]
  404f1a:	9010      	str	r0, [sp, #64]	; 0x40
  404f1c:	dd51      	ble.n	404fc2 <_vfiprintf_r+0x8e6>
  404f1e:	2a00      	cmp	r2, #0
  404f20:	f040 819b 	bne.w	40525a <_vfiprintf_r+0xb7e>
  404f24:	9b03      	ldr	r3, [sp, #12]
  404f26:	9a08      	ldr	r2, [sp, #32]
  404f28:	9901      	ldr	r1, [sp, #4]
  404f2a:	428a      	cmp	r2, r1
  404f2c:	bfac      	ite	ge
  404f2e:	189b      	addge	r3, r3, r2
  404f30:	185b      	addlt	r3, r3, r1
  404f32:	9303      	str	r3, [sp, #12]
  404f34:	e04e      	b.n	404fd4 <_vfiprintf_r+0x8f8>
  404f36:	aa0f      	add	r2, sp, #60	; 0x3c
  404f38:	4651      	mov	r1, sl
  404f3a:	4638      	mov	r0, r7
  404f3c:	f7ff fb8e 	bl	40465c <__sprint_r.part.0>
  404f40:	2800      	cmp	r0, #0
  404f42:	f040 813f 	bne.w	4051c4 <_vfiprintf_r+0xae8>
  404f46:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f4a:	1c48      	adds	r0, r1, #1
  404f4c:	46ce      	mov	lr, r9
  404f4e:	e77f      	b.n	404e50 <_vfiprintf_r+0x774>
  404f50:	aa0f      	add	r2, sp, #60	; 0x3c
  404f52:	4659      	mov	r1, fp
  404f54:	4638      	mov	r0, r7
  404f56:	f7ff fb81 	bl	40465c <__sprint_r.part.0>
  404f5a:	b960      	cbnz	r0, 404f76 <_vfiprintf_r+0x89a>
  404f5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f60:	1c48      	adds	r0, r1, #1
  404f62:	46ca      	mov	sl, r9
  404f64:	e7bd      	b.n	404ee2 <_vfiprintf_r+0x806>
  404f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f68:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f6c:	2b00      	cmp	r3, #0
  404f6e:	f040 81d4 	bne.w	40531a <_vfiprintf_r+0xc3e>
  404f72:	2300      	movs	r3, #0
  404f74:	9310      	str	r3, [sp, #64]	; 0x40
  404f76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404f7a:	f013 0f01 	tst.w	r3, #1
  404f7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f82:	d102      	bne.n	404f8a <_vfiprintf_r+0x8ae>
  404f84:	059a      	lsls	r2, r3, #22
  404f86:	f140 80de 	bpl.w	405146 <_vfiprintf_r+0xa6a>
  404f8a:	065b      	lsls	r3, r3, #25
  404f8c:	f53f acb2 	bmi.w	4048f4 <_vfiprintf_r+0x218>
  404f90:	9803      	ldr	r0, [sp, #12]
  404f92:	b02d      	add	sp, #180	; 0xb4
  404f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f98:	2a00      	cmp	r2, #0
  404f9a:	f040 8106 	bne.w	4051aa <_vfiprintf_r+0xace>
  404f9e:	9a05      	ldr	r2, [sp, #20]
  404fa0:	921d      	str	r2, [sp, #116]	; 0x74
  404fa2:	2301      	movs	r3, #1
  404fa4:	9211      	str	r2, [sp, #68]	; 0x44
  404fa6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404faa:	9310      	str	r3, [sp, #64]	; 0x40
  404fac:	46ca      	mov	sl, r9
  404fae:	f10a 0a08 	add.w	sl, sl, #8
  404fb2:	9b02      	ldr	r3, [sp, #8]
  404fb4:	0759      	lsls	r1, r3, #29
  404fb6:	d504      	bpl.n	404fc2 <_vfiprintf_r+0x8e6>
  404fb8:	9b08      	ldr	r3, [sp, #32]
  404fba:	9901      	ldr	r1, [sp, #4]
  404fbc:	1a5c      	subs	r4, r3, r1
  404fbe:	2c00      	cmp	r4, #0
  404fc0:	dc81      	bgt.n	404ec6 <_vfiprintf_r+0x7ea>
  404fc2:	9b03      	ldr	r3, [sp, #12]
  404fc4:	9908      	ldr	r1, [sp, #32]
  404fc6:	9801      	ldr	r0, [sp, #4]
  404fc8:	4281      	cmp	r1, r0
  404fca:	bfac      	ite	ge
  404fcc:	185b      	addge	r3, r3, r1
  404fce:	181b      	addlt	r3, r3, r0
  404fd0:	9303      	str	r3, [sp, #12]
  404fd2:	bb72      	cbnz	r2, 405032 <_vfiprintf_r+0x956>
  404fd4:	2300      	movs	r3, #0
  404fd6:	9310      	str	r3, [sp, #64]	; 0x40
  404fd8:	46ca      	mov	sl, r9
  404fda:	f7ff bbbc 	b.w	404756 <_vfiprintf_r+0x7a>
  404fde:	aa0f      	add	r2, sp, #60	; 0x3c
  404fe0:	9904      	ldr	r1, [sp, #16]
  404fe2:	4620      	mov	r0, r4
  404fe4:	f7ff fb3a 	bl	40465c <__sprint_r.part.0>
  404fe8:	bb50      	cbnz	r0, 405040 <_vfiprintf_r+0x964>
  404fea:	9910      	ldr	r1, [sp, #64]	; 0x40
  404fec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fee:	f101 0e01 	add.w	lr, r1, #1
  404ff2:	46cc      	mov	ip, r9
  404ff4:	e548      	b.n	404a88 <_vfiprintf_r+0x3ac>
  404ff6:	2a00      	cmp	r2, #0
  404ff8:	f040 8140 	bne.w	40527c <_vfiprintf_r+0xba0>
  404ffc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405000:	2900      	cmp	r1, #0
  405002:	f000 811b 	beq.w	40523c <_vfiprintf_r+0xb60>
  405006:	2201      	movs	r2, #1
  405008:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40500c:	4610      	mov	r0, r2
  40500e:	921d      	str	r2, [sp, #116]	; 0x74
  405010:	911c      	str	r1, [sp, #112]	; 0x70
  405012:	46ca      	mov	sl, r9
  405014:	4601      	mov	r1, r0
  405016:	f10a 0a08 	add.w	sl, sl, #8
  40501a:	3001      	adds	r0, #1
  40501c:	e507      	b.n	404a2e <_vfiprintf_r+0x352>
  40501e:	9b02      	ldr	r3, [sp, #8]
  405020:	2a01      	cmp	r2, #1
  405022:	f000 8098 	beq.w	405156 <_vfiprintf_r+0xa7a>
  405026:	2a02      	cmp	r2, #2
  405028:	d10d      	bne.n	405046 <_vfiprintf_r+0x96a>
  40502a:	9302      	str	r3, [sp, #8]
  40502c:	2600      	movs	r6, #0
  40502e:	2700      	movs	r7, #0
  405030:	e5b0      	b.n	404b94 <_vfiprintf_r+0x4b8>
  405032:	aa0f      	add	r2, sp, #60	; 0x3c
  405034:	9904      	ldr	r1, [sp, #16]
  405036:	9806      	ldr	r0, [sp, #24]
  405038:	f7ff fb10 	bl	40465c <__sprint_r.part.0>
  40503c:	2800      	cmp	r0, #0
  40503e:	d0c9      	beq.n	404fd4 <_vfiprintf_r+0x8f8>
  405040:	f8dd b010 	ldr.w	fp, [sp, #16]
  405044:	e797      	b.n	404f76 <_vfiprintf_r+0x89a>
  405046:	9302      	str	r3, [sp, #8]
  405048:	2600      	movs	r6, #0
  40504a:	2700      	movs	r7, #0
  40504c:	4649      	mov	r1, r9
  40504e:	e000      	b.n	405052 <_vfiprintf_r+0x976>
  405050:	4659      	mov	r1, fp
  405052:	08f2      	lsrs	r2, r6, #3
  405054:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405058:	08f8      	lsrs	r0, r7, #3
  40505a:	f006 0307 	and.w	r3, r6, #7
  40505e:	4607      	mov	r7, r0
  405060:	4616      	mov	r6, r2
  405062:	3330      	adds	r3, #48	; 0x30
  405064:	ea56 0207 	orrs.w	r2, r6, r7
  405068:	f801 3c01 	strb.w	r3, [r1, #-1]
  40506c:	f101 3bff 	add.w	fp, r1, #4294967295
  405070:	d1ee      	bne.n	405050 <_vfiprintf_r+0x974>
  405072:	9a02      	ldr	r2, [sp, #8]
  405074:	07d6      	lsls	r6, r2, #31
  405076:	f57f ad9d 	bpl.w	404bb4 <_vfiprintf_r+0x4d8>
  40507a:	2b30      	cmp	r3, #48	; 0x30
  40507c:	f43f ad9a 	beq.w	404bb4 <_vfiprintf_r+0x4d8>
  405080:	3902      	subs	r1, #2
  405082:	2330      	movs	r3, #48	; 0x30
  405084:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405088:	eba9 0301 	sub.w	r3, r9, r1
  40508c:	9305      	str	r3, [sp, #20]
  40508e:	468b      	mov	fp, r1
  405090:	e476      	b.n	404980 <_vfiprintf_r+0x2a4>
  405092:	9b03      	ldr	r3, [sp, #12]
  405094:	9a08      	ldr	r2, [sp, #32]
  405096:	428a      	cmp	r2, r1
  405098:	bfac      	ite	ge
  40509a:	189b      	addge	r3, r3, r2
  40509c:	185b      	addlt	r3, r3, r1
  40509e:	9303      	str	r3, [sp, #12]
  4050a0:	e798      	b.n	404fd4 <_vfiprintf_r+0x8f8>
  4050a2:	2202      	movs	r2, #2
  4050a4:	e44d      	b.n	404942 <_vfiprintf_r+0x266>
  4050a6:	2f00      	cmp	r7, #0
  4050a8:	bf08      	it	eq
  4050aa:	2e0a      	cmpeq	r6, #10
  4050ac:	d352      	bcc.n	405154 <_vfiprintf_r+0xa78>
  4050ae:	46cb      	mov	fp, r9
  4050b0:	4630      	mov	r0, r6
  4050b2:	4639      	mov	r1, r7
  4050b4:	220a      	movs	r2, #10
  4050b6:	2300      	movs	r3, #0
  4050b8:	f001 fbc6 	bl	406848 <__aeabi_uldivmod>
  4050bc:	3230      	adds	r2, #48	; 0x30
  4050be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4050c2:	4630      	mov	r0, r6
  4050c4:	4639      	mov	r1, r7
  4050c6:	2300      	movs	r3, #0
  4050c8:	220a      	movs	r2, #10
  4050ca:	f001 fbbd 	bl	406848 <__aeabi_uldivmod>
  4050ce:	4606      	mov	r6, r0
  4050d0:	460f      	mov	r7, r1
  4050d2:	ea56 0307 	orrs.w	r3, r6, r7
  4050d6:	d1eb      	bne.n	4050b0 <_vfiprintf_r+0x9d4>
  4050d8:	e56c      	b.n	404bb4 <_vfiprintf_r+0x4d8>
  4050da:	9405      	str	r4, [sp, #20]
  4050dc:	46cb      	mov	fp, r9
  4050de:	e44f      	b.n	404980 <_vfiprintf_r+0x2a4>
  4050e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4050e2:	9904      	ldr	r1, [sp, #16]
  4050e4:	9806      	ldr	r0, [sp, #24]
  4050e6:	f7ff fab9 	bl	40465c <__sprint_r.part.0>
  4050ea:	2800      	cmp	r0, #0
  4050ec:	d1a8      	bne.n	405040 <_vfiprintf_r+0x964>
  4050ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050f0:	46ca      	mov	sl, r9
  4050f2:	e75e      	b.n	404fb2 <_vfiprintf_r+0x8d6>
  4050f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4050f6:	9904      	ldr	r1, [sp, #16]
  4050f8:	9806      	ldr	r0, [sp, #24]
  4050fa:	f7ff faaf 	bl	40465c <__sprint_r.part.0>
  4050fe:	2800      	cmp	r0, #0
  405100:	d19e      	bne.n	405040 <_vfiprintf_r+0x964>
  405102:	46ca      	mov	sl, r9
  405104:	f7ff bbc0 	b.w	404888 <_vfiprintf_r+0x1ac>
  405108:	00406e38 	.word	0x00406e38
  40510c:	00406e28 	.word	0x00406e28
  405110:	3104      	adds	r1, #4
  405112:	6816      	ldr	r6, [r2, #0]
  405114:	9107      	str	r1, [sp, #28]
  405116:	2201      	movs	r2, #1
  405118:	2700      	movs	r7, #0
  40511a:	e412      	b.n	404942 <_vfiprintf_r+0x266>
  40511c:	9807      	ldr	r0, [sp, #28]
  40511e:	4601      	mov	r1, r0
  405120:	3104      	adds	r1, #4
  405122:	6806      	ldr	r6, [r0, #0]
  405124:	9107      	str	r1, [sp, #28]
  405126:	2700      	movs	r7, #0
  405128:	e40b      	b.n	404942 <_vfiprintf_r+0x266>
  40512a:	680e      	ldr	r6, [r1, #0]
  40512c:	3104      	adds	r1, #4
  40512e:	9107      	str	r1, [sp, #28]
  405130:	2700      	movs	r7, #0
  405132:	e591      	b.n	404c58 <_vfiprintf_r+0x57c>
  405134:	9907      	ldr	r1, [sp, #28]
  405136:	680e      	ldr	r6, [r1, #0]
  405138:	460a      	mov	r2, r1
  40513a:	17f7      	asrs	r7, r6, #31
  40513c:	3204      	adds	r2, #4
  40513e:	9207      	str	r2, [sp, #28]
  405140:	4630      	mov	r0, r6
  405142:	4639      	mov	r1, r7
  405144:	e50f      	b.n	404b66 <_vfiprintf_r+0x48a>
  405146:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40514a:	f000 fe7f 	bl	405e4c <__retarget_lock_release_recursive>
  40514e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405152:	e71a      	b.n	404f8a <_vfiprintf_r+0x8ae>
  405154:	9b02      	ldr	r3, [sp, #8]
  405156:	9302      	str	r3, [sp, #8]
  405158:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40515c:	3630      	adds	r6, #48	; 0x30
  40515e:	2301      	movs	r3, #1
  405160:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405164:	9305      	str	r3, [sp, #20]
  405166:	e40b      	b.n	404980 <_vfiprintf_r+0x2a4>
  405168:	aa0f      	add	r2, sp, #60	; 0x3c
  40516a:	9904      	ldr	r1, [sp, #16]
  40516c:	9806      	ldr	r0, [sp, #24]
  40516e:	f7ff fa75 	bl	40465c <__sprint_r.part.0>
  405172:	2800      	cmp	r0, #0
  405174:	f47f af64 	bne.w	405040 <_vfiprintf_r+0x964>
  405178:	9910      	ldr	r1, [sp, #64]	; 0x40
  40517a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40517c:	1c48      	adds	r0, r1, #1
  40517e:	46ca      	mov	sl, r9
  405180:	e651      	b.n	404e26 <_vfiprintf_r+0x74a>
  405182:	aa0f      	add	r2, sp, #60	; 0x3c
  405184:	9904      	ldr	r1, [sp, #16]
  405186:	9806      	ldr	r0, [sp, #24]
  405188:	f7ff fa68 	bl	40465c <__sprint_r.part.0>
  40518c:	2800      	cmp	r0, #0
  40518e:	f47f af57 	bne.w	405040 <_vfiprintf_r+0x964>
  405192:	9910      	ldr	r1, [sp, #64]	; 0x40
  405194:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405196:	1c48      	adds	r0, r1, #1
  405198:	46ca      	mov	sl, r9
  40519a:	e448      	b.n	404a2e <_vfiprintf_r+0x352>
  40519c:	2a00      	cmp	r2, #0
  40519e:	f040 8091 	bne.w	4052c4 <_vfiprintf_r+0xbe8>
  4051a2:	2001      	movs	r0, #1
  4051a4:	4611      	mov	r1, r2
  4051a6:	46ca      	mov	sl, r9
  4051a8:	e641      	b.n	404e2e <_vfiprintf_r+0x752>
  4051aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4051ac:	9904      	ldr	r1, [sp, #16]
  4051ae:	9806      	ldr	r0, [sp, #24]
  4051b0:	f7ff fa54 	bl	40465c <__sprint_r.part.0>
  4051b4:	2800      	cmp	r0, #0
  4051b6:	f47f af43 	bne.w	405040 <_vfiprintf_r+0x964>
  4051ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4051bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051be:	3001      	adds	r0, #1
  4051c0:	46ca      	mov	sl, r9
  4051c2:	e667      	b.n	404e94 <_vfiprintf_r+0x7b8>
  4051c4:	46d3      	mov	fp, sl
  4051c6:	e6d6      	b.n	404f76 <_vfiprintf_r+0x89a>
  4051c8:	9e07      	ldr	r6, [sp, #28]
  4051ca:	3607      	adds	r6, #7
  4051cc:	f026 0207 	bic.w	r2, r6, #7
  4051d0:	f102 0108 	add.w	r1, r2, #8
  4051d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4051d8:	9107      	str	r1, [sp, #28]
  4051da:	2201      	movs	r2, #1
  4051dc:	f7ff bbb1 	b.w	404942 <_vfiprintf_r+0x266>
  4051e0:	9e07      	ldr	r6, [sp, #28]
  4051e2:	3607      	adds	r6, #7
  4051e4:	f026 0607 	bic.w	r6, r6, #7
  4051e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4051ec:	f106 0208 	add.w	r2, r6, #8
  4051f0:	9207      	str	r2, [sp, #28]
  4051f2:	4606      	mov	r6, r0
  4051f4:	460f      	mov	r7, r1
  4051f6:	e4b6      	b.n	404b66 <_vfiprintf_r+0x48a>
  4051f8:	9e07      	ldr	r6, [sp, #28]
  4051fa:	3607      	adds	r6, #7
  4051fc:	f026 0207 	bic.w	r2, r6, #7
  405200:	f102 0108 	add.w	r1, r2, #8
  405204:	e9d2 6700 	ldrd	r6, r7, [r2]
  405208:	9107      	str	r1, [sp, #28]
  40520a:	2200      	movs	r2, #0
  40520c:	f7ff bb99 	b.w	404942 <_vfiprintf_r+0x266>
  405210:	9e07      	ldr	r6, [sp, #28]
  405212:	3607      	adds	r6, #7
  405214:	f026 0107 	bic.w	r1, r6, #7
  405218:	f101 0008 	add.w	r0, r1, #8
  40521c:	9007      	str	r0, [sp, #28]
  40521e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405222:	e519      	b.n	404c58 <_vfiprintf_r+0x57c>
  405224:	46cb      	mov	fp, r9
  405226:	f7ff bbab 	b.w	404980 <_vfiprintf_r+0x2a4>
  40522a:	252d      	movs	r5, #45	; 0x2d
  40522c:	4276      	negs	r6, r6
  40522e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405232:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405236:	2201      	movs	r2, #1
  405238:	f7ff bb88 	b.w	40494c <_vfiprintf_r+0x270>
  40523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40523e:	b9b3      	cbnz	r3, 40526e <_vfiprintf_r+0xb92>
  405240:	4611      	mov	r1, r2
  405242:	2001      	movs	r0, #1
  405244:	46ca      	mov	sl, r9
  405246:	e5f2      	b.n	404e2e <_vfiprintf_r+0x752>
  405248:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40524c:	f000 fdfe 	bl	405e4c <__retarget_lock_release_recursive>
  405250:	f04f 33ff 	mov.w	r3, #4294967295
  405254:	9303      	str	r3, [sp, #12]
  405256:	f7ff bb50 	b.w	4048fa <_vfiprintf_r+0x21e>
  40525a:	aa0f      	add	r2, sp, #60	; 0x3c
  40525c:	9904      	ldr	r1, [sp, #16]
  40525e:	9806      	ldr	r0, [sp, #24]
  405260:	f7ff f9fc 	bl	40465c <__sprint_r.part.0>
  405264:	2800      	cmp	r0, #0
  405266:	f47f aeeb 	bne.w	405040 <_vfiprintf_r+0x964>
  40526a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40526c:	e6a9      	b.n	404fc2 <_vfiprintf_r+0x8e6>
  40526e:	ab0e      	add	r3, sp, #56	; 0x38
  405270:	2202      	movs	r2, #2
  405272:	931c      	str	r3, [sp, #112]	; 0x70
  405274:	921d      	str	r2, [sp, #116]	; 0x74
  405276:	2001      	movs	r0, #1
  405278:	46ca      	mov	sl, r9
  40527a:	e5d0      	b.n	404e1e <_vfiprintf_r+0x742>
  40527c:	aa0f      	add	r2, sp, #60	; 0x3c
  40527e:	9904      	ldr	r1, [sp, #16]
  405280:	9806      	ldr	r0, [sp, #24]
  405282:	f7ff f9eb 	bl	40465c <__sprint_r.part.0>
  405286:	2800      	cmp	r0, #0
  405288:	f47f aeda 	bne.w	405040 <_vfiprintf_r+0x964>
  40528c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40528e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405290:	1c48      	adds	r0, r1, #1
  405292:	46ca      	mov	sl, r9
  405294:	e5a4      	b.n	404de0 <_vfiprintf_r+0x704>
  405296:	9a07      	ldr	r2, [sp, #28]
  405298:	9903      	ldr	r1, [sp, #12]
  40529a:	6813      	ldr	r3, [r2, #0]
  40529c:	17cd      	asrs	r5, r1, #31
  40529e:	4608      	mov	r0, r1
  4052a0:	3204      	adds	r2, #4
  4052a2:	4629      	mov	r1, r5
  4052a4:	9207      	str	r2, [sp, #28]
  4052a6:	e9c3 0100 	strd	r0, r1, [r3]
  4052aa:	f7ff ba54 	b.w	404756 <_vfiprintf_r+0x7a>
  4052ae:	4658      	mov	r0, fp
  4052b0:	9607      	str	r6, [sp, #28]
  4052b2:	9302      	str	r3, [sp, #8]
  4052b4:	f7ff f964 	bl	404580 <strlen>
  4052b8:	2400      	movs	r4, #0
  4052ba:	9005      	str	r0, [sp, #20]
  4052bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4052c0:	f7ff bb5e 	b.w	404980 <_vfiprintf_r+0x2a4>
  4052c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4052c6:	9904      	ldr	r1, [sp, #16]
  4052c8:	9806      	ldr	r0, [sp, #24]
  4052ca:	f7ff f9c7 	bl	40465c <__sprint_r.part.0>
  4052ce:	2800      	cmp	r0, #0
  4052d0:	f47f aeb6 	bne.w	405040 <_vfiprintf_r+0x964>
  4052d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052d8:	1c48      	adds	r0, r1, #1
  4052da:	46ca      	mov	sl, r9
  4052dc:	e5a7      	b.n	404e2e <_vfiprintf_r+0x752>
  4052de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052e2:	4e20      	ldr	r6, [pc, #128]	; (405364 <_vfiprintf_r+0xc88>)
  4052e4:	3101      	adds	r1, #1
  4052e6:	f7ff bb90 	b.w	404a0a <_vfiprintf_r+0x32e>
  4052ea:	2c06      	cmp	r4, #6
  4052ec:	bf28      	it	cs
  4052ee:	2406      	movcs	r4, #6
  4052f0:	9405      	str	r4, [sp, #20]
  4052f2:	9607      	str	r6, [sp, #28]
  4052f4:	9401      	str	r4, [sp, #4]
  4052f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405368 <_vfiprintf_r+0xc8c>
  4052fa:	e4d5      	b.n	404ca8 <_vfiprintf_r+0x5cc>
  4052fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4052fe:	4e19      	ldr	r6, [pc, #100]	; (405364 <_vfiprintf_r+0xc88>)
  405300:	3001      	adds	r0, #1
  405302:	e603      	b.n	404f0c <_vfiprintf_r+0x830>
  405304:	9405      	str	r4, [sp, #20]
  405306:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40530a:	9607      	str	r6, [sp, #28]
  40530c:	9302      	str	r3, [sp, #8]
  40530e:	4604      	mov	r4, r0
  405310:	f7ff bb36 	b.w	404980 <_vfiprintf_r+0x2a4>
  405314:	4686      	mov	lr, r0
  405316:	f7ff bbce 	b.w	404ab6 <_vfiprintf_r+0x3da>
  40531a:	9806      	ldr	r0, [sp, #24]
  40531c:	aa0f      	add	r2, sp, #60	; 0x3c
  40531e:	4659      	mov	r1, fp
  405320:	f7ff f99c 	bl	40465c <__sprint_r.part.0>
  405324:	2800      	cmp	r0, #0
  405326:	f43f ae24 	beq.w	404f72 <_vfiprintf_r+0x896>
  40532a:	e624      	b.n	404f76 <_vfiprintf_r+0x89a>
  40532c:	9907      	ldr	r1, [sp, #28]
  40532e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405332:	680c      	ldr	r4, [r1, #0]
  405334:	3104      	adds	r1, #4
  405336:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40533a:	46b8      	mov	r8, r7
  40533c:	9107      	str	r1, [sp, #28]
  40533e:	f7ff ba3f 	b.w	4047c0 <_vfiprintf_r+0xe4>
  405342:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405346:	e43c      	b.n	404bc2 <_vfiprintf_r+0x4e6>
  405348:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40534c:	e521      	b.n	404d92 <_vfiprintf_r+0x6b6>
  40534e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405352:	f7ff bbf4 	b.w	404b3e <_vfiprintf_r+0x462>
  405356:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40535a:	e491      	b.n	404c80 <_vfiprintf_r+0x5a4>
  40535c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405360:	e469      	b.n	404c36 <_vfiprintf_r+0x55a>
  405362:	bf00      	nop
  405364:	00406e28 	.word	0x00406e28
  405368:	00406e20 	.word	0x00406e20

0040536c <__sbprintf>:
  40536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405370:	460c      	mov	r4, r1
  405372:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405376:	8989      	ldrh	r1, [r1, #12]
  405378:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40537a:	89e5      	ldrh	r5, [r4, #14]
  40537c:	9619      	str	r6, [sp, #100]	; 0x64
  40537e:	f021 0102 	bic.w	r1, r1, #2
  405382:	4606      	mov	r6, r0
  405384:	69e0      	ldr	r0, [r4, #28]
  405386:	f8ad 100c 	strh.w	r1, [sp, #12]
  40538a:	4617      	mov	r7, r2
  40538c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405390:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405392:	f8ad 500e 	strh.w	r5, [sp, #14]
  405396:	4698      	mov	r8, r3
  405398:	ad1a      	add	r5, sp, #104	; 0x68
  40539a:	2300      	movs	r3, #0
  40539c:	9007      	str	r0, [sp, #28]
  40539e:	a816      	add	r0, sp, #88	; 0x58
  4053a0:	9209      	str	r2, [sp, #36]	; 0x24
  4053a2:	9306      	str	r3, [sp, #24]
  4053a4:	9500      	str	r5, [sp, #0]
  4053a6:	9504      	str	r5, [sp, #16]
  4053a8:	9102      	str	r1, [sp, #8]
  4053aa:	9105      	str	r1, [sp, #20]
  4053ac:	f000 fd48 	bl	405e40 <__retarget_lock_init_recursive>
  4053b0:	4643      	mov	r3, r8
  4053b2:	463a      	mov	r2, r7
  4053b4:	4669      	mov	r1, sp
  4053b6:	4630      	mov	r0, r6
  4053b8:	f7ff f990 	bl	4046dc <_vfiprintf_r>
  4053bc:	1e05      	subs	r5, r0, #0
  4053be:	db07      	blt.n	4053d0 <__sbprintf+0x64>
  4053c0:	4630      	mov	r0, r6
  4053c2:	4669      	mov	r1, sp
  4053c4:	f000 f928 	bl	405618 <_fflush_r>
  4053c8:	2800      	cmp	r0, #0
  4053ca:	bf18      	it	ne
  4053cc:	f04f 35ff 	movne.w	r5, #4294967295
  4053d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4053d4:	065b      	lsls	r3, r3, #25
  4053d6:	d503      	bpl.n	4053e0 <__sbprintf+0x74>
  4053d8:	89a3      	ldrh	r3, [r4, #12]
  4053da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053de:	81a3      	strh	r3, [r4, #12]
  4053e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4053e2:	f000 fd2f 	bl	405e44 <__retarget_lock_close_recursive>
  4053e6:	4628      	mov	r0, r5
  4053e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004053f0 <__swsetup_r>:
  4053f0:	b538      	push	{r3, r4, r5, lr}
  4053f2:	4b30      	ldr	r3, [pc, #192]	; (4054b4 <__swsetup_r+0xc4>)
  4053f4:	681b      	ldr	r3, [r3, #0]
  4053f6:	4605      	mov	r5, r0
  4053f8:	460c      	mov	r4, r1
  4053fa:	b113      	cbz	r3, 405402 <__swsetup_r+0x12>
  4053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4053fe:	2a00      	cmp	r2, #0
  405400:	d038      	beq.n	405474 <__swsetup_r+0x84>
  405402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405406:	b293      	uxth	r3, r2
  405408:	0718      	lsls	r0, r3, #28
  40540a:	d50c      	bpl.n	405426 <__swsetup_r+0x36>
  40540c:	6920      	ldr	r0, [r4, #16]
  40540e:	b1a8      	cbz	r0, 40543c <__swsetup_r+0x4c>
  405410:	f013 0201 	ands.w	r2, r3, #1
  405414:	d01e      	beq.n	405454 <__swsetup_r+0x64>
  405416:	6963      	ldr	r3, [r4, #20]
  405418:	2200      	movs	r2, #0
  40541a:	425b      	negs	r3, r3
  40541c:	61a3      	str	r3, [r4, #24]
  40541e:	60a2      	str	r2, [r4, #8]
  405420:	b1f0      	cbz	r0, 405460 <__swsetup_r+0x70>
  405422:	2000      	movs	r0, #0
  405424:	bd38      	pop	{r3, r4, r5, pc}
  405426:	06d9      	lsls	r1, r3, #27
  405428:	d53c      	bpl.n	4054a4 <__swsetup_r+0xb4>
  40542a:	0758      	lsls	r0, r3, #29
  40542c:	d426      	bmi.n	40547c <__swsetup_r+0x8c>
  40542e:	6920      	ldr	r0, [r4, #16]
  405430:	f042 0308 	orr.w	r3, r2, #8
  405434:	81a3      	strh	r3, [r4, #12]
  405436:	b29b      	uxth	r3, r3
  405438:	2800      	cmp	r0, #0
  40543a:	d1e9      	bne.n	405410 <__swsetup_r+0x20>
  40543c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405440:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405444:	d0e4      	beq.n	405410 <__swsetup_r+0x20>
  405446:	4628      	mov	r0, r5
  405448:	4621      	mov	r1, r4
  40544a:	f000 fd2f 	bl	405eac <__smakebuf_r>
  40544e:	89a3      	ldrh	r3, [r4, #12]
  405450:	6920      	ldr	r0, [r4, #16]
  405452:	e7dd      	b.n	405410 <__swsetup_r+0x20>
  405454:	0799      	lsls	r1, r3, #30
  405456:	bf58      	it	pl
  405458:	6962      	ldrpl	r2, [r4, #20]
  40545a:	60a2      	str	r2, [r4, #8]
  40545c:	2800      	cmp	r0, #0
  40545e:	d1e0      	bne.n	405422 <__swsetup_r+0x32>
  405460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405464:	061a      	lsls	r2, r3, #24
  405466:	d5dd      	bpl.n	405424 <__swsetup_r+0x34>
  405468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40546c:	81a3      	strh	r3, [r4, #12]
  40546e:	f04f 30ff 	mov.w	r0, #4294967295
  405472:	bd38      	pop	{r3, r4, r5, pc}
  405474:	4618      	mov	r0, r3
  405476:	f000 f927 	bl	4056c8 <__sinit>
  40547a:	e7c2      	b.n	405402 <__swsetup_r+0x12>
  40547c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40547e:	b151      	cbz	r1, 405496 <__swsetup_r+0xa6>
  405480:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405484:	4299      	cmp	r1, r3
  405486:	d004      	beq.n	405492 <__swsetup_r+0xa2>
  405488:	4628      	mov	r0, r5
  40548a:	f000 fa43 	bl	405914 <_free_r>
  40548e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405492:	2300      	movs	r3, #0
  405494:	6323      	str	r3, [r4, #48]	; 0x30
  405496:	2300      	movs	r3, #0
  405498:	6920      	ldr	r0, [r4, #16]
  40549a:	6063      	str	r3, [r4, #4]
  40549c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4054a0:	6020      	str	r0, [r4, #0]
  4054a2:	e7c5      	b.n	405430 <__swsetup_r+0x40>
  4054a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4054a8:	2309      	movs	r3, #9
  4054aa:	602b      	str	r3, [r5, #0]
  4054ac:	f04f 30ff 	mov.w	r0, #4294967295
  4054b0:	81a2      	strh	r2, [r4, #12]
  4054b2:	bd38      	pop	{r3, r4, r5, pc}
  4054b4:	2040000c 	.word	0x2040000c

004054b8 <register_fini>:
  4054b8:	4b02      	ldr	r3, [pc, #8]	; (4054c4 <register_fini+0xc>)
  4054ba:	b113      	cbz	r3, 4054c2 <register_fini+0xa>
  4054bc:	4802      	ldr	r0, [pc, #8]	; (4054c8 <register_fini+0x10>)
  4054be:	f000 b805 	b.w	4054cc <atexit>
  4054c2:	4770      	bx	lr
  4054c4:	00000000 	.word	0x00000000
  4054c8:	00405739 	.word	0x00405739

004054cc <atexit>:
  4054cc:	2300      	movs	r3, #0
  4054ce:	4601      	mov	r1, r0
  4054d0:	461a      	mov	r2, r3
  4054d2:	4618      	mov	r0, r3
  4054d4:	f001 b890 	b.w	4065f8 <__register_exitproc>

004054d8 <__sflush_r>:
  4054d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4054dc:	b29a      	uxth	r2, r3
  4054de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054e2:	460d      	mov	r5, r1
  4054e4:	0711      	lsls	r1, r2, #28
  4054e6:	4680      	mov	r8, r0
  4054e8:	d43a      	bmi.n	405560 <__sflush_r+0x88>
  4054ea:	686a      	ldr	r2, [r5, #4]
  4054ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4054f0:	2a00      	cmp	r2, #0
  4054f2:	81ab      	strh	r3, [r5, #12]
  4054f4:	dd6f      	ble.n	4055d6 <__sflush_r+0xfe>
  4054f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4054f8:	2c00      	cmp	r4, #0
  4054fa:	d049      	beq.n	405590 <__sflush_r+0xb8>
  4054fc:	2200      	movs	r2, #0
  4054fe:	b29b      	uxth	r3, r3
  405500:	f8d8 6000 	ldr.w	r6, [r8]
  405504:	f8c8 2000 	str.w	r2, [r8]
  405508:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40550c:	d067      	beq.n	4055de <__sflush_r+0x106>
  40550e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405510:	075f      	lsls	r7, r3, #29
  405512:	d505      	bpl.n	405520 <__sflush_r+0x48>
  405514:	6869      	ldr	r1, [r5, #4]
  405516:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405518:	1a52      	subs	r2, r2, r1
  40551a:	b10b      	cbz	r3, 405520 <__sflush_r+0x48>
  40551c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40551e:	1ad2      	subs	r2, r2, r3
  405520:	2300      	movs	r3, #0
  405522:	69e9      	ldr	r1, [r5, #28]
  405524:	4640      	mov	r0, r8
  405526:	47a0      	blx	r4
  405528:	1c44      	adds	r4, r0, #1
  40552a:	d03c      	beq.n	4055a6 <__sflush_r+0xce>
  40552c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405530:	692a      	ldr	r2, [r5, #16]
  405532:	602a      	str	r2, [r5, #0]
  405534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405538:	2200      	movs	r2, #0
  40553a:	81ab      	strh	r3, [r5, #12]
  40553c:	04db      	lsls	r3, r3, #19
  40553e:	606a      	str	r2, [r5, #4]
  405540:	d447      	bmi.n	4055d2 <__sflush_r+0xfa>
  405542:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405544:	f8c8 6000 	str.w	r6, [r8]
  405548:	b311      	cbz	r1, 405590 <__sflush_r+0xb8>
  40554a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40554e:	4299      	cmp	r1, r3
  405550:	d002      	beq.n	405558 <__sflush_r+0x80>
  405552:	4640      	mov	r0, r8
  405554:	f000 f9de 	bl	405914 <_free_r>
  405558:	2000      	movs	r0, #0
  40555a:	6328      	str	r0, [r5, #48]	; 0x30
  40555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405560:	692e      	ldr	r6, [r5, #16]
  405562:	b1ae      	cbz	r6, 405590 <__sflush_r+0xb8>
  405564:	682c      	ldr	r4, [r5, #0]
  405566:	602e      	str	r6, [r5, #0]
  405568:	0791      	lsls	r1, r2, #30
  40556a:	bf0c      	ite	eq
  40556c:	696b      	ldreq	r3, [r5, #20]
  40556e:	2300      	movne	r3, #0
  405570:	1ba4      	subs	r4, r4, r6
  405572:	60ab      	str	r3, [r5, #8]
  405574:	e00a      	b.n	40558c <__sflush_r+0xb4>
  405576:	4623      	mov	r3, r4
  405578:	4632      	mov	r2, r6
  40557a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40557c:	69e9      	ldr	r1, [r5, #28]
  40557e:	4640      	mov	r0, r8
  405580:	47b8      	blx	r7
  405582:	2800      	cmp	r0, #0
  405584:	eba4 0400 	sub.w	r4, r4, r0
  405588:	4406      	add	r6, r0
  40558a:	dd04      	ble.n	405596 <__sflush_r+0xbe>
  40558c:	2c00      	cmp	r4, #0
  40558e:	dcf2      	bgt.n	405576 <__sflush_r+0x9e>
  405590:	2000      	movs	r0, #0
  405592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405596:	89ab      	ldrh	r3, [r5, #12]
  405598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40559c:	81ab      	strh	r3, [r5, #12]
  40559e:	f04f 30ff 	mov.w	r0, #4294967295
  4055a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055a6:	f8d8 4000 	ldr.w	r4, [r8]
  4055aa:	2c1d      	cmp	r4, #29
  4055ac:	d8f3      	bhi.n	405596 <__sflush_r+0xbe>
  4055ae:	4b19      	ldr	r3, [pc, #100]	; (405614 <__sflush_r+0x13c>)
  4055b0:	40e3      	lsrs	r3, r4
  4055b2:	43db      	mvns	r3, r3
  4055b4:	f013 0301 	ands.w	r3, r3, #1
  4055b8:	d1ed      	bne.n	405596 <__sflush_r+0xbe>
  4055ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4055be:	606b      	str	r3, [r5, #4]
  4055c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4055c4:	6929      	ldr	r1, [r5, #16]
  4055c6:	81ab      	strh	r3, [r5, #12]
  4055c8:	04da      	lsls	r2, r3, #19
  4055ca:	6029      	str	r1, [r5, #0]
  4055cc:	d5b9      	bpl.n	405542 <__sflush_r+0x6a>
  4055ce:	2c00      	cmp	r4, #0
  4055d0:	d1b7      	bne.n	405542 <__sflush_r+0x6a>
  4055d2:	6528      	str	r0, [r5, #80]	; 0x50
  4055d4:	e7b5      	b.n	405542 <__sflush_r+0x6a>
  4055d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4055d8:	2a00      	cmp	r2, #0
  4055da:	dc8c      	bgt.n	4054f6 <__sflush_r+0x1e>
  4055dc:	e7d8      	b.n	405590 <__sflush_r+0xb8>
  4055de:	2301      	movs	r3, #1
  4055e0:	69e9      	ldr	r1, [r5, #28]
  4055e2:	4640      	mov	r0, r8
  4055e4:	47a0      	blx	r4
  4055e6:	1c43      	adds	r3, r0, #1
  4055e8:	4602      	mov	r2, r0
  4055ea:	d002      	beq.n	4055f2 <__sflush_r+0x11a>
  4055ec:	89ab      	ldrh	r3, [r5, #12]
  4055ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4055f0:	e78e      	b.n	405510 <__sflush_r+0x38>
  4055f2:	f8d8 3000 	ldr.w	r3, [r8]
  4055f6:	2b00      	cmp	r3, #0
  4055f8:	d0f8      	beq.n	4055ec <__sflush_r+0x114>
  4055fa:	2b1d      	cmp	r3, #29
  4055fc:	d001      	beq.n	405602 <__sflush_r+0x12a>
  4055fe:	2b16      	cmp	r3, #22
  405600:	d102      	bne.n	405608 <__sflush_r+0x130>
  405602:	f8c8 6000 	str.w	r6, [r8]
  405606:	e7c3      	b.n	405590 <__sflush_r+0xb8>
  405608:	89ab      	ldrh	r3, [r5, #12]
  40560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40560e:	81ab      	strh	r3, [r5, #12]
  405610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405614:	20400001 	.word	0x20400001

00405618 <_fflush_r>:
  405618:	b538      	push	{r3, r4, r5, lr}
  40561a:	460d      	mov	r5, r1
  40561c:	4604      	mov	r4, r0
  40561e:	b108      	cbz	r0, 405624 <_fflush_r+0xc>
  405620:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405622:	b1bb      	cbz	r3, 405654 <_fflush_r+0x3c>
  405624:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405628:	b188      	cbz	r0, 40564e <_fflush_r+0x36>
  40562a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40562c:	07db      	lsls	r3, r3, #31
  40562e:	d401      	bmi.n	405634 <_fflush_r+0x1c>
  405630:	0581      	lsls	r1, r0, #22
  405632:	d517      	bpl.n	405664 <_fflush_r+0x4c>
  405634:	4620      	mov	r0, r4
  405636:	4629      	mov	r1, r5
  405638:	f7ff ff4e 	bl	4054d8 <__sflush_r>
  40563c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40563e:	07da      	lsls	r2, r3, #31
  405640:	4604      	mov	r4, r0
  405642:	d402      	bmi.n	40564a <_fflush_r+0x32>
  405644:	89ab      	ldrh	r3, [r5, #12]
  405646:	059b      	lsls	r3, r3, #22
  405648:	d507      	bpl.n	40565a <_fflush_r+0x42>
  40564a:	4620      	mov	r0, r4
  40564c:	bd38      	pop	{r3, r4, r5, pc}
  40564e:	4604      	mov	r4, r0
  405650:	4620      	mov	r0, r4
  405652:	bd38      	pop	{r3, r4, r5, pc}
  405654:	f000 f838 	bl	4056c8 <__sinit>
  405658:	e7e4      	b.n	405624 <_fflush_r+0xc>
  40565a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40565c:	f000 fbf6 	bl	405e4c <__retarget_lock_release_recursive>
  405660:	4620      	mov	r0, r4
  405662:	bd38      	pop	{r3, r4, r5, pc}
  405664:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405666:	f000 fbef 	bl	405e48 <__retarget_lock_acquire_recursive>
  40566a:	e7e3      	b.n	405634 <_fflush_r+0x1c>

0040566c <_cleanup_r>:
  40566c:	4901      	ldr	r1, [pc, #4]	; (405674 <_cleanup_r+0x8>)
  40566e:	f000 bbaf 	b.w	405dd0 <_fwalk_reent>
  405672:	bf00      	nop
  405674:	004066e1 	.word	0x004066e1

00405678 <std.isra.0>:
  405678:	b510      	push	{r4, lr}
  40567a:	2300      	movs	r3, #0
  40567c:	4604      	mov	r4, r0
  40567e:	8181      	strh	r1, [r0, #12]
  405680:	81c2      	strh	r2, [r0, #14]
  405682:	6003      	str	r3, [r0, #0]
  405684:	6043      	str	r3, [r0, #4]
  405686:	6083      	str	r3, [r0, #8]
  405688:	6643      	str	r3, [r0, #100]	; 0x64
  40568a:	6103      	str	r3, [r0, #16]
  40568c:	6143      	str	r3, [r0, #20]
  40568e:	6183      	str	r3, [r0, #24]
  405690:	4619      	mov	r1, r3
  405692:	2208      	movs	r2, #8
  405694:	305c      	adds	r0, #92	; 0x5c
  405696:	f7fe fcb9 	bl	40400c <memset>
  40569a:	4807      	ldr	r0, [pc, #28]	; (4056b8 <std.isra.0+0x40>)
  40569c:	4907      	ldr	r1, [pc, #28]	; (4056bc <std.isra.0+0x44>)
  40569e:	4a08      	ldr	r2, [pc, #32]	; (4056c0 <std.isra.0+0x48>)
  4056a0:	4b08      	ldr	r3, [pc, #32]	; (4056c4 <std.isra.0+0x4c>)
  4056a2:	6220      	str	r0, [r4, #32]
  4056a4:	61e4      	str	r4, [r4, #28]
  4056a6:	6261      	str	r1, [r4, #36]	; 0x24
  4056a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4056aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4056ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4056b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4056b4:	f000 bbc4 	b.w	405e40 <__retarget_lock_init_recursive>
  4056b8:	00406425 	.word	0x00406425
  4056bc:	00406449 	.word	0x00406449
  4056c0:	00406485 	.word	0x00406485
  4056c4:	004064a5 	.word	0x004064a5

004056c8 <__sinit>:
  4056c8:	b510      	push	{r4, lr}
  4056ca:	4604      	mov	r4, r0
  4056cc:	4812      	ldr	r0, [pc, #72]	; (405718 <__sinit+0x50>)
  4056ce:	f000 fbbb 	bl	405e48 <__retarget_lock_acquire_recursive>
  4056d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4056d4:	b9d2      	cbnz	r2, 40570c <__sinit+0x44>
  4056d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4056da:	4810      	ldr	r0, [pc, #64]	; (40571c <__sinit+0x54>)
  4056dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4056e0:	2103      	movs	r1, #3
  4056e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4056e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4056e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4056ec:	6860      	ldr	r0, [r4, #4]
  4056ee:	2104      	movs	r1, #4
  4056f0:	f7ff ffc2 	bl	405678 <std.isra.0>
  4056f4:	2201      	movs	r2, #1
  4056f6:	2109      	movs	r1, #9
  4056f8:	68a0      	ldr	r0, [r4, #8]
  4056fa:	f7ff ffbd 	bl	405678 <std.isra.0>
  4056fe:	2202      	movs	r2, #2
  405700:	2112      	movs	r1, #18
  405702:	68e0      	ldr	r0, [r4, #12]
  405704:	f7ff ffb8 	bl	405678 <std.isra.0>
  405708:	2301      	movs	r3, #1
  40570a:	63a3      	str	r3, [r4, #56]	; 0x38
  40570c:	4802      	ldr	r0, [pc, #8]	; (405718 <__sinit+0x50>)
  40570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405712:	f000 bb9b 	b.w	405e4c <__retarget_lock_release_recursive>
  405716:	bf00      	nop
  405718:	20400c40 	.word	0x20400c40
  40571c:	0040566d 	.word	0x0040566d

00405720 <__sfp_lock_acquire>:
  405720:	4801      	ldr	r0, [pc, #4]	; (405728 <__sfp_lock_acquire+0x8>)
  405722:	f000 bb91 	b.w	405e48 <__retarget_lock_acquire_recursive>
  405726:	bf00      	nop
  405728:	20400c54 	.word	0x20400c54

0040572c <__sfp_lock_release>:
  40572c:	4801      	ldr	r0, [pc, #4]	; (405734 <__sfp_lock_release+0x8>)
  40572e:	f000 bb8d 	b.w	405e4c <__retarget_lock_release_recursive>
  405732:	bf00      	nop
  405734:	20400c54 	.word	0x20400c54

00405738 <__libc_fini_array>:
  405738:	b538      	push	{r3, r4, r5, lr}
  40573a:	4c0a      	ldr	r4, [pc, #40]	; (405764 <__libc_fini_array+0x2c>)
  40573c:	4d0a      	ldr	r5, [pc, #40]	; (405768 <__libc_fini_array+0x30>)
  40573e:	1b64      	subs	r4, r4, r5
  405740:	10a4      	asrs	r4, r4, #2
  405742:	d00a      	beq.n	40575a <__libc_fini_array+0x22>
  405744:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405748:	3b01      	subs	r3, #1
  40574a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40574e:	3c01      	subs	r4, #1
  405750:	f855 3904 	ldr.w	r3, [r5], #-4
  405754:	4798      	blx	r3
  405756:	2c00      	cmp	r4, #0
  405758:	d1f9      	bne.n	40574e <__libc_fini_array+0x16>
  40575a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40575e:	f001 bc07 	b.w	406f70 <_fini>
  405762:	bf00      	nop
  405764:	00406f80 	.word	0x00406f80
  405768:	00406f7c 	.word	0x00406f7c

0040576c <__fputwc>:
  40576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405770:	b082      	sub	sp, #8
  405772:	4680      	mov	r8, r0
  405774:	4689      	mov	r9, r1
  405776:	4614      	mov	r4, r2
  405778:	f000 fb54 	bl	405e24 <__locale_mb_cur_max>
  40577c:	2801      	cmp	r0, #1
  40577e:	d036      	beq.n	4057ee <__fputwc+0x82>
  405780:	464a      	mov	r2, r9
  405782:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405786:	a901      	add	r1, sp, #4
  405788:	4640      	mov	r0, r8
  40578a:	f000 fee7 	bl	40655c <_wcrtomb_r>
  40578e:	1c42      	adds	r2, r0, #1
  405790:	4606      	mov	r6, r0
  405792:	d025      	beq.n	4057e0 <__fputwc+0x74>
  405794:	b3a8      	cbz	r0, 405802 <__fputwc+0x96>
  405796:	f89d e004 	ldrb.w	lr, [sp, #4]
  40579a:	2500      	movs	r5, #0
  40579c:	f10d 0a04 	add.w	sl, sp, #4
  4057a0:	e009      	b.n	4057b6 <__fputwc+0x4a>
  4057a2:	6823      	ldr	r3, [r4, #0]
  4057a4:	1c5a      	adds	r2, r3, #1
  4057a6:	6022      	str	r2, [r4, #0]
  4057a8:	f883 e000 	strb.w	lr, [r3]
  4057ac:	3501      	adds	r5, #1
  4057ae:	42b5      	cmp	r5, r6
  4057b0:	d227      	bcs.n	405802 <__fputwc+0x96>
  4057b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4057b6:	68a3      	ldr	r3, [r4, #8]
  4057b8:	3b01      	subs	r3, #1
  4057ba:	2b00      	cmp	r3, #0
  4057bc:	60a3      	str	r3, [r4, #8]
  4057be:	daf0      	bge.n	4057a2 <__fputwc+0x36>
  4057c0:	69a7      	ldr	r7, [r4, #24]
  4057c2:	42bb      	cmp	r3, r7
  4057c4:	4671      	mov	r1, lr
  4057c6:	4622      	mov	r2, r4
  4057c8:	4640      	mov	r0, r8
  4057ca:	db02      	blt.n	4057d2 <__fputwc+0x66>
  4057cc:	f1be 0f0a 	cmp.w	lr, #10
  4057d0:	d1e7      	bne.n	4057a2 <__fputwc+0x36>
  4057d2:	f000 fe6b 	bl	4064ac <__swbuf_r>
  4057d6:	1c43      	adds	r3, r0, #1
  4057d8:	d1e8      	bne.n	4057ac <__fputwc+0x40>
  4057da:	b002      	add	sp, #8
  4057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057e0:	89a3      	ldrh	r3, [r4, #12]
  4057e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057e6:	81a3      	strh	r3, [r4, #12]
  4057e8:	b002      	add	sp, #8
  4057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4057f2:	2bfe      	cmp	r3, #254	; 0xfe
  4057f4:	d8c4      	bhi.n	405780 <__fputwc+0x14>
  4057f6:	fa5f fe89 	uxtb.w	lr, r9
  4057fa:	4606      	mov	r6, r0
  4057fc:	f88d e004 	strb.w	lr, [sp, #4]
  405800:	e7cb      	b.n	40579a <__fputwc+0x2e>
  405802:	4648      	mov	r0, r9
  405804:	b002      	add	sp, #8
  405806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40580a:	bf00      	nop

0040580c <_fputwc_r>:
  40580c:	b530      	push	{r4, r5, lr}
  40580e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405810:	f013 0f01 	tst.w	r3, #1
  405814:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405818:	4614      	mov	r4, r2
  40581a:	b083      	sub	sp, #12
  40581c:	4605      	mov	r5, r0
  40581e:	b29a      	uxth	r2, r3
  405820:	d101      	bne.n	405826 <_fputwc_r+0x1a>
  405822:	0590      	lsls	r0, r2, #22
  405824:	d51c      	bpl.n	405860 <_fputwc_r+0x54>
  405826:	0490      	lsls	r0, r2, #18
  405828:	d406      	bmi.n	405838 <_fputwc_r+0x2c>
  40582a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40582c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405834:	81a3      	strh	r3, [r4, #12]
  405836:	6662      	str	r2, [r4, #100]	; 0x64
  405838:	4628      	mov	r0, r5
  40583a:	4622      	mov	r2, r4
  40583c:	f7ff ff96 	bl	40576c <__fputwc>
  405840:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405842:	07da      	lsls	r2, r3, #31
  405844:	4605      	mov	r5, r0
  405846:	d402      	bmi.n	40584e <_fputwc_r+0x42>
  405848:	89a3      	ldrh	r3, [r4, #12]
  40584a:	059b      	lsls	r3, r3, #22
  40584c:	d502      	bpl.n	405854 <_fputwc_r+0x48>
  40584e:	4628      	mov	r0, r5
  405850:	b003      	add	sp, #12
  405852:	bd30      	pop	{r4, r5, pc}
  405854:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405856:	f000 faf9 	bl	405e4c <__retarget_lock_release_recursive>
  40585a:	4628      	mov	r0, r5
  40585c:	b003      	add	sp, #12
  40585e:	bd30      	pop	{r4, r5, pc}
  405860:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405862:	9101      	str	r1, [sp, #4]
  405864:	f000 faf0 	bl	405e48 <__retarget_lock_acquire_recursive>
  405868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40586c:	9901      	ldr	r1, [sp, #4]
  40586e:	b29a      	uxth	r2, r3
  405870:	e7d9      	b.n	405826 <_fputwc_r+0x1a>
  405872:	bf00      	nop

00405874 <_malloc_trim_r>:
  405874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405876:	4f24      	ldr	r7, [pc, #144]	; (405908 <_malloc_trim_r+0x94>)
  405878:	460c      	mov	r4, r1
  40587a:	4606      	mov	r6, r0
  40587c:	f7fe fc14 	bl	4040a8 <__malloc_lock>
  405880:	68bb      	ldr	r3, [r7, #8]
  405882:	685d      	ldr	r5, [r3, #4]
  405884:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405888:	310f      	adds	r1, #15
  40588a:	f025 0503 	bic.w	r5, r5, #3
  40588e:	4429      	add	r1, r5
  405890:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405894:	f021 010f 	bic.w	r1, r1, #15
  405898:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40589c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4058a0:	db07      	blt.n	4058b2 <_malloc_trim_r+0x3e>
  4058a2:	2100      	movs	r1, #0
  4058a4:	4630      	mov	r0, r6
  4058a6:	f7fe fc0b 	bl	4040c0 <_sbrk_r>
  4058aa:	68bb      	ldr	r3, [r7, #8]
  4058ac:	442b      	add	r3, r5
  4058ae:	4298      	cmp	r0, r3
  4058b0:	d004      	beq.n	4058bc <_malloc_trim_r+0x48>
  4058b2:	4630      	mov	r0, r6
  4058b4:	f7fe fbfe 	bl	4040b4 <__malloc_unlock>
  4058b8:	2000      	movs	r0, #0
  4058ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058bc:	4261      	negs	r1, r4
  4058be:	4630      	mov	r0, r6
  4058c0:	f7fe fbfe 	bl	4040c0 <_sbrk_r>
  4058c4:	3001      	adds	r0, #1
  4058c6:	d00d      	beq.n	4058e4 <_malloc_trim_r+0x70>
  4058c8:	4b10      	ldr	r3, [pc, #64]	; (40590c <_malloc_trim_r+0x98>)
  4058ca:	68ba      	ldr	r2, [r7, #8]
  4058cc:	6819      	ldr	r1, [r3, #0]
  4058ce:	1b2d      	subs	r5, r5, r4
  4058d0:	f045 0501 	orr.w	r5, r5, #1
  4058d4:	4630      	mov	r0, r6
  4058d6:	1b09      	subs	r1, r1, r4
  4058d8:	6055      	str	r5, [r2, #4]
  4058da:	6019      	str	r1, [r3, #0]
  4058dc:	f7fe fbea 	bl	4040b4 <__malloc_unlock>
  4058e0:	2001      	movs	r0, #1
  4058e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058e4:	2100      	movs	r1, #0
  4058e6:	4630      	mov	r0, r6
  4058e8:	f7fe fbea 	bl	4040c0 <_sbrk_r>
  4058ec:	68ba      	ldr	r2, [r7, #8]
  4058ee:	1a83      	subs	r3, r0, r2
  4058f0:	2b0f      	cmp	r3, #15
  4058f2:	ddde      	ble.n	4058b2 <_malloc_trim_r+0x3e>
  4058f4:	4c06      	ldr	r4, [pc, #24]	; (405910 <_malloc_trim_r+0x9c>)
  4058f6:	4905      	ldr	r1, [pc, #20]	; (40590c <_malloc_trim_r+0x98>)
  4058f8:	6824      	ldr	r4, [r4, #0]
  4058fa:	f043 0301 	orr.w	r3, r3, #1
  4058fe:	1b00      	subs	r0, r0, r4
  405900:	6053      	str	r3, [r2, #4]
  405902:	6008      	str	r0, [r1, #0]
  405904:	e7d5      	b.n	4058b2 <_malloc_trim_r+0x3e>
  405906:	bf00      	nop
  405908:	20400438 	.word	0x20400438
  40590c:	20400ba0 	.word	0x20400ba0
  405910:	20400840 	.word	0x20400840

00405914 <_free_r>:
  405914:	2900      	cmp	r1, #0
  405916:	d044      	beq.n	4059a2 <_free_r+0x8e>
  405918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40591c:	460d      	mov	r5, r1
  40591e:	4680      	mov	r8, r0
  405920:	f7fe fbc2 	bl	4040a8 <__malloc_lock>
  405924:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405928:	4969      	ldr	r1, [pc, #420]	; (405ad0 <_free_r+0x1bc>)
  40592a:	f027 0301 	bic.w	r3, r7, #1
  40592e:	f1a5 0408 	sub.w	r4, r5, #8
  405932:	18e2      	adds	r2, r4, r3
  405934:	688e      	ldr	r6, [r1, #8]
  405936:	6850      	ldr	r0, [r2, #4]
  405938:	42b2      	cmp	r2, r6
  40593a:	f020 0003 	bic.w	r0, r0, #3
  40593e:	d05e      	beq.n	4059fe <_free_r+0xea>
  405940:	07fe      	lsls	r6, r7, #31
  405942:	6050      	str	r0, [r2, #4]
  405944:	d40b      	bmi.n	40595e <_free_r+0x4a>
  405946:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40594a:	1be4      	subs	r4, r4, r7
  40594c:	f101 0e08 	add.w	lr, r1, #8
  405950:	68a5      	ldr	r5, [r4, #8]
  405952:	4575      	cmp	r5, lr
  405954:	443b      	add	r3, r7
  405956:	d06d      	beq.n	405a34 <_free_r+0x120>
  405958:	68e7      	ldr	r7, [r4, #12]
  40595a:	60ef      	str	r7, [r5, #12]
  40595c:	60bd      	str	r5, [r7, #8]
  40595e:	1815      	adds	r5, r2, r0
  405960:	686d      	ldr	r5, [r5, #4]
  405962:	07ed      	lsls	r5, r5, #31
  405964:	d53e      	bpl.n	4059e4 <_free_r+0xd0>
  405966:	f043 0201 	orr.w	r2, r3, #1
  40596a:	6062      	str	r2, [r4, #4]
  40596c:	50e3      	str	r3, [r4, r3]
  40596e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405972:	d217      	bcs.n	4059a4 <_free_r+0x90>
  405974:	08db      	lsrs	r3, r3, #3
  405976:	1c58      	adds	r0, r3, #1
  405978:	109a      	asrs	r2, r3, #2
  40597a:	684d      	ldr	r5, [r1, #4]
  40597c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405980:	60a7      	str	r7, [r4, #8]
  405982:	2301      	movs	r3, #1
  405984:	4093      	lsls	r3, r2
  405986:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40598a:	432b      	orrs	r3, r5
  40598c:	3a08      	subs	r2, #8
  40598e:	60e2      	str	r2, [r4, #12]
  405990:	604b      	str	r3, [r1, #4]
  405992:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405996:	60fc      	str	r4, [r7, #12]
  405998:	4640      	mov	r0, r8
  40599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40599e:	f7fe bb89 	b.w	4040b4 <__malloc_unlock>
  4059a2:	4770      	bx	lr
  4059a4:	0a5a      	lsrs	r2, r3, #9
  4059a6:	2a04      	cmp	r2, #4
  4059a8:	d852      	bhi.n	405a50 <_free_r+0x13c>
  4059aa:	099a      	lsrs	r2, r3, #6
  4059ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4059b0:	00ff      	lsls	r7, r7, #3
  4059b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4059b6:	19c8      	adds	r0, r1, r7
  4059b8:	59ca      	ldr	r2, [r1, r7]
  4059ba:	3808      	subs	r0, #8
  4059bc:	4290      	cmp	r0, r2
  4059be:	d04f      	beq.n	405a60 <_free_r+0x14c>
  4059c0:	6851      	ldr	r1, [r2, #4]
  4059c2:	f021 0103 	bic.w	r1, r1, #3
  4059c6:	428b      	cmp	r3, r1
  4059c8:	d232      	bcs.n	405a30 <_free_r+0x11c>
  4059ca:	6892      	ldr	r2, [r2, #8]
  4059cc:	4290      	cmp	r0, r2
  4059ce:	d1f7      	bne.n	4059c0 <_free_r+0xac>
  4059d0:	68c3      	ldr	r3, [r0, #12]
  4059d2:	60a0      	str	r0, [r4, #8]
  4059d4:	60e3      	str	r3, [r4, #12]
  4059d6:	609c      	str	r4, [r3, #8]
  4059d8:	60c4      	str	r4, [r0, #12]
  4059da:	4640      	mov	r0, r8
  4059dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4059e0:	f7fe bb68 	b.w	4040b4 <__malloc_unlock>
  4059e4:	6895      	ldr	r5, [r2, #8]
  4059e6:	4f3b      	ldr	r7, [pc, #236]	; (405ad4 <_free_r+0x1c0>)
  4059e8:	42bd      	cmp	r5, r7
  4059ea:	4403      	add	r3, r0
  4059ec:	d040      	beq.n	405a70 <_free_r+0x15c>
  4059ee:	68d0      	ldr	r0, [r2, #12]
  4059f0:	60e8      	str	r0, [r5, #12]
  4059f2:	f043 0201 	orr.w	r2, r3, #1
  4059f6:	6085      	str	r5, [r0, #8]
  4059f8:	6062      	str	r2, [r4, #4]
  4059fa:	50e3      	str	r3, [r4, r3]
  4059fc:	e7b7      	b.n	40596e <_free_r+0x5a>
  4059fe:	07ff      	lsls	r7, r7, #31
  405a00:	4403      	add	r3, r0
  405a02:	d407      	bmi.n	405a14 <_free_r+0x100>
  405a04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405a08:	1aa4      	subs	r4, r4, r2
  405a0a:	4413      	add	r3, r2
  405a0c:	68a0      	ldr	r0, [r4, #8]
  405a0e:	68e2      	ldr	r2, [r4, #12]
  405a10:	60c2      	str	r2, [r0, #12]
  405a12:	6090      	str	r0, [r2, #8]
  405a14:	4a30      	ldr	r2, [pc, #192]	; (405ad8 <_free_r+0x1c4>)
  405a16:	6812      	ldr	r2, [r2, #0]
  405a18:	f043 0001 	orr.w	r0, r3, #1
  405a1c:	4293      	cmp	r3, r2
  405a1e:	6060      	str	r0, [r4, #4]
  405a20:	608c      	str	r4, [r1, #8]
  405a22:	d3b9      	bcc.n	405998 <_free_r+0x84>
  405a24:	4b2d      	ldr	r3, [pc, #180]	; (405adc <_free_r+0x1c8>)
  405a26:	4640      	mov	r0, r8
  405a28:	6819      	ldr	r1, [r3, #0]
  405a2a:	f7ff ff23 	bl	405874 <_malloc_trim_r>
  405a2e:	e7b3      	b.n	405998 <_free_r+0x84>
  405a30:	4610      	mov	r0, r2
  405a32:	e7cd      	b.n	4059d0 <_free_r+0xbc>
  405a34:	1811      	adds	r1, r2, r0
  405a36:	6849      	ldr	r1, [r1, #4]
  405a38:	07c9      	lsls	r1, r1, #31
  405a3a:	d444      	bmi.n	405ac6 <_free_r+0x1b2>
  405a3c:	6891      	ldr	r1, [r2, #8]
  405a3e:	68d2      	ldr	r2, [r2, #12]
  405a40:	60ca      	str	r2, [r1, #12]
  405a42:	4403      	add	r3, r0
  405a44:	f043 0001 	orr.w	r0, r3, #1
  405a48:	6091      	str	r1, [r2, #8]
  405a4a:	6060      	str	r0, [r4, #4]
  405a4c:	50e3      	str	r3, [r4, r3]
  405a4e:	e7a3      	b.n	405998 <_free_r+0x84>
  405a50:	2a14      	cmp	r2, #20
  405a52:	d816      	bhi.n	405a82 <_free_r+0x16e>
  405a54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405a58:	00ff      	lsls	r7, r7, #3
  405a5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405a5e:	e7aa      	b.n	4059b6 <_free_r+0xa2>
  405a60:	10aa      	asrs	r2, r5, #2
  405a62:	2301      	movs	r3, #1
  405a64:	684d      	ldr	r5, [r1, #4]
  405a66:	4093      	lsls	r3, r2
  405a68:	432b      	orrs	r3, r5
  405a6a:	604b      	str	r3, [r1, #4]
  405a6c:	4603      	mov	r3, r0
  405a6e:	e7b0      	b.n	4059d2 <_free_r+0xbe>
  405a70:	f043 0201 	orr.w	r2, r3, #1
  405a74:	614c      	str	r4, [r1, #20]
  405a76:	610c      	str	r4, [r1, #16]
  405a78:	60e5      	str	r5, [r4, #12]
  405a7a:	60a5      	str	r5, [r4, #8]
  405a7c:	6062      	str	r2, [r4, #4]
  405a7e:	50e3      	str	r3, [r4, r3]
  405a80:	e78a      	b.n	405998 <_free_r+0x84>
  405a82:	2a54      	cmp	r2, #84	; 0x54
  405a84:	d806      	bhi.n	405a94 <_free_r+0x180>
  405a86:	0b1a      	lsrs	r2, r3, #12
  405a88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405a8c:	00ff      	lsls	r7, r7, #3
  405a8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405a92:	e790      	b.n	4059b6 <_free_r+0xa2>
  405a94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a98:	d806      	bhi.n	405aa8 <_free_r+0x194>
  405a9a:	0bda      	lsrs	r2, r3, #15
  405a9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405aa0:	00ff      	lsls	r7, r7, #3
  405aa2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405aa6:	e786      	b.n	4059b6 <_free_r+0xa2>
  405aa8:	f240 5054 	movw	r0, #1364	; 0x554
  405aac:	4282      	cmp	r2, r0
  405aae:	d806      	bhi.n	405abe <_free_r+0x1aa>
  405ab0:	0c9a      	lsrs	r2, r3, #18
  405ab2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405ab6:	00ff      	lsls	r7, r7, #3
  405ab8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405abc:	e77b      	b.n	4059b6 <_free_r+0xa2>
  405abe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405ac2:	257e      	movs	r5, #126	; 0x7e
  405ac4:	e777      	b.n	4059b6 <_free_r+0xa2>
  405ac6:	f043 0101 	orr.w	r1, r3, #1
  405aca:	6061      	str	r1, [r4, #4]
  405acc:	6013      	str	r3, [r2, #0]
  405ace:	e763      	b.n	405998 <_free_r+0x84>
  405ad0:	20400438 	.word	0x20400438
  405ad4:	20400440 	.word	0x20400440
  405ad8:	20400844 	.word	0x20400844
  405adc:	20400bd0 	.word	0x20400bd0

00405ae0 <__sfvwrite_r>:
  405ae0:	6893      	ldr	r3, [r2, #8]
  405ae2:	2b00      	cmp	r3, #0
  405ae4:	d073      	beq.n	405bce <__sfvwrite_r+0xee>
  405ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aea:	898b      	ldrh	r3, [r1, #12]
  405aec:	b083      	sub	sp, #12
  405aee:	460c      	mov	r4, r1
  405af0:	0719      	lsls	r1, r3, #28
  405af2:	9000      	str	r0, [sp, #0]
  405af4:	4616      	mov	r6, r2
  405af6:	d526      	bpl.n	405b46 <__sfvwrite_r+0x66>
  405af8:	6922      	ldr	r2, [r4, #16]
  405afa:	b322      	cbz	r2, 405b46 <__sfvwrite_r+0x66>
  405afc:	f013 0002 	ands.w	r0, r3, #2
  405b00:	6835      	ldr	r5, [r6, #0]
  405b02:	d02c      	beq.n	405b5e <__sfvwrite_r+0x7e>
  405b04:	f04f 0900 	mov.w	r9, #0
  405b08:	4fb0      	ldr	r7, [pc, #704]	; (405dcc <__sfvwrite_r+0x2ec>)
  405b0a:	46c8      	mov	r8, r9
  405b0c:	46b2      	mov	sl, r6
  405b0e:	45b8      	cmp	r8, r7
  405b10:	4643      	mov	r3, r8
  405b12:	464a      	mov	r2, r9
  405b14:	bf28      	it	cs
  405b16:	463b      	movcs	r3, r7
  405b18:	9800      	ldr	r0, [sp, #0]
  405b1a:	f1b8 0f00 	cmp.w	r8, #0
  405b1e:	d050      	beq.n	405bc2 <__sfvwrite_r+0xe2>
  405b20:	69e1      	ldr	r1, [r4, #28]
  405b22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b24:	47b0      	blx	r6
  405b26:	2800      	cmp	r0, #0
  405b28:	dd58      	ble.n	405bdc <__sfvwrite_r+0xfc>
  405b2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  405b2e:	1a1b      	subs	r3, r3, r0
  405b30:	4481      	add	r9, r0
  405b32:	eba8 0800 	sub.w	r8, r8, r0
  405b36:	f8ca 3008 	str.w	r3, [sl, #8]
  405b3a:	2b00      	cmp	r3, #0
  405b3c:	d1e7      	bne.n	405b0e <__sfvwrite_r+0x2e>
  405b3e:	2000      	movs	r0, #0
  405b40:	b003      	add	sp, #12
  405b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b46:	4621      	mov	r1, r4
  405b48:	9800      	ldr	r0, [sp, #0]
  405b4a:	f7ff fc51 	bl	4053f0 <__swsetup_r>
  405b4e:	2800      	cmp	r0, #0
  405b50:	f040 8133 	bne.w	405dba <__sfvwrite_r+0x2da>
  405b54:	89a3      	ldrh	r3, [r4, #12]
  405b56:	6835      	ldr	r5, [r6, #0]
  405b58:	f013 0002 	ands.w	r0, r3, #2
  405b5c:	d1d2      	bne.n	405b04 <__sfvwrite_r+0x24>
  405b5e:	f013 0901 	ands.w	r9, r3, #1
  405b62:	d145      	bne.n	405bf0 <__sfvwrite_r+0x110>
  405b64:	464f      	mov	r7, r9
  405b66:	9601      	str	r6, [sp, #4]
  405b68:	b337      	cbz	r7, 405bb8 <__sfvwrite_r+0xd8>
  405b6a:	059a      	lsls	r2, r3, #22
  405b6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405b70:	f140 8083 	bpl.w	405c7a <__sfvwrite_r+0x19a>
  405b74:	4547      	cmp	r7, r8
  405b76:	46c3      	mov	fp, r8
  405b78:	f0c0 80ab 	bcc.w	405cd2 <__sfvwrite_r+0x1f2>
  405b7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405b80:	f040 80ac 	bne.w	405cdc <__sfvwrite_r+0x1fc>
  405b84:	6820      	ldr	r0, [r4, #0]
  405b86:	46ba      	mov	sl, r7
  405b88:	465a      	mov	r2, fp
  405b8a:	4649      	mov	r1, r9
  405b8c:	f000 fa40 	bl	406010 <memmove>
  405b90:	68a2      	ldr	r2, [r4, #8]
  405b92:	6823      	ldr	r3, [r4, #0]
  405b94:	eba2 0208 	sub.w	r2, r2, r8
  405b98:	445b      	add	r3, fp
  405b9a:	60a2      	str	r2, [r4, #8]
  405b9c:	6023      	str	r3, [r4, #0]
  405b9e:	9a01      	ldr	r2, [sp, #4]
  405ba0:	6893      	ldr	r3, [r2, #8]
  405ba2:	eba3 030a 	sub.w	r3, r3, sl
  405ba6:	44d1      	add	r9, sl
  405ba8:	eba7 070a 	sub.w	r7, r7, sl
  405bac:	6093      	str	r3, [r2, #8]
  405bae:	2b00      	cmp	r3, #0
  405bb0:	d0c5      	beq.n	405b3e <__sfvwrite_r+0x5e>
  405bb2:	89a3      	ldrh	r3, [r4, #12]
  405bb4:	2f00      	cmp	r7, #0
  405bb6:	d1d8      	bne.n	405b6a <__sfvwrite_r+0x8a>
  405bb8:	f8d5 9000 	ldr.w	r9, [r5]
  405bbc:	686f      	ldr	r7, [r5, #4]
  405bbe:	3508      	adds	r5, #8
  405bc0:	e7d2      	b.n	405b68 <__sfvwrite_r+0x88>
  405bc2:	f8d5 9000 	ldr.w	r9, [r5]
  405bc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405bca:	3508      	adds	r5, #8
  405bcc:	e79f      	b.n	405b0e <__sfvwrite_r+0x2e>
  405bce:	2000      	movs	r0, #0
  405bd0:	4770      	bx	lr
  405bd2:	4621      	mov	r1, r4
  405bd4:	9800      	ldr	r0, [sp, #0]
  405bd6:	f7ff fd1f 	bl	405618 <_fflush_r>
  405bda:	b370      	cbz	r0, 405c3a <__sfvwrite_r+0x15a>
  405bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405be4:	f04f 30ff 	mov.w	r0, #4294967295
  405be8:	81a3      	strh	r3, [r4, #12]
  405bea:	b003      	add	sp, #12
  405bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bf0:	4681      	mov	r9, r0
  405bf2:	4633      	mov	r3, r6
  405bf4:	464e      	mov	r6, r9
  405bf6:	46a8      	mov	r8, r5
  405bf8:	469a      	mov	sl, r3
  405bfa:	464d      	mov	r5, r9
  405bfc:	b34e      	cbz	r6, 405c52 <__sfvwrite_r+0x172>
  405bfe:	b380      	cbz	r0, 405c62 <__sfvwrite_r+0x182>
  405c00:	6820      	ldr	r0, [r4, #0]
  405c02:	6923      	ldr	r3, [r4, #16]
  405c04:	6962      	ldr	r2, [r4, #20]
  405c06:	45b1      	cmp	r9, r6
  405c08:	46cb      	mov	fp, r9
  405c0a:	bf28      	it	cs
  405c0c:	46b3      	movcs	fp, r6
  405c0e:	4298      	cmp	r0, r3
  405c10:	465f      	mov	r7, fp
  405c12:	d904      	bls.n	405c1e <__sfvwrite_r+0x13e>
  405c14:	68a3      	ldr	r3, [r4, #8]
  405c16:	4413      	add	r3, r2
  405c18:	459b      	cmp	fp, r3
  405c1a:	f300 80a6 	bgt.w	405d6a <__sfvwrite_r+0x28a>
  405c1e:	4593      	cmp	fp, r2
  405c20:	db4b      	blt.n	405cba <__sfvwrite_r+0x1da>
  405c22:	4613      	mov	r3, r2
  405c24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405c26:	69e1      	ldr	r1, [r4, #28]
  405c28:	9800      	ldr	r0, [sp, #0]
  405c2a:	462a      	mov	r2, r5
  405c2c:	47b8      	blx	r7
  405c2e:	1e07      	subs	r7, r0, #0
  405c30:	ddd4      	ble.n	405bdc <__sfvwrite_r+0xfc>
  405c32:	ebb9 0907 	subs.w	r9, r9, r7
  405c36:	d0cc      	beq.n	405bd2 <__sfvwrite_r+0xf2>
  405c38:	2001      	movs	r0, #1
  405c3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  405c3e:	1bdb      	subs	r3, r3, r7
  405c40:	443d      	add	r5, r7
  405c42:	1bf6      	subs	r6, r6, r7
  405c44:	f8ca 3008 	str.w	r3, [sl, #8]
  405c48:	2b00      	cmp	r3, #0
  405c4a:	f43f af78 	beq.w	405b3e <__sfvwrite_r+0x5e>
  405c4e:	2e00      	cmp	r6, #0
  405c50:	d1d5      	bne.n	405bfe <__sfvwrite_r+0x11e>
  405c52:	f108 0308 	add.w	r3, r8, #8
  405c56:	e913 0060 	ldmdb	r3, {r5, r6}
  405c5a:	4698      	mov	r8, r3
  405c5c:	3308      	adds	r3, #8
  405c5e:	2e00      	cmp	r6, #0
  405c60:	d0f9      	beq.n	405c56 <__sfvwrite_r+0x176>
  405c62:	4632      	mov	r2, r6
  405c64:	210a      	movs	r1, #10
  405c66:	4628      	mov	r0, r5
  405c68:	f000 f982 	bl	405f70 <memchr>
  405c6c:	2800      	cmp	r0, #0
  405c6e:	f000 80a1 	beq.w	405db4 <__sfvwrite_r+0x2d4>
  405c72:	3001      	adds	r0, #1
  405c74:	eba0 0905 	sub.w	r9, r0, r5
  405c78:	e7c2      	b.n	405c00 <__sfvwrite_r+0x120>
  405c7a:	6820      	ldr	r0, [r4, #0]
  405c7c:	6923      	ldr	r3, [r4, #16]
  405c7e:	4298      	cmp	r0, r3
  405c80:	d802      	bhi.n	405c88 <__sfvwrite_r+0x1a8>
  405c82:	6963      	ldr	r3, [r4, #20]
  405c84:	429f      	cmp	r7, r3
  405c86:	d25d      	bcs.n	405d44 <__sfvwrite_r+0x264>
  405c88:	45b8      	cmp	r8, r7
  405c8a:	bf28      	it	cs
  405c8c:	46b8      	movcs	r8, r7
  405c8e:	4642      	mov	r2, r8
  405c90:	4649      	mov	r1, r9
  405c92:	f000 f9bd 	bl	406010 <memmove>
  405c96:	68a3      	ldr	r3, [r4, #8]
  405c98:	6822      	ldr	r2, [r4, #0]
  405c9a:	eba3 0308 	sub.w	r3, r3, r8
  405c9e:	4442      	add	r2, r8
  405ca0:	60a3      	str	r3, [r4, #8]
  405ca2:	6022      	str	r2, [r4, #0]
  405ca4:	b10b      	cbz	r3, 405caa <__sfvwrite_r+0x1ca>
  405ca6:	46c2      	mov	sl, r8
  405ca8:	e779      	b.n	405b9e <__sfvwrite_r+0xbe>
  405caa:	4621      	mov	r1, r4
  405cac:	9800      	ldr	r0, [sp, #0]
  405cae:	f7ff fcb3 	bl	405618 <_fflush_r>
  405cb2:	2800      	cmp	r0, #0
  405cb4:	d192      	bne.n	405bdc <__sfvwrite_r+0xfc>
  405cb6:	46c2      	mov	sl, r8
  405cb8:	e771      	b.n	405b9e <__sfvwrite_r+0xbe>
  405cba:	465a      	mov	r2, fp
  405cbc:	4629      	mov	r1, r5
  405cbe:	f000 f9a7 	bl	406010 <memmove>
  405cc2:	68a2      	ldr	r2, [r4, #8]
  405cc4:	6823      	ldr	r3, [r4, #0]
  405cc6:	eba2 020b 	sub.w	r2, r2, fp
  405cca:	445b      	add	r3, fp
  405ccc:	60a2      	str	r2, [r4, #8]
  405cce:	6023      	str	r3, [r4, #0]
  405cd0:	e7af      	b.n	405c32 <__sfvwrite_r+0x152>
  405cd2:	6820      	ldr	r0, [r4, #0]
  405cd4:	46b8      	mov	r8, r7
  405cd6:	46ba      	mov	sl, r7
  405cd8:	46bb      	mov	fp, r7
  405cda:	e755      	b.n	405b88 <__sfvwrite_r+0xa8>
  405cdc:	6962      	ldr	r2, [r4, #20]
  405cde:	6820      	ldr	r0, [r4, #0]
  405ce0:	6921      	ldr	r1, [r4, #16]
  405ce2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405ce6:	eba0 0a01 	sub.w	sl, r0, r1
  405cea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405cee:	f10a 0001 	add.w	r0, sl, #1
  405cf2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405cf6:	4438      	add	r0, r7
  405cf8:	4540      	cmp	r0, r8
  405cfa:	4642      	mov	r2, r8
  405cfc:	bf84      	itt	hi
  405cfe:	4680      	movhi	r8, r0
  405d00:	4642      	movhi	r2, r8
  405d02:	055b      	lsls	r3, r3, #21
  405d04:	d544      	bpl.n	405d90 <__sfvwrite_r+0x2b0>
  405d06:	4611      	mov	r1, r2
  405d08:	9800      	ldr	r0, [sp, #0]
  405d0a:	f7fd fe35 	bl	403978 <_malloc_r>
  405d0e:	4683      	mov	fp, r0
  405d10:	2800      	cmp	r0, #0
  405d12:	d055      	beq.n	405dc0 <__sfvwrite_r+0x2e0>
  405d14:	4652      	mov	r2, sl
  405d16:	6921      	ldr	r1, [r4, #16]
  405d18:	f7fe f8de 	bl	403ed8 <memcpy>
  405d1c:	89a3      	ldrh	r3, [r4, #12]
  405d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405d26:	81a3      	strh	r3, [r4, #12]
  405d28:	eb0b 000a 	add.w	r0, fp, sl
  405d2c:	eba8 030a 	sub.w	r3, r8, sl
  405d30:	f8c4 b010 	str.w	fp, [r4, #16]
  405d34:	f8c4 8014 	str.w	r8, [r4, #20]
  405d38:	6020      	str	r0, [r4, #0]
  405d3a:	60a3      	str	r3, [r4, #8]
  405d3c:	46b8      	mov	r8, r7
  405d3e:	46ba      	mov	sl, r7
  405d40:	46bb      	mov	fp, r7
  405d42:	e721      	b.n	405b88 <__sfvwrite_r+0xa8>
  405d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405d48:	42b9      	cmp	r1, r7
  405d4a:	bf28      	it	cs
  405d4c:	4639      	movcs	r1, r7
  405d4e:	464a      	mov	r2, r9
  405d50:	fb91 f1f3 	sdiv	r1, r1, r3
  405d54:	9800      	ldr	r0, [sp, #0]
  405d56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405d58:	fb03 f301 	mul.w	r3, r3, r1
  405d5c:	69e1      	ldr	r1, [r4, #28]
  405d5e:	47b0      	blx	r6
  405d60:	f1b0 0a00 	subs.w	sl, r0, #0
  405d64:	f73f af1b 	bgt.w	405b9e <__sfvwrite_r+0xbe>
  405d68:	e738      	b.n	405bdc <__sfvwrite_r+0xfc>
  405d6a:	461a      	mov	r2, r3
  405d6c:	4629      	mov	r1, r5
  405d6e:	9301      	str	r3, [sp, #4]
  405d70:	f000 f94e 	bl	406010 <memmove>
  405d74:	6822      	ldr	r2, [r4, #0]
  405d76:	9b01      	ldr	r3, [sp, #4]
  405d78:	9800      	ldr	r0, [sp, #0]
  405d7a:	441a      	add	r2, r3
  405d7c:	6022      	str	r2, [r4, #0]
  405d7e:	4621      	mov	r1, r4
  405d80:	f7ff fc4a 	bl	405618 <_fflush_r>
  405d84:	9b01      	ldr	r3, [sp, #4]
  405d86:	2800      	cmp	r0, #0
  405d88:	f47f af28 	bne.w	405bdc <__sfvwrite_r+0xfc>
  405d8c:	461f      	mov	r7, r3
  405d8e:	e750      	b.n	405c32 <__sfvwrite_r+0x152>
  405d90:	9800      	ldr	r0, [sp, #0]
  405d92:	f000 f9a1 	bl	4060d8 <_realloc_r>
  405d96:	4683      	mov	fp, r0
  405d98:	2800      	cmp	r0, #0
  405d9a:	d1c5      	bne.n	405d28 <__sfvwrite_r+0x248>
  405d9c:	9d00      	ldr	r5, [sp, #0]
  405d9e:	6921      	ldr	r1, [r4, #16]
  405da0:	4628      	mov	r0, r5
  405da2:	f7ff fdb7 	bl	405914 <_free_r>
  405da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405daa:	220c      	movs	r2, #12
  405dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405db0:	602a      	str	r2, [r5, #0]
  405db2:	e715      	b.n	405be0 <__sfvwrite_r+0x100>
  405db4:	f106 0901 	add.w	r9, r6, #1
  405db8:	e722      	b.n	405c00 <__sfvwrite_r+0x120>
  405dba:	f04f 30ff 	mov.w	r0, #4294967295
  405dbe:	e6bf      	b.n	405b40 <__sfvwrite_r+0x60>
  405dc0:	9a00      	ldr	r2, [sp, #0]
  405dc2:	230c      	movs	r3, #12
  405dc4:	6013      	str	r3, [r2, #0]
  405dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405dca:	e709      	b.n	405be0 <__sfvwrite_r+0x100>
  405dcc:	7ffffc00 	.word	0x7ffffc00

00405dd0 <_fwalk_reent>:
  405dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405dd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405dd8:	d01f      	beq.n	405e1a <_fwalk_reent+0x4a>
  405dda:	4688      	mov	r8, r1
  405ddc:	4606      	mov	r6, r0
  405dde:	f04f 0900 	mov.w	r9, #0
  405de2:	687d      	ldr	r5, [r7, #4]
  405de4:	68bc      	ldr	r4, [r7, #8]
  405de6:	3d01      	subs	r5, #1
  405de8:	d411      	bmi.n	405e0e <_fwalk_reent+0x3e>
  405dea:	89a3      	ldrh	r3, [r4, #12]
  405dec:	2b01      	cmp	r3, #1
  405dee:	f105 35ff 	add.w	r5, r5, #4294967295
  405df2:	d908      	bls.n	405e06 <_fwalk_reent+0x36>
  405df4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405df8:	3301      	adds	r3, #1
  405dfa:	4621      	mov	r1, r4
  405dfc:	4630      	mov	r0, r6
  405dfe:	d002      	beq.n	405e06 <_fwalk_reent+0x36>
  405e00:	47c0      	blx	r8
  405e02:	ea49 0900 	orr.w	r9, r9, r0
  405e06:	1c6b      	adds	r3, r5, #1
  405e08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405e0c:	d1ed      	bne.n	405dea <_fwalk_reent+0x1a>
  405e0e:	683f      	ldr	r7, [r7, #0]
  405e10:	2f00      	cmp	r7, #0
  405e12:	d1e6      	bne.n	405de2 <_fwalk_reent+0x12>
  405e14:	4648      	mov	r0, r9
  405e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e1a:	46b9      	mov	r9, r7
  405e1c:	4648      	mov	r0, r9
  405e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e22:	bf00      	nop

00405e24 <__locale_mb_cur_max>:
  405e24:	4b04      	ldr	r3, [pc, #16]	; (405e38 <__locale_mb_cur_max+0x14>)
  405e26:	4a05      	ldr	r2, [pc, #20]	; (405e3c <__locale_mb_cur_max+0x18>)
  405e28:	681b      	ldr	r3, [r3, #0]
  405e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405e2c:	2b00      	cmp	r3, #0
  405e2e:	bf08      	it	eq
  405e30:	4613      	moveq	r3, r2
  405e32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405e36:	4770      	bx	lr
  405e38:	2040000c 	.word	0x2040000c
  405e3c:	2040084c 	.word	0x2040084c

00405e40 <__retarget_lock_init_recursive>:
  405e40:	4770      	bx	lr
  405e42:	bf00      	nop

00405e44 <__retarget_lock_close_recursive>:
  405e44:	4770      	bx	lr
  405e46:	bf00      	nop

00405e48 <__retarget_lock_acquire_recursive>:
  405e48:	4770      	bx	lr
  405e4a:	bf00      	nop

00405e4c <__retarget_lock_release_recursive>:
  405e4c:	4770      	bx	lr
  405e4e:	bf00      	nop

00405e50 <__swhatbuf_r>:
  405e50:	b570      	push	{r4, r5, r6, lr}
  405e52:	460c      	mov	r4, r1
  405e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e58:	2900      	cmp	r1, #0
  405e5a:	b090      	sub	sp, #64	; 0x40
  405e5c:	4615      	mov	r5, r2
  405e5e:	461e      	mov	r6, r3
  405e60:	db14      	blt.n	405e8c <__swhatbuf_r+0x3c>
  405e62:	aa01      	add	r2, sp, #4
  405e64:	f000 fc9e 	bl	4067a4 <_fstat_r>
  405e68:	2800      	cmp	r0, #0
  405e6a:	db0f      	blt.n	405e8c <__swhatbuf_r+0x3c>
  405e6c:	9a02      	ldr	r2, [sp, #8]
  405e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405e76:	fab2 f282 	clz	r2, r2
  405e7a:	0952      	lsrs	r2, r2, #5
  405e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405e84:	6032      	str	r2, [r6, #0]
  405e86:	602b      	str	r3, [r5, #0]
  405e88:	b010      	add	sp, #64	; 0x40
  405e8a:	bd70      	pop	{r4, r5, r6, pc}
  405e8c:	89a2      	ldrh	r2, [r4, #12]
  405e8e:	2300      	movs	r3, #0
  405e90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405e94:	6033      	str	r3, [r6, #0]
  405e96:	d004      	beq.n	405ea2 <__swhatbuf_r+0x52>
  405e98:	2240      	movs	r2, #64	; 0x40
  405e9a:	4618      	mov	r0, r3
  405e9c:	602a      	str	r2, [r5, #0]
  405e9e:	b010      	add	sp, #64	; 0x40
  405ea0:	bd70      	pop	{r4, r5, r6, pc}
  405ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ea6:	602b      	str	r3, [r5, #0]
  405ea8:	b010      	add	sp, #64	; 0x40
  405eaa:	bd70      	pop	{r4, r5, r6, pc}

00405eac <__smakebuf_r>:
  405eac:	898a      	ldrh	r2, [r1, #12]
  405eae:	0792      	lsls	r2, r2, #30
  405eb0:	460b      	mov	r3, r1
  405eb2:	d506      	bpl.n	405ec2 <__smakebuf_r+0x16>
  405eb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405eb8:	2101      	movs	r1, #1
  405eba:	601a      	str	r2, [r3, #0]
  405ebc:	611a      	str	r2, [r3, #16]
  405ebe:	6159      	str	r1, [r3, #20]
  405ec0:	4770      	bx	lr
  405ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ec4:	b083      	sub	sp, #12
  405ec6:	ab01      	add	r3, sp, #4
  405ec8:	466a      	mov	r2, sp
  405eca:	460c      	mov	r4, r1
  405ecc:	4606      	mov	r6, r0
  405ece:	f7ff ffbf 	bl	405e50 <__swhatbuf_r>
  405ed2:	9900      	ldr	r1, [sp, #0]
  405ed4:	4605      	mov	r5, r0
  405ed6:	4630      	mov	r0, r6
  405ed8:	f7fd fd4e 	bl	403978 <_malloc_r>
  405edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ee0:	b1d8      	cbz	r0, 405f1a <__smakebuf_r+0x6e>
  405ee2:	9a01      	ldr	r2, [sp, #4]
  405ee4:	4f15      	ldr	r7, [pc, #84]	; (405f3c <__smakebuf_r+0x90>)
  405ee6:	9900      	ldr	r1, [sp, #0]
  405ee8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405eee:	81a3      	strh	r3, [r4, #12]
  405ef0:	6020      	str	r0, [r4, #0]
  405ef2:	6120      	str	r0, [r4, #16]
  405ef4:	6161      	str	r1, [r4, #20]
  405ef6:	b91a      	cbnz	r2, 405f00 <__smakebuf_r+0x54>
  405ef8:	432b      	orrs	r3, r5
  405efa:	81a3      	strh	r3, [r4, #12]
  405efc:	b003      	add	sp, #12
  405efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f00:	4630      	mov	r0, r6
  405f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405f06:	f000 fc61 	bl	4067cc <_isatty_r>
  405f0a:	b1a0      	cbz	r0, 405f36 <__smakebuf_r+0x8a>
  405f0c:	89a3      	ldrh	r3, [r4, #12]
  405f0e:	f023 0303 	bic.w	r3, r3, #3
  405f12:	f043 0301 	orr.w	r3, r3, #1
  405f16:	b21b      	sxth	r3, r3
  405f18:	e7ee      	b.n	405ef8 <__smakebuf_r+0x4c>
  405f1a:	059a      	lsls	r2, r3, #22
  405f1c:	d4ee      	bmi.n	405efc <__smakebuf_r+0x50>
  405f1e:	f023 0303 	bic.w	r3, r3, #3
  405f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405f26:	f043 0302 	orr.w	r3, r3, #2
  405f2a:	2101      	movs	r1, #1
  405f2c:	81a3      	strh	r3, [r4, #12]
  405f2e:	6022      	str	r2, [r4, #0]
  405f30:	6122      	str	r2, [r4, #16]
  405f32:	6161      	str	r1, [r4, #20]
  405f34:	e7e2      	b.n	405efc <__smakebuf_r+0x50>
  405f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f3a:	e7dd      	b.n	405ef8 <__smakebuf_r+0x4c>
  405f3c:	0040566d 	.word	0x0040566d

00405f40 <__ascii_mbtowc>:
  405f40:	b082      	sub	sp, #8
  405f42:	b149      	cbz	r1, 405f58 <__ascii_mbtowc+0x18>
  405f44:	b15a      	cbz	r2, 405f5e <__ascii_mbtowc+0x1e>
  405f46:	b16b      	cbz	r3, 405f64 <__ascii_mbtowc+0x24>
  405f48:	7813      	ldrb	r3, [r2, #0]
  405f4a:	600b      	str	r3, [r1, #0]
  405f4c:	7812      	ldrb	r2, [r2, #0]
  405f4e:	1c10      	adds	r0, r2, #0
  405f50:	bf18      	it	ne
  405f52:	2001      	movne	r0, #1
  405f54:	b002      	add	sp, #8
  405f56:	4770      	bx	lr
  405f58:	a901      	add	r1, sp, #4
  405f5a:	2a00      	cmp	r2, #0
  405f5c:	d1f3      	bne.n	405f46 <__ascii_mbtowc+0x6>
  405f5e:	4610      	mov	r0, r2
  405f60:	b002      	add	sp, #8
  405f62:	4770      	bx	lr
  405f64:	f06f 0001 	mvn.w	r0, #1
  405f68:	e7f4      	b.n	405f54 <__ascii_mbtowc+0x14>
  405f6a:	bf00      	nop
  405f6c:	0000      	movs	r0, r0
	...

00405f70 <memchr>:
  405f70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f74:	2a10      	cmp	r2, #16
  405f76:	db2b      	blt.n	405fd0 <memchr+0x60>
  405f78:	f010 0f07 	tst.w	r0, #7
  405f7c:	d008      	beq.n	405f90 <memchr+0x20>
  405f7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f82:	3a01      	subs	r2, #1
  405f84:	428b      	cmp	r3, r1
  405f86:	d02d      	beq.n	405fe4 <memchr+0x74>
  405f88:	f010 0f07 	tst.w	r0, #7
  405f8c:	b342      	cbz	r2, 405fe0 <memchr+0x70>
  405f8e:	d1f6      	bne.n	405f7e <memchr+0xe>
  405f90:	b4f0      	push	{r4, r5, r6, r7}
  405f92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f9a:	f022 0407 	bic.w	r4, r2, #7
  405f9e:	f07f 0700 	mvns.w	r7, #0
  405fa2:	2300      	movs	r3, #0
  405fa4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405fa8:	3c08      	subs	r4, #8
  405faa:	ea85 0501 	eor.w	r5, r5, r1
  405fae:	ea86 0601 	eor.w	r6, r6, r1
  405fb2:	fa85 f547 	uadd8	r5, r5, r7
  405fb6:	faa3 f587 	sel	r5, r3, r7
  405fba:	fa86 f647 	uadd8	r6, r6, r7
  405fbe:	faa5 f687 	sel	r6, r5, r7
  405fc2:	b98e      	cbnz	r6, 405fe8 <memchr+0x78>
  405fc4:	d1ee      	bne.n	405fa4 <memchr+0x34>
  405fc6:	bcf0      	pop	{r4, r5, r6, r7}
  405fc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405fcc:	f002 0207 	and.w	r2, r2, #7
  405fd0:	b132      	cbz	r2, 405fe0 <memchr+0x70>
  405fd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405fd6:	3a01      	subs	r2, #1
  405fd8:	ea83 0301 	eor.w	r3, r3, r1
  405fdc:	b113      	cbz	r3, 405fe4 <memchr+0x74>
  405fde:	d1f8      	bne.n	405fd2 <memchr+0x62>
  405fe0:	2000      	movs	r0, #0
  405fe2:	4770      	bx	lr
  405fe4:	3801      	subs	r0, #1
  405fe6:	4770      	bx	lr
  405fe8:	2d00      	cmp	r5, #0
  405fea:	bf06      	itte	eq
  405fec:	4635      	moveq	r5, r6
  405fee:	3803      	subeq	r0, #3
  405ff0:	3807      	subne	r0, #7
  405ff2:	f015 0f01 	tst.w	r5, #1
  405ff6:	d107      	bne.n	406008 <memchr+0x98>
  405ff8:	3001      	adds	r0, #1
  405ffa:	f415 7f80 	tst.w	r5, #256	; 0x100
  405ffe:	bf02      	ittt	eq
  406000:	3001      	addeq	r0, #1
  406002:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406006:	3001      	addeq	r0, #1
  406008:	bcf0      	pop	{r4, r5, r6, r7}
  40600a:	3801      	subs	r0, #1
  40600c:	4770      	bx	lr
  40600e:	bf00      	nop

00406010 <memmove>:
  406010:	4288      	cmp	r0, r1
  406012:	b5f0      	push	{r4, r5, r6, r7, lr}
  406014:	d90d      	bls.n	406032 <memmove+0x22>
  406016:	188b      	adds	r3, r1, r2
  406018:	4298      	cmp	r0, r3
  40601a:	d20a      	bcs.n	406032 <memmove+0x22>
  40601c:	1884      	adds	r4, r0, r2
  40601e:	2a00      	cmp	r2, #0
  406020:	d051      	beq.n	4060c6 <memmove+0xb6>
  406022:	4622      	mov	r2, r4
  406024:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406028:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40602c:	4299      	cmp	r1, r3
  40602e:	d1f9      	bne.n	406024 <memmove+0x14>
  406030:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406032:	2a0f      	cmp	r2, #15
  406034:	d948      	bls.n	4060c8 <memmove+0xb8>
  406036:	ea41 0300 	orr.w	r3, r1, r0
  40603a:	079b      	lsls	r3, r3, #30
  40603c:	d146      	bne.n	4060cc <memmove+0xbc>
  40603e:	f100 0410 	add.w	r4, r0, #16
  406042:	f101 0310 	add.w	r3, r1, #16
  406046:	4615      	mov	r5, r2
  406048:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40604c:	f844 6c10 	str.w	r6, [r4, #-16]
  406050:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406054:	f844 6c0c 	str.w	r6, [r4, #-12]
  406058:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40605c:	f844 6c08 	str.w	r6, [r4, #-8]
  406060:	3d10      	subs	r5, #16
  406062:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406066:	f844 6c04 	str.w	r6, [r4, #-4]
  40606a:	2d0f      	cmp	r5, #15
  40606c:	f103 0310 	add.w	r3, r3, #16
  406070:	f104 0410 	add.w	r4, r4, #16
  406074:	d8e8      	bhi.n	406048 <memmove+0x38>
  406076:	f1a2 0310 	sub.w	r3, r2, #16
  40607a:	f023 030f 	bic.w	r3, r3, #15
  40607e:	f002 0e0f 	and.w	lr, r2, #15
  406082:	3310      	adds	r3, #16
  406084:	f1be 0f03 	cmp.w	lr, #3
  406088:	4419      	add	r1, r3
  40608a:	4403      	add	r3, r0
  40608c:	d921      	bls.n	4060d2 <memmove+0xc2>
  40608e:	1f1e      	subs	r6, r3, #4
  406090:	460d      	mov	r5, r1
  406092:	4674      	mov	r4, lr
  406094:	3c04      	subs	r4, #4
  406096:	f855 7b04 	ldr.w	r7, [r5], #4
  40609a:	f846 7f04 	str.w	r7, [r6, #4]!
  40609e:	2c03      	cmp	r4, #3
  4060a0:	d8f8      	bhi.n	406094 <memmove+0x84>
  4060a2:	f1ae 0404 	sub.w	r4, lr, #4
  4060a6:	f024 0403 	bic.w	r4, r4, #3
  4060aa:	3404      	adds	r4, #4
  4060ac:	4421      	add	r1, r4
  4060ae:	4423      	add	r3, r4
  4060b0:	f002 0203 	and.w	r2, r2, #3
  4060b4:	b162      	cbz	r2, 4060d0 <memmove+0xc0>
  4060b6:	3b01      	subs	r3, #1
  4060b8:	440a      	add	r2, r1
  4060ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4060be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4060c2:	428a      	cmp	r2, r1
  4060c4:	d1f9      	bne.n	4060ba <memmove+0xaa>
  4060c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060c8:	4603      	mov	r3, r0
  4060ca:	e7f3      	b.n	4060b4 <memmove+0xa4>
  4060cc:	4603      	mov	r3, r0
  4060ce:	e7f2      	b.n	4060b6 <memmove+0xa6>
  4060d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060d2:	4672      	mov	r2, lr
  4060d4:	e7ee      	b.n	4060b4 <memmove+0xa4>
  4060d6:	bf00      	nop

004060d8 <_realloc_r>:
  4060d8:	2900      	cmp	r1, #0
  4060da:	f000 8095 	beq.w	406208 <_realloc_r+0x130>
  4060de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060e2:	460d      	mov	r5, r1
  4060e4:	4616      	mov	r6, r2
  4060e6:	b083      	sub	sp, #12
  4060e8:	4680      	mov	r8, r0
  4060ea:	f106 070b 	add.w	r7, r6, #11
  4060ee:	f7fd ffdb 	bl	4040a8 <__malloc_lock>
  4060f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4060f6:	2f16      	cmp	r7, #22
  4060f8:	f02e 0403 	bic.w	r4, lr, #3
  4060fc:	f1a5 0908 	sub.w	r9, r5, #8
  406100:	d83c      	bhi.n	40617c <_realloc_r+0xa4>
  406102:	2210      	movs	r2, #16
  406104:	4617      	mov	r7, r2
  406106:	42be      	cmp	r6, r7
  406108:	d83d      	bhi.n	406186 <_realloc_r+0xae>
  40610a:	4294      	cmp	r4, r2
  40610c:	da43      	bge.n	406196 <_realloc_r+0xbe>
  40610e:	4bc4      	ldr	r3, [pc, #784]	; (406420 <_realloc_r+0x348>)
  406110:	6899      	ldr	r1, [r3, #8]
  406112:	eb09 0004 	add.w	r0, r9, r4
  406116:	4288      	cmp	r0, r1
  406118:	f000 80b4 	beq.w	406284 <_realloc_r+0x1ac>
  40611c:	6843      	ldr	r3, [r0, #4]
  40611e:	f023 0101 	bic.w	r1, r3, #1
  406122:	4401      	add	r1, r0
  406124:	6849      	ldr	r1, [r1, #4]
  406126:	07c9      	lsls	r1, r1, #31
  406128:	d54c      	bpl.n	4061c4 <_realloc_r+0xec>
  40612a:	f01e 0f01 	tst.w	lr, #1
  40612e:	f000 809b 	beq.w	406268 <_realloc_r+0x190>
  406132:	4631      	mov	r1, r6
  406134:	4640      	mov	r0, r8
  406136:	f7fd fc1f 	bl	403978 <_malloc_r>
  40613a:	4606      	mov	r6, r0
  40613c:	2800      	cmp	r0, #0
  40613e:	d03a      	beq.n	4061b6 <_realloc_r+0xde>
  406140:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406144:	f023 0301 	bic.w	r3, r3, #1
  406148:	444b      	add	r3, r9
  40614a:	f1a0 0208 	sub.w	r2, r0, #8
  40614e:	429a      	cmp	r2, r3
  406150:	f000 8121 	beq.w	406396 <_realloc_r+0x2be>
  406154:	1f22      	subs	r2, r4, #4
  406156:	2a24      	cmp	r2, #36	; 0x24
  406158:	f200 8107 	bhi.w	40636a <_realloc_r+0x292>
  40615c:	2a13      	cmp	r2, #19
  40615e:	f200 80db 	bhi.w	406318 <_realloc_r+0x240>
  406162:	4603      	mov	r3, r0
  406164:	462a      	mov	r2, r5
  406166:	6811      	ldr	r1, [r2, #0]
  406168:	6019      	str	r1, [r3, #0]
  40616a:	6851      	ldr	r1, [r2, #4]
  40616c:	6059      	str	r1, [r3, #4]
  40616e:	6892      	ldr	r2, [r2, #8]
  406170:	609a      	str	r2, [r3, #8]
  406172:	4629      	mov	r1, r5
  406174:	4640      	mov	r0, r8
  406176:	f7ff fbcd 	bl	405914 <_free_r>
  40617a:	e01c      	b.n	4061b6 <_realloc_r+0xde>
  40617c:	f027 0707 	bic.w	r7, r7, #7
  406180:	2f00      	cmp	r7, #0
  406182:	463a      	mov	r2, r7
  406184:	dabf      	bge.n	406106 <_realloc_r+0x2e>
  406186:	2600      	movs	r6, #0
  406188:	230c      	movs	r3, #12
  40618a:	4630      	mov	r0, r6
  40618c:	f8c8 3000 	str.w	r3, [r8]
  406190:	b003      	add	sp, #12
  406192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406196:	462e      	mov	r6, r5
  406198:	1be3      	subs	r3, r4, r7
  40619a:	2b0f      	cmp	r3, #15
  40619c:	d81e      	bhi.n	4061dc <_realloc_r+0x104>
  40619e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4061a2:	f003 0301 	and.w	r3, r3, #1
  4061a6:	4323      	orrs	r3, r4
  4061a8:	444c      	add	r4, r9
  4061aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4061ae:	6863      	ldr	r3, [r4, #4]
  4061b0:	f043 0301 	orr.w	r3, r3, #1
  4061b4:	6063      	str	r3, [r4, #4]
  4061b6:	4640      	mov	r0, r8
  4061b8:	f7fd ff7c 	bl	4040b4 <__malloc_unlock>
  4061bc:	4630      	mov	r0, r6
  4061be:	b003      	add	sp, #12
  4061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061c4:	f023 0303 	bic.w	r3, r3, #3
  4061c8:	18e1      	adds	r1, r4, r3
  4061ca:	4291      	cmp	r1, r2
  4061cc:	db1f      	blt.n	40620e <_realloc_r+0x136>
  4061ce:	68c3      	ldr	r3, [r0, #12]
  4061d0:	6882      	ldr	r2, [r0, #8]
  4061d2:	462e      	mov	r6, r5
  4061d4:	60d3      	str	r3, [r2, #12]
  4061d6:	460c      	mov	r4, r1
  4061d8:	609a      	str	r2, [r3, #8]
  4061da:	e7dd      	b.n	406198 <_realloc_r+0xc0>
  4061dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4061e0:	eb09 0107 	add.w	r1, r9, r7
  4061e4:	f002 0201 	and.w	r2, r2, #1
  4061e8:	444c      	add	r4, r9
  4061ea:	f043 0301 	orr.w	r3, r3, #1
  4061ee:	4317      	orrs	r7, r2
  4061f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4061f4:	604b      	str	r3, [r1, #4]
  4061f6:	6863      	ldr	r3, [r4, #4]
  4061f8:	f043 0301 	orr.w	r3, r3, #1
  4061fc:	3108      	adds	r1, #8
  4061fe:	6063      	str	r3, [r4, #4]
  406200:	4640      	mov	r0, r8
  406202:	f7ff fb87 	bl	405914 <_free_r>
  406206:	e7d6      	b.n	4061b6 <_realloc_r+0xde>
  406208:	4611      	mov	r1, r2
  40620a:	f7fd bbb5 	b.w	403978 <_malloc_r>
  40620e:	f01e 0f01 	tst.w	lr, #1
  406212:	d18e      	bne.n	406132 <_realloc_r+0x5a>
  406214:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406218:	eba9 0a01 	sub.w	sl, r9, r1
  40621c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406220:	f021 0103 	bic.w	r1, r1, #3
  406224:	440b      	add	r3, r1
  406226:	4423      	add	r3, r4
  406228:	4293      	cmp	r3, r2
  40622a:	db25      	blt.n	406278 <_realloc_r+0x1a0>
  40622c:	68c2      	ldr	r2, [r0, #12]
  40622e:	6881      	ldr	r1, [r0, #8]
  406230:	4656      	mov	r6, sl
  406232:	60ca      	str	r2, [r1, #12]
  406234:	6091      	str	r1, [r2, #8]
  406236:	f8da 100c 	ldr.w	r1, [sl, #12]
  40623a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40623e:	1f22      	subs	r2, r4, #4
  406240:	2a24      	cmp	r2, #36	; 0x24
  406242:	60c1      	str	r1, [r0, #12]
  406244:	6088      	str	r0, [r1, #8]
  406246:	f200 8094 	bhi.w	406372 <_realloc_r+0x29a>
  40624a:	2a13      	cmp	r2, #19
  40624c:	d96f      	bls.n	40632e <_realloc_r+0x256>
  40624e:	6829      	ldr	r1, [r5, #0]
  406250:	f8ca 1008 	str.w	r1, [sl, #8]
  406254:	6869      	ldr	r1, [r5, #4]
  406256:	f8ca 100c 	str.w	r1, [sl, #12]
  40625a:	2a1b      	cmp	r2, #27
  40625c:	f200 80a2 	bhi.w	4063a4 <_realloc_r+0x2cc>
  406260:	3508      	adds	r5, #8
  406262:	f10a 0210 	add.w	r2, sl, #16
  406266:	e063      	b.n	406330 <_realloc_r+0x258>
  406268:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40626c:	eba9 0a03 	sub.w	sl, r9, r3
  406270:	f8da 1004 	ldr.w	r1, [sl, #4]
  406274:	f021 0103 	bic.w	r1, r1, #3
  406278:	1863      	adds	r3, r4, r1
  40627a:	4293      	cmp	r3, r2
  40627c:	f6ff af59 	blt.w	406132 <_realloc_r+0x5a>
  406280:	4656      	mov	r6, sl
  406282:	e7d8      	b.n	406236 <_realloc_r+0x15e>
  406284:	6841      	ldr	r1, [r0, #4]
  406286:	f021 0b03 	bic.w	fp, r1, #3
  40628a:	44a3      	add	fp, r4
  40628c:	f107 0010 	add.w	r0, r7, #16
  406290:	4583      	cmp	fp, r0
  406292:	da56      	bge.n	406342 <_realloc_r+0x26a>
  406294:	f01e 0f01 	tst.w	lr, #1
  406298:	f47f af4b 	bne.w	406132 <_realloc_r+0x5a>
  40629c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4062a0:	eba9 0a01 	sub.w	sl, r9, r1
  4062a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4062a8:	f021 0103 	bic.w	r1, r1, #3
  4062ac:	448b      	add	fp, r1
  4062ae:	4558      	cmp	r0, fp
  4062b0:	dce2      	bgt.n	406278 <_realloc_r+0x1a0>
  4062b2:	4656      	mov	r6, sl
  4062b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4062b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4062bc:	1f22      	subs	r2, r4, #4
  4062be:	2a24      	cmp	r2, #36	; 0x24
  4062c0:	60c1      	str	r1, [r0, #12]
  4062c2:	6088      	str	r0, [r1, #8]
  4062c4:	f200 808f 	bhi.w	4063e6 <_realloc_r+0x30e>
  4062c8:	2a13      	cmp	r2, #19
  4062ca:	f240 808a 	bls.w	4063e2 <_realloc_r+0x30a>
  4062ce:	6829      	ldr	r1, [r5, #0]
  4062d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4062d4:	6869      	ldr	r1, [r5, #4]
  4062d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4062da:	2a1b      	cmp	r2, #27
  4062dc:	f200 808a 	bhi.w	4063f4 <_realloc_r+0x31c>
  4062e0:	3508      	adds	r5, #8
  4062e2:	f10a 0210 	add.w	r2, sl, #16
  4062e6:	6829      	ldr	r1, [r5, #0]
  4062e8:	6011      	str	r1, [r2, #0]
  4062ea:	6869      	ldr	r1, [r5, #4]
  4062ec:	6051      	str	r1, [r2, #4]
  4062ee:	68a9      	ldr	r1, [r5, #8]
  4062f0:	6091      	str	r1, [r2, #8]
  4062f2:	eb0a 0107 	add.w	r1, sl, r7
  4062f6:	ebab 0207 	sub.w	r2, fp, r7
  4062fa:	f042 0201 	orr.w	r2, r2, #1
  4062fe:	6099      	str	r1, [r3, #8]
  406300:	604a      	str	r2, [r1, #4]
  406302:	f8da 3004 	ldr.w	r3, [sl, #4]
  406306:	f003 0301 	and.w	r3, r3, #1
  40630a:	431f      	orrs	r7, r3
  40630c:	4640      	mov	r0, r8
  40630e:	f8ca 7004 	str.w	r7, [sl, #4]
  406312:	f7fd fecf 	bl	4040b4 <__malloc_unlock>
  406316:	e751      	b.n	4061bc <_realloc_r+0xe4>
  406318:	682b      	ldr	r3, [r5, #0]
  40631a:	6003      	str	r3, [r0, #0]
  40631c:	686b      	ldr	r3, [r5, #4]
  40631e:	6043      	str	r3, [r0, #4]
  406320:	2a1b      	cmp	r2, #27
  406322:	d82d      	bhi.n	406380 <_realloc_r+0x2a8>
  406324:	f100 0308 	add.w	r3, r0, #8
  406328:	f105 0208 	add.w	r2, r5, #8
  40632c:	e71b      	b.n	406166 <_realloc_r+0x8e>
  40632e:	4632      	mov	r2, r6
  406330:	6829      	ldr	r1, [r5, #0]
  406332:	6011      	str	r1, [r2, #0]
  406334:	6869      	ldr	r1, [r5, #4]
  406336:	6051      	str	r1, [r2, #4]
  406338:	68a9      	ldr	r1, [r5, #8]
  40633a:	6091      	str	r1, [r2, #8]
  40633c:	461c      	mov	r4, r3
  40633e:	46d1      	mov	r9, sl
  406340:	e72a      	b.n	406198 <_realloc_r+0xc0>
  406342:	eb09 0107 	add.w	r1, r9, r7
  406346:	ebab 0b07 	sub.w	fp, fp, r7
  40634a:	f04b 0201 	orr.w	r2, fp, #1
  40634e:	6099      	str	r1, [r3, #8]
  406350:	604a      	str	r2, [r1, #4]
  406352:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406356:	f003 0301 	and.w	r3, r3, #1
  40635a:	431f      	orrs	r7, r3
  40635c:	4640      	mov	r0, r8
  40635e:	f845 7c04 	str.w	r7, [r5, #-4]
  406362:	f7fd fea7 	bl	4040b4 <__malloc_unlock>
  406366:	462e      	mov	r6, r5
  406368:	e728      	b.n	4061bc <_realloc_r+0xe4>
  40636a:	4629      	mov	r1, r5
  40636c:	f7ff fe50 	bl	406010 <memmove>
  406370:	e6ff      	b.n	406172 <_realloc_r+0x9a>
  406372:	4629      	mov	r1, r5
  406374:	4630      	mov	r0, r6
  406376:	461c      	mov	r4, r3
  406378:	46d1      	mov	r9, sl
  40637a:	f7ff fe49 	bl	406010 <memmove>
  40637e:	e70b      	b.n	406198 <_realloc_r+0xc0>
  406380:	68ab      	ldr	r3, [r5, #8]
  406382:	6083      	str	r3, [r0, #8]
  406384:	68eb      	ldr	r3, [r5, #12]
  406386:	60c3      	str	r3, [r0, #12]
  406388:	2a24      	cmp	r2, #36	; 0x24
  40638a:	d017      	beq.n	4063bc <_realloc_r+0x2e4>
  40638c:	f100 0310 	add.w	r3, r0, #16
  406390:	f105 0210 	add.w	r2, r5, #16
  406394:	e6e7      	b.n	406166 <_realloc_r+0x8e>
  406396:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40639a:	f023 0303 	bic.w	r3, r3, #3
  40639e:	441c      	add	r4, r3
  4063a0:	462e      	mov	r6, r5
  4063a2:	e6f9      	b.n	406198 <_realloc_r+0xc0>
  4063a4:	68a9      	ldr	r1, [r5, #8]
  4063a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4063aa:	68e9      	ldr	r1, [r5, #12]
  4063ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4063b0:	2a24      	cmp	r2, #36	; 0x24
  4063b2:	d00c      	beq.n	4063ce <_realloc_r+0x2f6>
  4063b4:	3510      	adds	r5, #16
  4063b6:	f10a 0218 	add.w	r2, sl, #24
  4063ba:	e7b9      	b.n	406330 <_realloc_r+0x258>
  4063bc:	692b      	ldr	r3, [r5, #16]
  4063be:	6103      	str	r3, [r0, #16]
  4063c0:	696b      	ldr	r3, [r5, #20]
  4063c2:	6143      	str	r3, [r0, #20]
  4063c4:	f105 0218 	add.w	r2, r5, #24
  4063c8:	f100 0318 	add.w	r3, r0, #24
  4063cc:	e6cb      	b.n	406166 <_realloc_r+0x8e>
  4063ce:	692a      	ldr	r2, [r5, #16]
  4063d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4063d4:	696a      	ldr	r2, [r5, #20]
  4063d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4063da:	3518      	adds	r5, #24
  4063dc:	f10a 0220 	add.w	r2, sl, #32
  4063e0:	e7a6      	b.n	406330 <_realloc_r+0x258>
  4063e2:	4632      	mov	r2, r6
  4063e4:	e77f      	b.n	4062e6 <_realloc_r+0x20e>
  4063e6:	4629      	mov	r1, r5
  4063e8:	4630      	mov	r0, r6
  4063ea:	9301      	str	r3, [sp, #4]
  4063ec:	f7ff fe10 	bl	406010 <memmove>
  4063f0:	9b01      	ldr	r3, [sp, #4]
  4063f2:	e77e      	b.n	4062f2 <_realloc_r+0x21a>
  4063f4:	68a9      	ldr	r1, [r5, #8]
  4063f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4063fa:	68e9      	ldr	r1, [r5, #12]
  4063fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406400:	2a24      	cmp	r2, #36	; 0x24
  406402:	d003      	beq.n	40640c <_realloc_r+0x334>
  406404:	3510      	adds	r5, #16
  406406:	f10a 0218 	add.w	r2, sl, #24
  40640a:	e76c      	b.n	4062e6 <_realloc_r+0x20e>
  40640c:	692a      	ldr	r2, [r5, #16]
  40640e:	f8ca 2018 	str.w	r2, [sl, #24]
  406412:	696a      	ldr	r2, [r5, #20]
  406414:	f8ca 201c 	str.w	r2, [sl, #28]
  406418:	3518      	adds	r5, #24
  40641a:	f10a 0220 	add.w	r2, sl, #32
  40641e:	e762      	b.n	4062e6 <_realloc_r+0x20e>
  406420:	20400438 	.word	0x20400438

00406424 <__sread>:
  406424:	b510      	push	{r4, lr}
  406426:	460c      	mov	r4, r1
  406428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40642c:	f000 f9f6 	bl	40681c <_read_r>
  406430:	2800      	cmp	r0, #0
  406432:	db03      	blt.n	40643c <__sread+0x18>
  406434:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406436:	4403      	add	r3, r0
  406438:	6523      	str	r3, [r4, #80]	; 0x50
  40643a:	bd10      	pop	{r4, pc}
  40643c:	89a3      	ldrh	r3, [r4, #12]
  40643e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406442:	81a3      	strh	r3, [r4, #12]
  406444:	bd10      	pop	{r4, pc}
  406446:	bf00      	nop

00406448 <__swrite>:
  406448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40644c:	4616      	mov	r6, r2
  40644e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406452:	461f      	mov	r7, r3
  406454:	05d3      	lsls	r3, r2, #23
  406456:	460c      	mov	r4, r1
  406458:	4605      	mov	r5, r0
  40645a:	d507      	bpl.n	40646c <__swrite+0x24>
  40645c:	2200      	movs	r2, #0
  40645e:	2302      	movs	r3, #2
  406460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406464:	f000 f9c4 	bl	4067f0 <_lseek_r>
  406468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40646c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406474:	81a2      	strh	r2, [r4, #12]
  406476:	463b      	mov	r3, r7
  406478:	4632      	mov	r2, r6
  40647a:	4628      	mov	r0, r5
  40647c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406480:	f000 b8a4 	b.w	4065cc <_write_r>

00406484 <__sseek>:
  406484:	b510      	push	{r4, lr}
  406486:	460c      	mov	r4, r1
  406488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40648c:	f000 f9b0 	bl	4067f0 <_lseek_r>
  406490:	89a3      	ldrh	r3, [r4, #12]
  406492:	1c42      	adds	r2, r0, #1
  406494:	bf0e      	itee	eq
  406496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40649a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40649e:	6520      	strne	r0, [r4, #80]	; 0x50
  4064a0:	81a3      	strh	r3, [r4, #12]
  4064a2:	bd10      	pop	{r4, pc}

004064a4 <__sclose>:
  4064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4064a8:	f000 b908 	b.w	4066bc <_close_r>

004064ac <__swbuf_r>:
  4064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4064ae:	460d      	mov	r5, r1
  4064b0:	4614      	mov	r4, r2
  4064b2:	4606      	mov	r6, r0
  4064b4:	b110      	cbz	r0, 4064bc <__swbuf_r+0x10>
  4064b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4064b8:	2b00      	cmp	r3, #0
  4064ba:	d04b      	beq.n	406554 <__swbuf_r+0xa8>
  4064bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4064c0:	69a3      	ldr	r3, [r4, #24]
  4064c2:	60a3      	str	r3, [r4, #8]
  4064c4:	b291      	uxth	r1, r2
  4064c6:	0708      	lsls	r0, r1, #28
  4064c8:	d539      	bpl.n	40653e <__swbuf_r+0x92>
  4064ca:	6923      	ldr	r3, [r4, #16]
  4064cc:	2b00      	cmp	r3, #0
  4064ce:	d036      	beq.n	40653e <__swbuf_r+0x92>
  4064d0:	b2ed      	uxtb	r5, r5
  4064d2:	0489      	lsls	r1, r1, #18
  4064d4:	462f      	mov	r7, r5
  4064d6:	d515      	bpl.n	406504 <__swbuf_r+0x58>
  4064d8:	6822      	ldr	r2, [r4, #0]
  4064da:	6961      	ldr	r1, [r4, #20]
  4064dc:	1ad3      	subs	r3, r2, r3
  4064de:	428b      	cmp	r3, r1
  4064e0:	da1c      	bge.n	40651c <__swbuf_r+0x70>
  4064e2:	3301      	adds	r3, #1
  4064e4:	68a1      	ldr	r1, [r4, #8]
  4064e6:	1c50      	adds	r0, r2, #1
  4064e8:	3901      	subs	r1, #1
  4064ea:	60a1      	str	r1, [r4, #8]
  4064ec:	6020      	str	r0, [r4, #0]
  4064ee:	7015      	strb	r5, [r2, #0]
  4064f0:	6962      	ldr	r2, [r4, #20]
  4064f2:	429a      	cmp	r2, r3
  4064f4:	d01a      	beq.n	40652c <__swbuf_r+0x80>
  4064f6:	89a3      	ldrh	r3, [r4, #12]
  4064f8:	07db      	lsls	r3, r3, #31
  4064fa:	d501      	bpl.n	406500 <__swbuf_r+0x54>
  4064fc:	2d0a      	cmp	r5, #10
  4064fe:	d015      	beq.n	40652c <__swbuf_r+0x80>
  406500:	4638      	mov	r0, r7
  406502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406504:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40650a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40650e:	81a2      	strh	r2, [r4, #12]
  406510:	6822      	ldr	r2, [r4, #0]
  406512:	6661      	str	r1, [r4, #100]	; 0x64
  406514:	6961      	ldr	r1, [r4, #20]
  406516:	1ad3      	subs	r3, r2, r3
  406518:	428b      	cmp	r3, r1
  40651a:	dbe2      	blt.n	4064e2 <__swbuf_r+0x36>
  40651c:	4621      	mov	r1, r4
  40651e:	4630      	mov	r0, r6
  406520:	f7ff f87a 	bl	405618 <_fflush_r>
  406524:	b940      	cbnz	r0, 406538 <__swbuf_r+0x8c>
  406526:	6822      	ldr	r2, [r4, #0]
  406528:	2301      	movs	r3, #1
  40652a:	e7db      	b.n	4064e4 <__swbuf_r+0x38>
  40652c:	4621      	mov	r1, r4
  40652e:	4630      	mov	r0, r6
  406530:	f7ff f872 	bl	405618 <_fflush_r>
  406534:	2800      	cmp	r0, #0
  406536:	d0e3      	beq.n	406500 <__swbuf_r+0x54>
  406538:	f04f 37ff 	mov.w	r7, #4294967295
  40653c:	e7e0      	b.n	406500 <__swbuf_r+0x54>
  40653e:	4621      	mov	r1, r4
  406540:	4630      	mov	r0, r6
  406542:	f7fe ff55 	bl	4053f0 <__swsetup_r>
  406546:	2800      	cmp	r0, #0
  406548:	d1f6      	bne.n	406538 <__swbuf_r+0x8c>
  40654a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40654e:	6923      	ldr	r3, [r4, #16]
  406550:	b291      	uxth	r1, r2
  406552:	e7bd      	b.n	4064d0 <__swbuf_r+0x24>
  406554:	f7ff f8b8 	bl	4056c8 <__sinit>
  406558:	e7b0      	b.n	4064bc <__swbuf_r+0x10>
  40655a:	bf00      	nop

0040655c <_wcrtomb_r>:
  40655c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40655e:	4606      	mov	r6, r0
  406560:	b085      	sub	sp, #20
  406562:	461f      	mov	r7, r3
  406564:	b189      	cbz	r1, 40658a <_wcrtomb_r+0x2e>
  406566:	4c10      	ldr	r4, [pc, #64]	; (4065a8 <_wcrtomb_r+0x4c>)
  406568:	4d10      	ldr	r5, [pc, #64]	; (4065ac <_wcrtomb_r+0x50>)
  40656a:	6824      	ldr	r4, [r4, #0]
  40656c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40656e:	2c00      	cmp	r4, #0
  406570:	bf08      	it	eq
  406572:	462c      	moveq	r4, r5
  406574:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406578:	47a0      	blx	r4
  40657a:	1c43      	adds	r3, r0, #1
  40657c:	d103      	bne.n	406586 <_wcrtomb_r+0x2a>
  40657e:	2200      	movs	r2, #0
  406580:	238a      	movs	r3, #138	; 0x8a
  406582:	603a      	str	r2, [r7, #0]
  406584:	6033      	str	r3, [r6, #0]
  406586:	b005      	add	sp, #20
  406588:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40658a:	460c      	mov	r4, r1
  40658c:	4906      	ldr	r1, [pc, #24]	; (4065a8 <_wcrtomb_r+0x4c>)
  40658e:	4a07      	ldr	r2, [pc, #28]	; (4065ac <_wcrtomb_r+0x50>)
  406590:	6809      	ldr	r1, [r1, #0]
  406592:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406594:	2900      	cmp	r1, #0
  406596:	bf08      	it	eq
  406598:	4611      	moveq	r1, r2
  40659a:	4622      	mov	r2, r4
  40659c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4065a0:	a901      	add	r1, sp, #4
  4065a2:	47a0      	blx	r4
  4065a4:	e7e9      	b.n	40657a <_wcrtomb_r+0x1e>
  4065a6:	bf00      	nop
  4065a8:	2040000c 	.word	0x2040000c
  4065ac:	2040084c 	.word	0x2040084c

004065b0 <__ascii_wctomb>:
  4065b0:	b121      	cbz	r1, 4065bc <__ascii_wctomb+0xc>
  4065b2:	2aff      	cmp	r2, #255	; 0xff
  4065b4:	d804      	bhi.n	4065c0 <__ascii_wctomb+0x10>
  4065b6:	700a      	strb	r2, [r1, #0]
  4065b8:	2001      	movs	r0, #1
  4065ba:	4770      	bx	lr
  4065bc:	4608      	mov	r0, r1
  4065be:	4770      	bx	lr
  4065c0:	238a      	movs	r3, #138	; 0x8a
  4065c2:	6003      	str	r3, [r0, #0]
  4065c4:	f04f 30ff 	mov.w	r0, #4294967295
  4065c8:	4770      	bx	lr
  4065ca:	bf00      	nop

004065cc <_write_r>:
  4065cc:	b570      	push	{r4, r5, r6, lr}
  4065ce:	460d      	mov	r5, r1
  4065d0:	4c08      	ldr	r4, [pc, #32]	; (4065f4 <_write_r+0x28>)
  4065d2:	4611      	mov	r1, r2
  4065d4:	4606      	mov	r6, r0
  4065d6:	461a      	mov	r2, r3
  4065d8:	4628      	mov	r0, r5
  4065da:	2300      	movs	r3, #0
  4065dc:	6023      	str	r3, [r4, #0]
  4065de:	f7f9 fe4f 	bl	400280 <_write>
  4065e2:	1c43      	adds	r3, r0, #1
  4065e4:	d000      	beq.n	4065e8 <_write_r+0x1c>
  4065e6:	bd70      	pop	{r4, r5, r6, pc}
  4065e8:	6823      	ldr	r3, [r4, #0]
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d0fb      	beq.n	4065e6 <_write_r+0x1a>
  4065ee:	6033      	str	r3, [r6, #0]
  4065f0:	bd70      	pop	{r4, r5, r6, pc}
  4065f2:	bf00      	nop
  4065f4:	20400c58 	.word	0x20400c58

004065f8 <__register_exitproc>:
  4065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4065fc:	4d2c      	ldr	r5, [pc, #176]	; (4066b0 <__register_exitproc+0xb8>)
  4065fe:	4606      	mov	r6, r0
  406600:	6828      	ldr	r0, [r5, #0]
  406602:	4698      	mov	r8, r3
  406604:	460f      	mov	r7, r1
  406606:	4691      	mov	r9, r2
  406608:	f7ff fc1e 	bl	405e48 <__retarget_lock_acquire_recursive>
  40660c:	4b29      	ldr	r3, [pc, #164]	; (4066b4 <__register_exitproc+0xbc>)
  40660e:	681c      	ldr	r4, [r3, #0]
  406610:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406614:	2b00      	cmp	r3, #0
  406616:	d03e      	beq.n	406696 <__register_exitproc+0x9e>
  406618:	685a      	ldr	r2, [r3, #4]
  40661a:	2a1f      	cmp	r2, #31
  40661c:	dc1c      	bgt.n	406658 <__register_exitproc+0x60>
  40661e:	f102 0e01 	add.w	lr, r2, #1
  406622:	b176      	cbz	r6, 406642 <__register_exitproc+0x4a>
  406624:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406628:	2401      	movs	r4, #1
  40662a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40662e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406632:	4094      	lsls	r4, r2
  406634:	4320      	orrs	r0, r4
  406636:	2e02      	cmp	r6, #2
  406638:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40663c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406640:	d023      	beq.n	40668a <__register_exitproc+0x92>
  406642:	3202      	adds	r2, #2
  406644:	f8c3 e004 	str.w	lr, [r3, #4]
  406648:	6828      	ldr	r0, [r5, #0]
  40664a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40664e:	f7ff fbfd 	bl	405e4c <__retarget_lock_release_recursive>
  406652:	2000      	movs	r0, #0
  406654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406658:	4b17      	ldr	r3, [pc, #92]	; (4066b8 <__register_exitproc+0xc0>)
  40665a:	b30b      	cbz	r3, 4066a0 <__register_exitproc+0xa8>
  40665c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406660:	f7fd f97a 	bl	403958 <malloc>
  406664:	4603      	mov	r3, r0
  406666:	b1d8      	cbz	r0, 4066a0 <__register_exitproc+0xa8>
  406668:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40666c:	6002      	str	r2, [r0, #0]
  40666e:	2100      	movs	r1, #0
  406670:	6041      	str	r1, [r0, #4]
  406672:	460a      	mov	r2, r1
  406674:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406678:	f04f 0e01 	mov.w	lr, #1
  40667c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406680:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406684:	2e00      	cmp	r6, #0
  406686:	d0dc      	beq.n	406642 <__register_exitproc+0x4a>
  406688:	e7cc      	b.n	406624 <__register_exitproc+0x2c>
  40668a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40668e:	430c      	orrs	r4, r1
  406690:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406694:	e7d5      	b.n	406642 <__register_exitproc+0x4a>
  406696:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40669a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40669e:	e7bb      	b.n	406618 <__register_exitproc+0x20>
  4066a0:	6828      	ldr	r0, [r5, #0]
  4066a2:	f7ff fbd3 	bl	405e4c <__retarget_lock_release_recursive>
  4066a6:	f04f 30ff 	mov.w	r0, #4294967295
  4066aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4066ae:	bf00      	nop
  4066b0:	20400848 	.word	0x20400848
  4066b4:	00406df4 	.word	0x00406df4
  4066b8:	00403959 	.word	0x00403959

004066bc <_close_r>:
  4066bc:	b538      	push	{r3, r4, r5, lr}
  4066be:	4c07      	ldr	r4, [pc, #28]	; (4066dc <_close_r+0x20>)
  4066c0:	2300      	movs	r3, #0
  4066c2:	4605      	mov	r5, r0
  4066c4:	4608      	mov	r0, r1
  4066c6:	6023      	str	r3, [r4, #0]
  4066c8:	f7fa fc3e 	bl	400f48 <_close>
  4066cc:	1c43      	adds	r3, r0, #1
  4066ce:	d000      	beq.n	4066d2 <_close_r+0x16>
  4066d0:	bd38      	pop	{r3, r4, r5, pc}
  4066d2:	6823      	ldr	r3, [r4, #0]
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	d0fb      	beq.n	4066d0 <_close_r+0x14>
  4066d8:	602b      	str	r3, [r5, #0]
  4066da:	bd38      	pop	{r3, r4, r5, pc}
  4066dc:	20400c58 	.word	0x20400c58

004066e0 <_fclose_r>:
  4066e0:	b570      	push	{r4, r5, r6, lr}
  4066e2:	b159      	cbz	r1, 4066fc <_fclose_r+0x1c>
  4066e4:	4605      	mov	r5, r0
  4066e6:	460c      	mov	r4, r1
  4066e8:	b110      	cbz	r0, 4066f0 <_fclose_r+0x10>
  4066ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4066ec:	2b00      	cmp	r3, #0
  4066ee:	d03c      	beq.n	40676a <_fclose_r+0x8a>
  4066f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4066f2:	07d8      	lsls	r0, r3, #31
  4066f4:	d505      	bpl.n	406702 <_fclose_r+0x22>
  4066f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066fa:	b92b      	cbnz	r3, 406708 <_fclose_r+0x28>
  4066fc:	2600      	movs	r6, #0
  4066fe:	4630      	mov	r0, r6
  406700:	bd70      	pop	{r4, r5, r6, pc}
  406702:	89a3      	ldrh	r3, [r4, #12]
  406704:	0599      	lsls	r1, r3, #22
  406706:	d53c      	bpl.n	406782 <_fclose_r+0xa2>
  406708:	4621      	mov	r1, r4
  40670a:	4628      	mov	r0, r5
  40670c:	f7fe fee4 	bl	4054d8 <__sflush_r>
  406710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406712:	4606      	mov	r6, r0
  406714:	b133      	cbz	r3, 406724 <_fclose_r+0x44>
  406716:	69e1      	ldr	r1, [r4, #28]
  406718:	4628      	mov	r0, r5
  40671a:	4798      	blx	r3
  40671c:	2800      	cmp	r0, #0
  40671e:	bfb8      	it	lt
  406720:	f04f 36ff 	movlt.w	r6, #4294967295
  406724:	89a3      	ldrh	r3, [r4, #12]
  406726:	061a      	lsls	r2, r3, #24
  406728:	d422      	bmi.n	406770 <_fclose_r+0x90>
  40672a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40672c:	b141      	cbz	r1, 406740 <_fclose_r+0x60>
  40672e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406732:	4299      	cmp	r1, r3
  406734:	d002      	beq.n	40673c <_fclose_r+0x5c>
  406736:	4628      	mov	r0, r5
  406738:	f7ff f8ec 	bl	405914 <_free_r>
  40673c:	2300      	movs	r3, #0
  40673e:	6323      	str	r3, [r4, #48]	; 0x30
  406740:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406742:	b121      	cbz	r1, 40674e <_fclose_r+0x6e>
  406744:	4628      	mov	r0, r5
  406746:	f7ff f8e5 	bl	405914 <_free_r>
  40674a:	2300      	movs	r3, #0
  40674c:	6463      	str	r3, [r4, #68]	; 0x44
  40674e:	f7fe ffe7 	bl	405720 <__sfp_lock_acquire>
  406752:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406754:	2200      	movs	r2, #0
  406756:	07db      	lsls	r3, r3, #31
  406758:	81a2      	strh	r2, [r4, #12]
  40675a:	d50e      	bpl.n	40677a <_fclose_r+0x9a>
  40675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40675e:	f7ff fb71 	bl	405e44 <__retarget_lock_close_recursive>
  406762:	f7fe ffe3 	bl	40572c <__sfp_lock_release>
  406766:	4630      	mov	r0, r6
  406768:	bd70      	pop	{r4, r5, r6, pc}
  40676a:	f7fe ffad 	bl	4056c8 <__sinit>
  40676e:	e7bf      	b.n	4066f0 <_fclose_r+0x10>
  406770:	6921      	ldr	r1, [r4, #16]
  406772:	4628      	mov	r0, r5
  406774:	f7ff f8ce 	bl	405914 <_free_r>
  406778:	e7d7      	b.n	40672a <_fclose_r+0x4a>
  40677a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40677c:	f7ff fb66 	bl	405e4c <__retarget_lock_release_recursive>
  406780:	e7ec      	b.n	40675c <_fclose_r+0x7c>
  406782:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406784:	f7ff fb60 	bl	405e48 <__retarget_lock_acquire_recursive>
  406788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40678c:	2b00      	cmp	r3, #0
  40678e:	d1bb      	bne.n	406708 <_fclose_r+0x28>
  406790:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406792:	f016 0601 	ands.w	r6, r6, #1
  406796:	d1b1      	bne.n	4066fc <_fclose_r+0x1c>
  406798:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40679a:	f7ff fb57 	bl	405e4c <__retarget_lock_release_recursive>
  40679e:	4630      	mov	r0, r6
  4067a0:	bd70      	pop	{r4, r5, r6, pc}
  4067a2:	bf00      	nop

004067a4 <_fstat_r>:
  4067a4:	b538      	push	{r3, r4, r5, lr}
  4067a6:	460b      	mov	r3, r1
  4067a8:	4c07      	ldr	r4, [pc, #28]	; (4067c8 <_fstat_r+0x24>)
  4067aa:	4605      	mov	r5, r0
  4067ac:	4611      	mov	r1, r2
  4067ae:	4618      	mov	r0, r3
  4067b0:	2300      	movs	r3, #0
  4067b2:	6023      	str	r3, [r4, #0]
  4067b4:	f7fa fbcb 	bl	400f4e <_fstat>
  4067b8:	1c43      	adds	r3, r0, #1
  4067ba:	d000      	beq.n	4067be <_fstat_r+0x1a>
  4067bc:	bd38      	pop	{r3, r4, r5, pc}
  4067be:	6823      	ldr	r3, [r4, #0]
  4067c0:	2b00      	cmp	r3, #0
  4067c2:	d0fb      	beq.n	4067bc <_fstat_r+0x18>
  4067c4:	602b      	str	r3, [r5, #0]
  4067c6:	bd38      	pop	{r3, r4, r5, pc}
  4067c8:	20400c58 	.word	0x20400c58

004067cc <_isatty_r>:
  4067cc:	b538      	push	{r3, r4, r5, lr}
  4067ce:	4c07      	ldr	r4, [pc, #28]	; (4067ec <_isatty_r+0x20>)
  4067d0:	2300      	movs	r3, #0
  4067d2:	4605      	mov	r5, r0
  4067d4:	4608      	mov	r0, r1
  4067d6:	6023      	str	r3, [r4, #0]
  4067d8:	f7fa fbbe 	bl	400f58 <_isatty>
  4067dc:	1c43      	adds	r3, r0, #1
  4067de:	d000      	beq.n	4067e2 <_isatty_r+0x16>
  4067e0:	bd38      	pop	{r3, r4, r5, pc}
  4067e2:	6823      	ldr	r3, [r4, #0]
  4067e4:	2b00      	cmp	r3, #0
  4067e6:	d0fb      	beq.n	4067e0 <_isatty_r+0x14>
  4067e8:	602b      	str	r3, [r5, #0]
  4067ea:	bd38      	pop	{r3, r4, r5, pc}
  4067ec:	20400c58 	.word	0x20400c58

004067f0 <_lseek_r>:
  4067f0:	b570      	push	{r4, r5, r6, lr}
  4067f2:	460d      	mov	r5, r1
  4067f4:	4c08      	ldr	r4, [pc, #32]	; (406818 <_lseek_r+0x28>)
  4067f6:	4611      	mov	r1, r2
  4067f8:	4606      	mov	r6, r0
  4067fa:	461a      	mov	r2, r3
  4067fc:	4628      	mov	r0, r5
  4067fe:	2300      	movs	r3, #0
  406800:	6023      	str	r3, [r4, #0]
  406802:	f7fa fbab 	bl	400f5c <_lseek>
  406806:	1c43      	adds	r3, r0, #1
  406808:	d000      	beq.n	40680c <_lseek_r+0x1c>
  40680a:	bd70      	pop	{r4, r5, r6, pc}
  40680c:	6823      	ldr	r3, [r4, #0]
  40680e:	2b00      	cmp	r3, #0
  406810:	d0fb      	beq.n	40680a <_lseek_r+0x1a>
  406812:	6033      	str	r3, [r6, #0]
  406814:	bd70      	pop	{r4, r5, r6, pc}
  406816:	bf00      	nop
  406818:	20400c58 	.word	0x20400c58

0040681c <_read_r>:
  40681c:	b570      	push	{r4, r5, r6, lr}
  40681e:	460d      	mov	r5, r1
  406820:	4c08      	ldr	r4, [pc, #32]	; (406844 <_read_r+0x28>)
  406822:	4611      	mov	r1, r2
  406824:	4606      	mov	r6, r0
  406826:	461a      	mov	r2, r3
  406828:	4628      	mov	r0, r5
  40682a:	2300      	movs	r3, #0
  40682c:	6023      	str	r3, [r4, #0]
  40682e:	f7f9 fd09 	bl	400244 <_read>
  406832:	1c43      	adds	r3, r0, #1
  406834:	d000      	beq.n	406838 <_read_r+0x1c>
  406836:	bd70      	pop	{r4, r5, r6, pc}
  406838:	6823      	ldr	r3, [r4, #0]
  40683a:	2b00      	cmp	r3, #0
  40683c:	d0fb      	beq.n	406836 <_read_r+0x1a>
  40683e:	6033      	str	r3, [r6, #0]
  406840:	bd70      	pop	{r4, r5, r6, pc}
  406842:	bf00      	nop
  406844:	20400c58 	.word	0x20400c58

00406848 <__aeabi_uldivmod>:
  406848:	b953      	cbnz	r3, 406860 <__aeabi_uldivmod+0x18>
  40684a:	b94a      	cbnz	r2, 406860 <__aeabi_uldivmod+0x18>
  40684c:	2900      	cmp	r1, #0
  40684e:	bf08      	it	eq
  406850:	2800      	cmpeq	r0, #0
  406852:	bf1c      	itt	ne
  406854:	f04f 31ff 	movne.w	r1, #4294967295
  406858:	f04f 30ff 	movne.w	r0, #4294967295
  40685c:	f000 b97a 	b.w	406b54 <__aeabi_idiv0>
  406860:	f1ad 0c08 	sub.w	ip, sp, #8
  406864:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406868:	f000 f806 	bl	406878 <__udivmoddi4>
  40686c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406874:	b004      	add	sp, #16
  406876:	4770      	bx	lr

00406878 <__udivmoddi4>:
  406878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40687c:	468c      	mov	ip, r1
  40687e:	460d      	mov	r5, r1
  406880:	4604      	mov	r4, r0
  406882:	9e08      	ldr	r6, [sp, #32]
  406884:	2b00      	cmp	r3, #0
  406886:	d151      	bne.n	40692c <__udivmoddi4+0xb4>
  406888:	428a      	cmp	r2, r1
  40688a:	4617      	mov	r7, r2
  40688c:	d96d      	bls.n	40696a <__udivmoddi4+0xf2>
  40688e:	fab2 fe82 	clz	lr, r2
  406892:	f1be 0f00 	cmp.w	lr, #0
  406896:	d00b      	beq.n	4068b0 <__udivmoddi4+0x38>
  406898:	f1ce 0c20 	rsb	ip, lr, #32
  40689c:	fa01 f50e 	lsl.w	r5, r1, lr
  4068a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4068a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4068a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4068ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4068b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4068b4:	0c25      	lsrs	r5, r4, #16
  4068b6:	fbbc f8fa 	udiv	r8, ip, sl
  4068ba:	fa1f f987 	uxth.w	r9, r7
  4068be:	fb0a cc18 	mls	ip, sl, r8, ip
  4068c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4068c6:	fb08 f309 	mul.w	r3, r8, r9
  4068ca:	42ab      	cmp	r3, r5
  4068cc:	d90a      	bls.n	4068e4 <__udivmoddi4+0x6c>
  4068ce:	19ed      	adds	r5, r5, r7
  4068d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4068d4:	f080 8123 	bcs.w	406b1e <__udivmoddi4+0x2a6>
  4068d8:	42ab      	cmp	r3, r5
  4068da:	f240 8120 	bls.w	406b1e <__udivmoddi4+0x2a6>
  4068de:	f1a8 0802 	sub.w	r8, r8, #2
  4068e2:	443d      	add	r5, r7
  4068e4:	1aed      	subs	r5, r5, r3
  4068e6:	b2a4      	uxth	r4, r4
  4068e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4068ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4068f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4068f4:	fb00 f909 	mul.w	r9, r0, r9
  4068f8:	45a1      	cmp	r9, r4
  4068fa:	d909      	bls.n	406910 <__udivmoddi4+0x98>
  4068fc:	19e4      	adds	r4, r4, r7
  4068fe:	f100 33ff 	add.w	r3, r0, #4294967295
  406902:	f080 810a 	bcs.w	406b1a <__udivmoddi4+0x2a2>
  406906:	45a1      	cmp	r9, r4
  406908:	f240 8107 	bls.w	406b1a <__udivmoddi4+0x2a2>
  40690c:	3802      	subs	r0, #2
  40690e:	443c      	add	r4, r7
  406910:	eba4 0409 	sub.w	r4, r4, r9
  406914:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406918:	2100      	movs	r1, #0
  40691a:	2e00      	cmp	r6, #0
  40691c:	d061      	beq.n	4069e2 <__udivmoddi4+0x16a>
  40691e:	fa24 f40e 	lsr.w	r4, r4, lr
  406922:	2300      	movs	r3, #0
  406924:	6034      	str	r4, [r6, #0]
  406926:	6073      	str	r3, [r6, #4]
  406928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40692c:	428b      	cmp	r3, r1
  40692e:	d907      	bls.n	406940 <__udivmoddi4+0xc8>
  406930:	2e00      	cmp	r6, #0
  406932:	d054      	beq.n	4069de <__udivmoddi4+0x166>
  406934:	2100      	movs	r1, #0
  406936:	e886 0021 	stmia.w	r6, {r0, r5}
  40693a:	4608      	mov	r0, r1
  40693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406940:	fab3 f183 	clz	r1, r3
  406944:	2900      	cmp	r1, #0
  406946:	f040 808e 	bne.w	406a66 <__udivmoddi4+0x1ee>
  40694a:	42ab      	cmp	r3, r5
  40694c:	d302      	bcc.n	406954 <__udivmoddi4+0xdc>
  40694e:	4282      	cmp	r2, r0
  406950:	f200 80fa 	bhi.w	406b48 <__udivmoddi4+0x2d0>
  406954:	1a84      	subs	r4, r0, r2
  406956:	eb65 0503 	sbc.w	r5, r5, r3
  40695a:	2001      	movs	r0, #1
  40695c:	46ac      	mov	ip, r5
  40695e:	2e00      	cmp	r6, #0
  406960:	d03f      	beq.n	4069e2 <__udivmoddi4+0x16a>
  406962:	e886 1010 	stmia.w	r6, {r4, ip}
  406966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40696a:	b912      	cbnz	r2, 406972 <__udivmoddi4+0xfa>
  40696c:	2701      	movs	r7, #1
  40696e:	fbb7 f7f2 	udiv	r7, r7, r2
  406972:	fab7 fe87 	clz	lr, r7
  406976:	f1be 0f00 	cmp.w	lr, #0
  40697a:	d134      	bne.n	4069e6 <__udivmoddi4+0x16e>
  40697c:	1beb      	subs	r3, r5, r7
  40697e:	0c3a      	lsrs	r2, r7, #16
  406980:	fa1f fc87 	uxth.w	ip, r7
  406984:	2101      	movs	r1, #1
  406986:	fbb3 f8f2 	udiv	r8, r3, r2
  40698a:	0c25      	lsrs	r5, r4, #16
  40698c:	fb02 3318 	mls	r3, r2, r8, r3
  406990:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406994:	fb0c f308 	mul.w	r3, ip, r8
  406998:	42ab      	cmp	r3, r5
  40699a:	d907      	bls.n	4069ac <__udivmoddi4+0x134>
  40699c:	19ed      	adds	r5, r5, r7
  40699e:	f108 30ff 	add.w	r0, r8, #4294967295
  4069a2:	d202      	bcs.n	4069aa <__udivmoddi4+0x132>
  4069a4:	42ab      	cmp	r3, r5
  4069a6:	f200 80d1 	bhi.w	406b4c <__udivmoddi4+0x2d4>
  4069aa:	4680      	mov	r8, r0
  4069ac:	1aed      	subs	r5, r5, r3
  4069ae:	b2a3      	uxth	r3, r4
  4069b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4069b4:	fb02 5510 	mls	r5, r2, r0, r5
  4069b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4069bc:	fb0c fc00 	mul.w	ip, ip, r0
  4069c0:	45a4      	cmp	ip, r4
  4069c2:	d907      	bls.n	4069d4 <__udivmoddi4+0x15c>
  4069c4:	19e4      	adds	r4, r4, r7
  4069c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4069ca:	d202      	bcs.n	4069d2 <__udivmoddi4+0x15a>
  4069cc:	45a4      	cmp	ip, r4
  4069ce:	f200 80b8 	bhi.w	406b42 <__udivmoddi4+0x2ca>
  4069d2:	4618      	mov	r0, r3
  4069d4:	eba4 040c 	sub.w	r4, r4, ip
  4069d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4069dc:	e79d      	b.n	40691a <__udivmoddi4+0xa2>
  4069de:	4631      	mov	r1, r6
  4069e0:	4630      	mov	r0, r6
  4069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069e6:	f1ce 0420 	rsb	r4, lr, #32
  4069ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4069ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4069f2:	fa20 f804 	lsr.w	r8, r0, r4
  4069f6:	0c3a      	lsrs	r2, r7, #16
  4069f8:	fa25 f404 	lsr.w	r4, r5, r4
  4069fc:	ea48 0803 	orr.w	r8, r8, r3
  406a00:	fbb4 f1f2 	udiv	r1, r4, r2
  406a04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406a08:	fb02 4411 	mls	r4, r2, r1, r4
  406a0c:	fa1f fc87 	uxth.w	ip, r7
  406a10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406a14:	fb01 f30c 	mul.w	r3, r1, ip
  406a18:	42ab      	cmp	r3, r5
  406a1a:	fa00 f40e 	lsl.w	r4, r0, lr
  406a1e:	d909      	bls.n	406a34 <__udivmoddi4+0x1bc>
  406a20:	19ed      	adds	r5, r5, r7
  406a22:	f101 30ff 	add.w	r0, r1, #4294967295
  406a26:	f080 808a 	bcs.w	406b3e <__udivmoddi4+0x2c6>
  406a2a:	42ab      	cmp	r3, r5
  406a2c:	f240 8087 	bls.w	406b3e <__udivmoddi4+0x2c6>
  406a30:	3902      	subs	r1, #2
  406a32:	443d      	add	r5, r7
  406a34:	1aeb      	subs	r3, r5, r3
  406a36:	fa1f f588 	uxth.w	r5, r8
  406a3a:	fbb3 f0f2 	udiv	r0, r3, r2
  406a3e:	fb02 3310 	mls	r3, r2, r0, r3
  406a42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a46:	fb00 f30c 	mul.w	r3, r0, ip
  406a4a:	42ab      	cmp	r3, r5
  406a4c:	d907      	bls.n	406a5e <__udivmoddi4+0x1e6>
  406a4e:	19ed      	adds	r5, r5, r7
  406a50:	f100 38ff 	add.w	r8, r0, #4294967295
  406a54:	d26f      	bcs.n	406b36 <__udivmoddi4+0x2be>
  406a56:	42ab      	cmp	r3, r5
  406a58:	d96d      	bls.n	406b36 <__udivmoddi4+0x2be>
  406a5a:	3802      	subs	r0, #2
  406a5c:	443d      	add	r5, r7
  406a5e:	1aeb      	subs	r3, r5, r3
  406a60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406a64:	e78f      	b.n	406986 <__udivmoddi4+0x10e>
  406a66:	f1c1 0720 	rsb	r7, r1, #32
  406a6a:	fa22 f807 	lsr.w	r8, r2, r7
  406a6e:	408b      	lsls	r3, r1
  406a70:	fa05 f401 	lsl.w	r4, r5, r1
  406a74:	ea48 0303 	orr.w	r3, r8, r3
  406a78:	fa20 fe07 	lsr.w	lr, r0, r7
  406a7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406a80:	40fd      	lsrs	r5, r7
  406a82:	ea4e 0e04 	orr.w	lr, lr, r4
  406a86:	fbb5 f9fc 	udiv	r9, r5, ip
  406a8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406a8e:	fb0c 5519 	mls	r5, ip, r9, r5
  406a92:	fa1f f883 	uxth.w	r8, r3
  406a96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406a9a:	fb09 f408 	mul.w	r4, r9, r8
  406a9e:	42ac      	cmp	r4, r5
  406aa0:	fa02 f201 	lsl.w	r2, r2, r1
  406aa4:	fa00 fa01 	lsl.w	sl, r0, r1
  406aa8:	d908      	bls.n	406abc <__udivmoddi4+0x244>
  406aaa:	18ed      	adds	r5, r5, r3
  406aac:	f109 30ff 	add.w	r0, r9, #4294967295
  406ab0:	d243      	bcs.n	406b3a <__udivmoddi4+0x2c2>
  406ab2:	42ac      	cmp	r4, r5
  406ab4:	d941      	bls.n	406b3a <__udivmoddi4+0x2c2>
  406ab6:	f1a9 0902 	sub.w	r9, r9, #2
  406aba:	441d      	add	r5, r3
  406abc:	1b2d      	subs	r5, r5, r4
  406abe:	fa1f fe8e 	uxth.w	lr, lr
  406ac2:	fbb5 f0fc 	udiv	r0, r5, ip
  406ac6:	fb0c 5510 	mls	r5, ip, r0, r5
  406aca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406ace:	fb00 f808 	mul.w	r8, r0, r8
  406ad2:	45a0      	cmp	r8, r4
  406ad4:	d907      	bls.n	406ae6 <__udivmoddi4+0x26e>
  406ad6:	18e4      	adds	r4, r4, r3
  406ad8:	f100 35ff 	add.w	r5, r0, #4294967295
  406adc:	d229      	bcs.n	406b32 <__udivmoddi4+0x2ba>
  406ade:	45a0      	cmp	r8, r4
  406ae0:	d927      	bls.n	406b32 <__udivmoddi4+0x2ba>
  406ae2:	3802      	subs	r0, #2
  406ae4:	441c      	add	r4, r3
  406ae6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406aea:	eba4 0408 	sub.w	r4, r4, r8
  406aee:	fba0 8902 	umull	r8, r9, r0, r2
  406af2:	454c      	cmp	r4, r9
  406af4:	46c6      	mov	lr, r8
  406af6:	464d      	mov	r5, r9
  406af8:	d315      	bcc.n	406b26 <__udivmoddi4+0x2ae>
  406afa:	d012      	beq.n	406b22 <__udivmoddi4+0x2aa>
  406afc:	b156      	cbz	r6, 406b14 <__udivmoddi4+0x29c>
  406afe:	ebba 030e 	subs.w	r3, sl, lr
  406b02:	eb64 0405 	sbc.w	r4, r4, r5
  406b06:	fa04 f707 	lsl.w	r7, r4, r7
  406b0a:	40cb      	lsrs	r3, r1
  406b0c:	431f      	orrs	r7, r3
  406b0e:	40cc      	lsrs	r4, r1
  406b10:	6037      	str	r7, [r6, #0]
  406b12:	6074      	str	r4, [r6, #4]
  406b14:	2100      	movs	r1, #0
  406b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b1a:	4618      	mov	r0, r3
  406b1c:	e6f8      	b.n	406910 <__udivmoddi4+0x98>
  406b1e:	4690      	mov	r8, r2
  406b20:	e6e0      	b.n	4068e4 <__udivmoddi4+0x6c>
  406b22:	45c2      	cmp	sl, r8
  406b24:	d2ea      	bcs.n	406afc <__udivmoddi4+0x284>
  406b26:	ebb8 0e02 	subs.w	lr, r8, r2
  406b2a:	eb69 0503 	sbc.w	r5, r9, r3
  406b2e:	3801      	subs	r0, #1
  406b30:	e7e4      	b.n	406afc <__udivmoddi4+0x284>
  406b32:	4628      	mov	r0, r5
  406b34:	e7d7      	b.n	406ae6 <__udivmoddi4+0x26e>
  406b36:	4640      	mov	r0, r8
  406b38:	e791      	b.n	406a5e <__udivmoddi4+0x1e6>
  406b3a:	4681      	mov	r9, r0
  406b3c:	e7be      	b.n	406abc <__udivmoddi4+0x244>
  406b3e:	4601      	mov	r1, r0
  406b40:	e778      	b.n	406a34 <__udivmoddi4+0x1bc>
  406b42:	3802      	subs	r0, #2
  406b44:	443c      	add	r4, r7
  406b46:	e745      	b.n	4069d4 <__udivmoddi4+0x15c>
  406b48:	4608      	mov	r0, r1
  406b4a:	e708      	b.n	40695e <__udivmoddi4+0xe6>
  406b4c:	f1a8 0802 	sub.w	r8, r8, #2
  406b50:	443d      	add	r5, r7
  406b52:	e72b      	b.n	4069ac <__udivmoddi4+0x134>

00406b54 <__aeabi_idiv0>:
  406b54:	4770      	bx	lr
  406b56:	bf00      	nop
  406b58:	454c4449 	.word	0x454c4449
  406b5c:	00000000 	.word	0x00000000
  406b60:	51726d54 	.word	0x51726d54
  406b64:	00000000 	.word	0x00000000
  406b68:	20726d54 	.word	0x20726d54
  406b6c:	00637653 	.word	0x00637653
  406b70:	31747562 	.word	0x31747562
  406b74:	6c61635f 	.word	0x6c61635f
  406b78:	6361626c 	.word	0x6361626c
  406b7c:	000a206b 	.word	0x000a206b
  406b80:	616d6573 	.word	0x616d6573
  406b84:	6f726166 	.word	0x6f726166
  406b88:	20787420 	.word	0x20787420
  406b8c:	0000000a 	.word	0x0000000a
  406b90:	32747562 	.word	0x32747562
  406b94:	6c61635f 	.word	0x6c61635f
  406b98:	6361626c 	.word	0x6361626c
  406b9c:	000a206b 	.word	0x000a206b
  406ba0:	33747562 	.word	0x33747562
  406ba4:	6c61635f 	.word	0x6c61635f
  406ba8:	6361626c 	.word	0x6361626c
  406bac:	000a206b 	.word	0x000a206b
  406bb0:	46202d2d 	.word	0x46202d2d
  406bb4:	72656572 	.word	0x72656572
  406bb8:	20736f74 	.word	0x20736f74
  406bbc:	6d617845 	.word	0x6d617845
  406bc0:	20656c70 	.word	0x20656c70
  406bc4:	0d0a2d2d 	.word	0x0d0a2d2d
  406bc8:	00000000 	.word	0x00000000
  406bcc:	454d4153 	.word	0x454d4153
  406bd0:	582d3037 	.word	0x582d3037
  406bd4:	00444c50 	.word	0x00444c50
  406bd8:	25202d2d 	.word	0x25202d2d
  406bdc:	000d0a73 	.word	0x000d0a73
  406be0:	313a3032 	.word	0x313a3032
  406be4:	33343a38 	.word	0x33343a38
  406be8:	00000000 	.word	0x00000000
  406bec:	2079614d 	.word	0x2079614d
  406bf0:	32203620 	.word	0x32203620
  406bf4:	00303230 	.word	0x00303230
  406bf8:	43202d2d 	.word	0x43202d2d
  406bfc:	69706d6f 	.word	0x69706d6f
  406c00:	3a64656c 	.word	0x3a64656c
  406c04:	20732520 	.word	0x20732520
  406c08:	2d207325 	.word	0x2d207325
  406c0c:	000d0a2d 	.word	0x000d0a2d
  406c10:	0064654c 	.word	0x0064654c
  406c14:	6c696146 	.word	0x6c696146
  406c18:	74206465 	.word	0x74206465
  406c1c:	7263206f 	.word	0x7263206f
  406c20:	65746165 	.word	0x65746165
  406c24:	73657420 	.word	0x73657420
  406c28:	656c2074 	.word	0x656c2074
  406c2c:	61742064 	.word	0x61742064
  406c30:	0a0d6b73 	.word	0x0a0d6b73
  406c34:	00000000 	.word	0x00000000
  406c38:	3164654c 	.word	0x3164654c
  406c3c:	00000000 	.word	0x00000000
  406c40:	6c696146 	.word	0x6c696146
  406c44:	74206465 	.word	0x74206465
  406c48:	7263206f 	.word	0x7263206f
  406c4c:	65746165 	.word	0x65746165
  406c50:	73657420 	.word	0x73657420
  406c54:	656c2074 	.word	0x656c2074
  406c58:	74203164 	.word	0x74203164
  406c5c:	0d6b7361 	.word	0x0d6b7361
  406c60:	0000000a 	.word	0x0000000a
  406c64:	3264654c 	.word	0x3264654c
  406c68:	00000000 	.word	0x00000000
  406c6c:	6c696146 	.word	0x6c696146
  406c70:	74206465 	.word	0x74206465
  406c74:	7263206f 	.word	0x7263206f
  406c78:	65746165 	.word	0x65746165
  406c7c:	73657420 	.word	0x73657420
  406c80:	656c2074 	.word	0x656c2074
  406c84:	74203264 	.word	0x74203264
  406c88:	0d6b7361 	.word	0x0d6b7361
  406c8c:	0000000a 	.word	0x0000000a
  406c90:	3364654c 	.word	0x3364654c
  406c94:	00000000 	.word	0x00000000
  406c98:	6c696146 	.word	0x6c696146
  406c9c:	74206465 	.word	0x74206465
  406ca0:	7263206f 	.word	0x7263206f
  406ca4:	65746165 	.word	0x65746165
  406ca8:	73657420 	.word	0x73657420
  406cac:	656c2074 	.word	0x656c2074
  406cb0:	74203364 	.word	0x74203364
  406cb4:	0d6b7361 	.word	0x0d6b7361
  406cb8:	0000000a 	.word	0x0000000a
  406cbc:	74726175 	.word	0x74726175
  406cc0:	0078725f 	.word	0x0078725f
  406cc4:	686c6146 	.word	0x686c6146
  406cc8:	6f612061 	.word	0x6f612061
  406ccc:	69726320 	.word	0x69726320
  406cd0:	74207261 	.word	0x74207261
  406cd4:	5f6b7361 	.word	0x5f6b7361
  406cd8:	74726175 	.word	0x74726175
  406cdc:	0a0d5852 	.word	0x0a0d5852
  406ce0:	00000000 	.word	0x00000000
  406ce4:	63657865 	.word	0x63657865
  406ce8:	00657475 	.word	0x00657475
  406cec:	686c6146 	.word	0x686c6146
  406cf0:	6f612061 	.word	0x6f612061
  406cf4:	69726320 	.word	0x69726320
  406cf8:	74207261 	.word	0x74207261
  406cfc:	5f6b7361 	.word	0x5f6b7361
  406d00:	63657865 	.word	0x63657865
  406d04:	0d657475 	.word	0x0d657475
  406d08:	0000000a 	.word	0x0000000a
  406d0c:	746e6544 	.word	0x746e6544
  406d10:	64206f72 	.word	0x64206f72
  406d14:	6572206f 	.word	0x6572206f
  406d18:	76696563 	.word	0x76696563
  406d1c:	6f632065 	.word	0x6f632065
  406d20:	6e616d6d 	.word	0x6e616d6d
  406d24:	00000064 	.word	0x00000064
  406d28:	2064656c 	.word	0x2064656c
  406d2c:	6f742030 	.word	0x6f742030
  406d30:	656c6767 	.word	0x656c6767
  406d34:	00000000 	.word	0x00000000
  406d38:	2064656c 	.word	0x2064656c
  406d3c:	6f742031 	.word	0x6f742031
  406d40:	656c6767 	.word	0x656c6767
  406d44:	00000000 	.word	0x00000000
  406d48:	2064656c 	.word	0x2064656c
  406d4c:	6f742032 	.word	0x6f742032
  406d50:	656c6767 	.word	0x656c6767
  406d54:	00000000 	.word	0x00000000
  406d58:	2064656c 	.word	0x2064656c
  406d5c:	6f742033 	.word	0x6f742033
  406d60:	656c6767 	.word	0x656c6767
  406d64:	00000000 	.word	0x00000000
  406d68:	2064656c 	.word	0x2064656c
  406d6c:	6e6f2031 	.word	0x6e6f2031
  406d70:	00000000 	.word	0x00000000
  406d74:	2064656c 	.word	0x2064656c
  406d78:	666f2031 	.word	0x666f2031
  406d7c:	00000066 	.word	0x00000066
  406d80:	2064656c 	.word	0x2064656c
  406d84:	666f2032 	.word	0x666f2032
  406d88:	00000066 	.word	0x00000066
  406d8c:	2064656c 	.word	0x2064656c
  406d90:	6e6f2032 	.word	0x6e6f2032
  406d94:	00000000 	.word	0x00000000
  406d98:	2064656c 	.word	0x2064656c
  406d9c:	666f2033 	.word	0x666f2033
  406da0:	00000066 	.word	0x00000066
  406da4:	2064656c 	.word	0x2064656c
  406da8:	6e6f2033 	.word	0x6e6f2033
  406dac:	00000000 	.word	0x00000000
  406db0:	686c6166 	.word	0x686c6166
  406db4:	6d652061 	.word	0x6d652061
  406db8:	69726320 	.word	0x69726320
  406dbc:	6f207261 	.word	0x6f207261
  406dc0:	6d657320 	.word	0x6d657320
  406dc4:	726f6661 	.word	0x726f6661
  406dc8:	000a206f 	.word	0x000a206f
  406dcc:	69766e45 	.word	0x69766e45
  406dd0:	6320756f 	.word	0x6320756f
  406dd4:	616d6d6f 	.word	0x616d6d6f
  406dd8:	006f646e 	.word	0x006f646e
  406ddc:	63617473 	.word	0x63617473
  406de0:	766f206b 	.word	0x766f206b
  406de4:	6c667265 	.word	0x6c667265
  406de8:	2520776f 	.word	0x2520776f
  406dec:	73252078 	.word	0x73252078
  406df0:	00000a0d 	.word	0x00000a0d

00406df4 <_global_impure_ptr>:
  406df4:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  406e04:	46454443 00000000 33323130 37363534     CDEF....01234567
  406e14:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406e24:	0000296c                                l)..

00406e28 <blanks.7217>:
  406e28:	20202020 20202020 20202020 20202020                     

00406e38 <zeroes.7218>:
  406e38:	30303030 30303030 30303030 30303030     0000000000000000
  406e48:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406e58 <_ctype_>:
  406e58:	20202000 20202020 28282020 20282828     .         ((((( 
  406e68:	20202020 20202020 20202020 20202020                     
  406e78:	10108820 10101010 10101010 10101010      ...............
  406e88:	04040410 04040404 10040404 10101010     ................
  406e98:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406ea8:	01010101 01010101 01010101 10101010     ................
  406eb8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406ec8:	02020202 02020202 02020202 10101010     ................
  406ed8:	00000020 00000000 00000000 00000000      ...............
	...

00406f5c <_init>:
  406f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f5e:	bf00      	nop
  406f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f62:	bc08      	pop	{r3}
  406f64:	469e      	mov	lr, r3
  406f66:	4770      	bx	lr

00406f68 <__init_array_start>:
  406f68:	004054b9 	.word	0x004054b9

00406f6c <__frame_dummy_init_array_entry>:
  406f6c:	0040018d                                ..@.

00406f70 <_fini>:
  406f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f72:	bf00      	nop
  406f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f76:	bc08      	pop	{r3}
  406f78:	469e      	mov	lr, r3
  406f7a:	4770      	bx	lr

00406f7c <__fini_array_start>:
  406f7c:	00400169 	.word	0x00400169
