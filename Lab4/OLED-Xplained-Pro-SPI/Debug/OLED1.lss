
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a78  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402a78  00402a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20400000  00402a80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002bc  2040044c  00402ecc  0002044c  2**2
                  ALLOC
  4 .stack        00002000  20400708  00403188  0002044c  2**0
                  ALLOC
  5 .heap         00000200  20402708  00405188  0002044c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001903c  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003898  00000000  00000000  0003950f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000064f2  00000000  00000000  0003cda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c8  00000000  00000000  00043299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  00043c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002191d  00000000  00000000  000446a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f8ff  00000000  00000000  00065fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fe09  00000000  00000000  000758c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000017f8  00000000  00000000  001056d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 27 40 20 d5 13 40 00 d1 13 40 00 d1 13 40 00     .'@ ..@...@...@.
  400010:	d1 13 40 00 d1 13 40 00 d1 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d1 13 40 00 d1 13 40 00 00 00 00 00 d1 13 40 00     ..@...@.......@.
  40003c:	d1 13 40 00 d1 13 40 00 d1 13 40 00 85 18 40 00     ..@...@...@...@.
  40004c:	89 19 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  40005c:	d1 13 40 00 d1 13 40 00 00 00 00 00 f9 11 40 00     ..@...@.......@.
  40006c:	0d 12 40 00 21 12 40 00 d1 13 40 00 d1 13 40 00     ..@.!.@...@...@.
  40007c:	d1 13 40 00 35 12 40 00 49 12 40 00 d1 13 40 00     ..@.5.@.I.@...@.
  40008c:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  40009c:	d1 13 40 00 c9 17 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  4000ac:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  4000bc:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  4000cc:	d1 13 40 00 00 00 00 00 d1 13 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  4000ec:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  4000fc:	d1 13 40 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ..@...@...@...@.
  40010c:	d1 13 40 00 d1 13 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d1 13 40 00 d1 13 40 00 d1 13 40 00     ......@...@...@.
  40012c:	d1 13 40 00 d1 13 40 00 00 00 00 00 d1 13 40 00     ..@...@.......@.
  40013c:	d1 13 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00402a80 	.word	0x00402a80

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402a80 	.word	0x00402a80
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00402a80 	.word	0x00402a80
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr
	...

004001c8 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4001c8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4001ca:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4001cc:	f014 0f01 	tst.w	r4, #1
  4001d0:	d005      	beq.n	4001de <rtc_set_time+0x16>
  4001d2:	290c      	cmp	r1, #12
  4001d4:	d903      	bls.n	4001de <rtc_set_time+0x16>
			ul_hour -= 12;
  4001d6:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4001d8:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4001dc:	e000      	b.n	4001e0 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4001de:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4001e0:	4c1c      	ldr	r4, [pc, #112]	; (400254 <rtc_set_time+0x8c>)
  4001e2:	fba4 5603 	umull	r5, r6, r4, r3
  4001e6:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4001e8:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4001ec:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4001f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4001f4:	fba4 6502 	umull	r6, r5, r4, r2
  4001f8:	08ed      	lsrs	r5, r5, #3
  4001fa:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4001fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400202:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40020a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40020c:	fba4 4201 	umull	r4, r2, r4, r1
  400210:	08d2      	lsrs	r2, r2, #3
  400212:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400216:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40021a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40021e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400222:	6983      	ldr	r3, [r0, #24]
  400224:	f013 0f04 	tst.w	r3, #4
  400228:	d0fb      	beq.n	400222 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40022a:	6803      	ldr	r3, [r0, #0]
  40022c:	f043 0301 	orr.w	r3, r3, #1
  400230:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400232:	6983      	ldr	r3, [r0, #24]
  400234:	f013 0f01 	tst.w	r3, #1
  400238:	d0fb      	beq.n	400232 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40023a:	2301      	movs	r3, #1
  40023c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40023e:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400240:	6803      	ldr	r3, [r0, #0]
  400242:	f023 0301 	bic.w	r3, r3, #1
  400246:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400248:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40024a:	f000 0001 	and.w	r0, r0, #1
  40024e:	bcf0      	pop	{r4, r5, r6, r7}
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	cccccccd 	.word	0xcccccccd

00400258 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  400258:	b5f0      	push	{r4, r5, r6, r7, lr}
  40025a:	9c05      	ldr	r4, [sp, #20]
  40025c:	9d06      	ldr	r5, [sp, #24]
  40025e:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  400260:	460e      	mov	r6, r1
  400262:	b1b1      	cbz	r1, 400292 <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400264:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  400266:	f011 0f01 	tst.w	r1, #1
  40026a:	d005      	beq.n	400278 <rtc_set_time_alarm+0x20>
  40026c:	2a0c      	cmp	r2, #12
  40026e:	d903      	bls.n	400278 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  400270:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  400272:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  400276:	e000      	b.n	40027a <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  400278:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40027a:	4919      	ldr	r1, [pc, #100]	; (4002e0 <rtc_set_time_alarm+0x88>)
  40027c:	fba1 e102 	umull	lr, r1, r1, r2
  400280:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400282:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  400286:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  40028a:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40028c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  400290:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  400292:	b15b      	cbz	r3, 4002ac <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <rtc_set_time_alarm+0x88>)
  400296:	fba3 2304 	umull	r2, r3, r3, r4
  40029a:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40029c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002a0:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002a4:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002a6:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  4002aa:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  4002ac:	b155      	cbz	r5, 4002c4 <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002ae:	4b0c      	ldr	r3, [pc, #48]	; (4002e0 <rtc_set_time_alarm+0x88>)
  4002b0:	fba3 2307 	umull	r2, r3, r3, r7
  4002b4:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4002b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002ba:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002be:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  4002c2:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4002c4:	6902      	ldr	r2, [r0, #16]
  4002c6:	4b07      	ldr	r3, [pc, #28]	; (4002e4 <rtc_set_time_alarm+0x8c>)
  4002c8:	4013      	ands	r3, r2
  4002ca:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  4002cc:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  4002ce:	6902      	ldr	r2, [r0, #16]
  4002d0:	4b05      	ldr	r3, [pc, #20]	; (4002e8 <rtc_set_time_alarm+0x90>)
  4002d2:	4313      	orrs	r3, r2
  4002d4:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  4002d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002d8:	f000 0004 	and.w	r0, r0, #4
  4002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002de:	bf00      	nop
  4002e0:	cccccccd 	.word	0xcccccccd
  4002e4:	ff7f7f7f 	.word	0xff7f7f7f
  4002e8:	00808080 	.word	0x00808080

004002ec <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002ec:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ee:	4d2a      	ldr	r5, [pc, #168]	; (400398 <rtc_set_date+0xac>)
  4002f0:	fba5 4603 	umull	r4, r6, r5, r3
  4002f4:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002f6:	9c03      	ldr	r4, [sp, #12]
  4002f8:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002fa:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002fe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400302:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40030a:	fba5 6402 	umull	r6, r4, r5, r2
  40030e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400310:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400314:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400318:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40031c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400320:	4b1e      	ldr	r3, [pc, #120]	; (40039c <rtc_set_date+0xb0>)
  400322:	fba3 4301 	umull	r4, r3, r3, r1
  400326:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40032c:	4b1c      	ldr	r3, [pc, #112]	; (4003a0 <rtc_set_date+0xb4>)
  40032e:	fba3 4301 	umull	r4, r3, r3, r1
  400332:	095b      	lsrs	r3, r3, #5
  400334:	fba5 6403 	umull	r6, r4, r5, r3
  400338:	08e4      	lsrs	r4, r4, #3
  40033a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40033e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400342:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400344:	fba5 4301 	umull	r4, r3, r5, r1
  400348:	08db      	lsrs	r3, r3, #3
  40034a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40034e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400352:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400356:	fba5 1503 	umull	r1, r5, r5, r3
  40035a:	08ed      	lsrs	r5, r5, #3
  40035c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400360:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400364:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400368:	6983      	ldr	r3, [r0, #24]
  40036a:	f013 0f04 	tst.w	r3, #4
  40036e:	d0fb      	beq.n	400368 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400370:	6803      	ldr	r3, [r0, #0]
  400372:	f043 0302 	orr.w	r3, r3, #2
  400376:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400378:	6983      	ldr	r3, [r0, #24]
  40037a:	f013 0f01 	tst.w	r3, #1
  40037e:	d0fb      	beq.n	400378 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400380:	2301      	movs	r3, #1
  400382:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400384:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400386:	6803      	ldr	r3, [r0, #0]
  400388:	f023 0302 	bic.w	r3, r3, #2
  40038c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40038e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400390:	f000 0002 	and.w	r0, r0, #2
  400394:	bc70      	pop	{r4, r5, r6}
  400396:	4770      	bx	lr
  400398:	cccccccd 	.word	0xcccccccd
  40039c:	10624dd3 	.word	0x10624dd3
  4003a0:	51eb851f 	.word	0x51eb851f

004003a4 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4003a4:	b430      	push	{r4, r5}
  4003a6:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  4003a8:	460c      	mov	r4, r1
  4003aa:	b151      	cbz	r1, 4003c2 <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003ac:	4c12      	ldr	r4, [pc, #72]	; (4003f8 <rtc_set_date_alarm+0x54>)
  4003ae:	fba4 1402 	umull	r1, r4, r4, r2
  4003b2:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003b4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  4003b8:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  4003bc:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003be:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  4003c2:	b15b      	cbz	r3, 4003dc <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c4:	4a0c      	ldr	r2, [pc, #48]	; (4003f8 <rtc_set_date_alarm+0x54>)
  4003c6:	fba2 3205 	umull	r3, r2, r2, r5
  4003ca:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003cc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4003d0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4003d4:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4003da:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4003dc:	6942      	ldr	r2, [r0, #20]
  4003de:	4b07      	ldr	r3, [pc, #28]	; (4003fc <rtc_set_date_alarm+0x58>)
  4003e0:	4013      	ands	r3, r2
  4003e2:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4003e4:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4003e6:	6942      	ldr	r2, [r0, #20]
  4003e8:	4b05      	ldr	r3, [pc, #20]	; (400400 <rtc_set_date_alarm+0x5c>)
  4003ea:	4313      	orrs	r3, r2
  4003ec:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4003ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003f0:	f000 0008 	and.w	r0, r0, #8
  4003f4:	bc30      	pop	{r4, r5}
  4003f6:	4770      	bx	lr
  4003f8:	cccccccd 	.word	0xcccccccd
  4003fc:	7f7fffff 	.word	0x7f7fffff
  400400:	80800000 	.word	0x80800000

00400404 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400404:	6980      	ldr	r0, [r0, #24]
}
  400406:	4770      	bx	lr

00400408 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400408:	61c1      	str	r1, [r0, #28]
  40040a:	4770      	bx	lr

0040040c <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  40040c:	4b03      	ldr	r3, [pc, #12]	; (40041c <rtt_init+0x10>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400414:	4319      	orrs	r1, r3
  400416:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400418:	2000      	movs	r0, #0
  40041a:	4770      	bx	lr
  40041c:	20400468 	.word	0x20400468

00400420 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400420:	b941      	cbnz	r1, 400434 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400422:	4a09      	ldr	r2, [pc, #36]	; (400448 <rtt_sel_source+0x28>)
  400424:	6813      	ldr	r3, [r2, #0]
  400426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40042a:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40042c:	6802      	ldr	r2, [r0, #0]
  40042e:	4313      	orrs	r3, r2
  400430:	6003      	str	r3, [r0, #0]
  400432:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400434:	4a04      	ldr	r2, [pc, #16]	; (400448 <rtt_sel_source+0x28>)
  400436:	6813      	ldr	r3, [r2, #0]
  400438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40043c:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40043e:	6802      	ldr	r2, [r0, #0]
  400440:	4313      	orrs	r3, r2
  400442:	6003      	str	r3, [r0, #0]
  400444:	4770      	bx	lr
  400446:	bf00      	nop
  400448:	20400468 	.word	0x20400468

0040044c <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40044c:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <rtt_enable_interrupt+0x10>)
  400450:	681b      	ldr	r3, [r3, #0]
  400452:	4319      	orrs	r1, r3
  400454:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400456:	6001      	str	r1, [r0, #0]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	20400468 	.word	0x20400468

00400460 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400460:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400462:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <rtt_disable_interrupt+0x10>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40046c:	6001      	str	r1, [r0, #0]
  40046e:	4770      	bx	lr
  400470:	20400468 	.word	0x20400468

00400474 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400474:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400476:	6883      	ldr	r3, [r0, #8]
  400478:	429a      	cmp	r2, r3
  40047a:	d003      	beq.n	400484 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40047c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40047e:	6883      	ldr	r3, [r0, #8]
  400480:	4293      	cmp	r3, r2
  400482:	d1fb      	bne.n	40047c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400484:	4618      	mov	r0, r3
  400486:	4770      	bx	lr

00400488 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400488:	68c0      	ldr	r0, [r0, #12]
}
  40048a:	4770      	bx	lr

0040048c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40048c:	b570      	push	{r4, r5, r6, lr}
  40048e:	4606      	mov	r6, r0
  400490:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400492:	6804      	ldr	r4, [r0, #0]
  400494:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400498:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40049c:	4809      	ldr	r0, [pc, #36]	; (4004c4 <rtt_write_alarm_time+0x38>)
  40049e:	4b0a      	ldr	r3, [pc, #40]	; (4004c8 <rtt_write_alarm_time+0x3c>)
  4004a0:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4004a2:	b92d      	cbnz	r5, 4004b0 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4004a4:	f04f 33ff 	mov.w	r3, #4294967295
  4004a8:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  4004aa:	b924      	cbnz	r4, 4004b6 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  4004ac:	2000      	movs	r0, #0
  4004ae:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  4004b0:	3d01      	subs	r5, #1
  4004b2:	6075      	str	r5, [r6, #4]
  4004b4:	e7f9      	b.n	4004aa <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4004b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004ba:	4802      	ldr	r0, [pc, #8]	; (4004c4 <rtt_write_alarm_time+0x38>)
  4004bc:	4b03      	ldr	r3, [pc, #12]	; (4004cc <rtt_write_alarm_time+0x40>)
  4004be:	4798      	blx	r3
  4004c0:	e7f4      	b.n	4004ac <rtt_write_alarm_time+0x20>
  4004c2:	bf00      	nop
  4004c4:	400e1830 	.word	0x400e1830
  4004c8:	00400461 	.word	0x00400461
  4004cc:	0040044d 	.word	0x0040044d

004004d0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4004d0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4004d2:	4b07      	ldr	r3, [pc, #28]	; (4004f0 <spi_enable_clock+0x20>)
  4004d4:	4298      	cmp	r0, r3
  4004d6:	d003      	beq.n	4004e0 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4004d8:	4b06      	ldr	r3, [pc, #24]	; (4004f4 <spi_enable_clock+0x24>)
  4004da:	4298      	cmp	r0, r3
  4004dc:	d004      	beq.n	4004e8 <spi_enable_clock+0x18>
  4004de:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004e0:	2015      	movs	r0, #21
  4004e2:	4b05      	ldr	r3, [pc, #20]	; (4004f8 <spi_enable_clock+0x28>)
  4004e4:	4798      	blx	r3
  4004e6:	bd08      	pop	{r3, pc}
  4004e8:	202a      	movs	r0, #42	; 0x2a
  4004ea:	4b03      	ldr	r3, [pc, #12]	; (4004f8 <spi_enable_clock+0x28>)
  4004ec:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4004ee:	e7f6      	b.n	4004de <spi_enable_clock+0xe>
  4004f0:	40008000 	.word	0x40008000
  4004f4:	40058000 	.word	0x40058000
  4004f8:	0040137d 	.word	0x0040137d

004004fc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4004fc:	6843      	ldr	r3, [r0, #4]
  4004fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400502:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400504:	6843      	ldr	r3, [r0, #4]
  400506:	0409      	lsls	r1, r1, #16
  400508:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40050c:	4319      	orrs	r1, r3
  40050e:	6041      	str	r1, [r0, #4]
  400510:	4770      	bx	lr

00400512 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400512:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400514:	f643 2499 	movw	r4, #15001	; 0x3a99
  400518:	6905      	ldr	r5, [r0, #16]
  40051a:	f015 0f02 	tst.w	r5, #2
  40051e:	d103      	bne.n	400528 <spi_write+0x16>
		if (!timeout--) {
  400520:	3c01      	subs	r4, #1
  400522:	d1f9      	bne.n	400518 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400524:	2001      	movs	r0, #1
  400526:	e00c      	b.n	400542 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400528:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40052a:	f014 0f02 	tst.w	r4, #2
  40052e:	d006      	beq.n	40053e <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400530:	0412      	lsls	r2, r2, #16
  400532:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400536:	4311      	orrs	r1, r2
		if (uc_last) {
  400538:	b10b      	cbz	r3, 40053e <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40053a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40053e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400540:	2000      	movs	r0, #0
}
  400542:	bc30      	pop	{r4, r5}
  400544:	4770      	bx	lr

00400546 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400546:	b932      	cbnz	r2, 400556 <spi_set_clock_polarity+0x10>
  400548:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40054c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40054e:	f023 0301 	bic.w	r3, r3, #1
  400552:	6303      	str	r3, [r0, #48]	; 0x30
  400554:	4770      	bx	lr
  400556:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40055a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40055c:	f043 0301 	orr.w	r3, r3, #1
  400560:	6303      	str	r3, [r0, #48]	; 0x30
  400562:	4770      	bx	lr

00400564 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400564:	b932      	cbnz	r2, 400574 <spi_set_clock_phase+0x10>
  400566:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40056a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40056c:	f023 0302 	bic.w	r3, r3, #2
  400570:	6303      	str	r3, [r0, #48]	; 0x30
  400572:	4770      	bx	lr
  400574:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400578:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40057a:	f043 0302 	orr.w	r3, r3, #2
  40057e:	6303      	str	r3, [r0, #48]	; 0x30
  400580:	4770      	bx	lr

00400582 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400582:	2a04      	cmp	r2, #4
  400584:	d003      	beq.n	40058e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400586:	b16a      	cbz	r2, 4005a4 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400588:	2a08      	cmp	r2, #8
  40058a:	d016      	beq.n	4005ba <spi_configure_cs_behavior+0x38>
  40058c:	4770      	bx	lr
  40058e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400592:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400594:	f023 0308 	bic.w	r3, r3, #8
  400598:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40059a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40059c:	f043 0304 	orr.w	r3, r3, #4
  4005a0:	6303      	str	r3, [r0, #48]	; 0x30
  4005a2:	4770      	bx	lr
  4005a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4005a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005aa:	f023 0308 	bic.w	r3, r3, #8
  4005ae:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4005b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005b2:	f023 0304 	bic.w	r3, r3, #4
  4005b6:	6303      	str	r3, [r0, #48]	; 0x30
  4005b8:	4770      	bx	lr
  4005ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005c0:	f043 0308 	orr.w	r3, r3, #8
  4005c4:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4005c6:	e7e1      	b.n	40058c <spi_configure_cs_behavior+0xa>

004005c8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4005d2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005d6:	431a      	orrs	r2, r3
  4005d8:	630a      	str	r2, [r1, #48]	; 0x30
  4005da:	4770      	bx	lr

004005dc <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4005dc:	1e43      	subs	r3, r0, #1
  4005de:	4419      	add	r1, r3
  4005e0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4005e4:	1e43      	subs	r3, r0, #1
  4005e6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4005e8:	bf94      	ite	ls
  4005ea:	b200      	sxthls	r0, r0
		return -1;
  4005ec:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4005f0:	4770      	bx	lr

004005f2 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4005f2:	b17a      	cbz	r2, 400614 <spi_set_baudrate_div+0x22>
{
  4005f4:	b410      	push	{r4}
  4005f6:	4614      	mov	r4, r2
  4005f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4005fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400602:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400604:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400606:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40060a:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40060c:	2000      	movs	r0, #0
}
  40060e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400612:	4770      	bx	lr
        return -1;
  400614:	f04f 30ff 	mov.w	r0, #4294967295
  400618:	4770      	bx	lr

0040061a <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40061a:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40061c:	0189      	lsls	r1, r1, #6
  40061e:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400620:	2402      	movs	r4, #2
  400622:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400624:	f04f 31ff 	mov.w	r1, #4294967295
  400628:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40062a:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40062c:	605a      	str	r2, [r3, #4]
}
  40062e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400632:	4770      	bx	lr

00400634 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400634:	0189      	lsls	r1, r1, #6
  400636:	2305      	movs	r3, #5
  400638:	5043      	str	r3, [r0, r1]
  40063a:	4770      	bx	lr

0040063c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40063c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400640:	61ca      	str	r2, [r1, #28]
  400642:	4770      	bx	lr

00400644 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400644:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400648:	624a      	str	r2, [r1, #36]	; 0x24
  40064a:	4770      	bx	lr

0040064c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40064c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400650:	6a08      	ldr	r0, [r1, #32]
}
  400652:	4770      	bx	lr

00400654 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400654:	b4f0      	push	{r4, r5, r6, r7}
  400656:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400658:	2402      	movs	r4, #2
  40065a:	9401      	str	r4, [sp, #4]
  40065c:	2408      	movs	r4, #8
  40065e:	9402      	str	r4, [sp, #8]
  400660:	2420      	movs	r4, #32
  400662:	9403      	str	r4, [sp, #12]
  400664:	2480      	movs	r4, #128	; 0x80
  400666:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400668:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40066a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40066c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40066e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400672:	d814      	bhi.n	40069e <tc_find_mck_divisor+0x4a>
  400674:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400676:	42a0      	cmp	r0, r4
  400678:	d217      	bcs.n	4006aa <tc_find_mck_divisor+0x56>
  40067a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40067c:	af01      	add	r7, sp, #4
  40067e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400682:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400686:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400688:	4284      	cmp	r4, r0
  40068a:	d30a      	bcc.n	4006a2 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40068c:	4286      	cmp	r6, r0
  40068e:	d90d      	bls.n	4006ac <tc_find_mck_divisor+0x58>
			ul_index++) {
  400690:	3501      	adds	r5, #1
	for (ul_index = 0;
  400692:	2d05      	cmp	r5, #5
  400694:	d1f3      	bne.n	40067e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400696:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400698:	b006      	add	sp, #24
  40069a:	bcf0      	pop	{r4, r5, r6, r7}
  40069c:	4770      	bx	lr
			return 0;
  40069e:	2000      	movs	r0, #0
  4006a0:	e7fa      	b.n	400698 <tc_find_mck_divisor+0x44>
  4006a2:	2000      	movs	r0, #0
  4006a4:	e7f8      	b.n	400698 <tc_find_mck_divisor+0x44>
	return 1;
  4006a6:	2001      	movs	r0, #1
  4006a8:	e7f6      	b.n	400698 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4006aa:	2500      	movs	r5, #0
	if (p_uldiv) {
  4006ac:	b12a      	cbz	r2, 4006ba <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4006ae:	a906      	add	r1, sp, #24
  4006b0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006b4:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006b8:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d0f3      	beq.n	4006a6 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4006be:	601d      	str	r5, [r3, #0]
	return 1;
  4006c0:	2001      	movs	r0, #1
  4006c2:	e7e9      	b.n	400698 <tc_find_mck_divisor+0x44>

004006c4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4006c4:	4b01      	ldr	r3, [pc, #4]	; (4006cc <gfx_mono_set_framebuffer+0x8>)
  4006c6:	6018      	str	r0, [r3, #0]
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop
  4006cc:	2040046c 	.word	0x2040046c

004006d0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006d0:	4b02      	ldr	r3, [pc, #8]	; (4006dc <gfx_mono_framebuffer_put_byte+0xc>)
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4006d8:	5442      	strb	r2, [r0, r1]
  4006da:	4770      	bx	lr
  4006dc:	2040046c 	.word	0x2040046c

004006e0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <gfx_mono_framebuffer_get_byte+0xc>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4006e8:	5c40      	ldrb	r0, [r0, r1]
  4006ea:	4770      	bx	lr
  4006ec:	2040046c 	.word	0x2040046c

004006f0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4006f4:	1884      	adds	r4, r0, r2
  4006f6:	2c80      	cmp	r4, #128	; 0x80
  4006f8:	dd02      	ble.n	400700 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4006fa:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4006fe:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400700:	b322      	cbz	r2, 40074c <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400702:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400704:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400708:	2601      	movs	r6, #1
  40070a:	fa06 f101 	lsl.w	r1, r6, r1
  40070e:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400710:	2b01      	cmp	r3, #1
  400712:	d01d      	beq.n	400750 <gfx_mono_generic_draw_horizontal_line+0x60>
  400714:	2b00      	cmp	r3, #0
  400716:	d035      	beq.n	400784 <gfx_mono_generic_draw_horizontal_line+0x94>
  400718:	2b02      	cmp	r3, #2
  40071a:	d117      	bne.n	40074c <gfx_mono_generic_draw_horizontal_line+0x5c>
  40071c:	3801      	subs	r0, #1
  40071e:	b2c7      	uxtb	r7, r0
  400720:	19d4      	adds	r4, r2, r7
  400722:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400724:	f8df a090 	ldr.w	sl, [pc, #144]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400728:	f04f 0900 	mov.w	r9, #0
  40072c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400730:	4621      	mov	r1, r4
  400732:	4628      	mov	r0, r5
  400734:	47d0      	blx	sl
			temp ^= pixelmask;
  400736:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40073a:	464b      	mov	r3, r9
  40073c:	b2d2      	uxtb	r2, r2
  40073e:	4621      	mov	r1, r4
  400740:	4628      	mov	r0, r5
  400742:	47c0      	blx	r8
  400744:	3c01      	subs	r4, #1
  400746:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400748:	42bc      	cmp	r4, r7
  40074a:	d1f1      	bne.n	400730 <gfx_mono_generic_draw_horizontal_line+0x40>
  40074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400750:	3801      	subs	r0, #1
  400752:	b2c7      	uxtb	r7, r0
  400754:	19d4      	adds	r4, r2, r7
  400756:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400758:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  40075c:	f04f 0900 	mov.w	r9, #0
  400760:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400764:	4621      	mov	r1, r4
  400766:	4628      	mov	r0, r5
  400768:	47d0      	blx	sl
			temp |= pixelmask;
  40076a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40076e:	464b      	mov	r3, r9
  400770:	b2d2      	uxtb	r2, r2
  400772:	4621      	mov	r1, r4
  400774:	4628      	mov	r0, r5
  400776:	47c0      	blx	r8
  400778:	3c01      	subs	r4, #1
  40077a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40077c:	42bc      	cmp	r4, r7
  40077e:	d1f1      	bne.n	400764 <gfx_mono_generic_draw_horizontal_line+0x74>
  400780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400784:	3801      	subs	r0, #1
  400786:	b2c7      	uxtb	r7, r0
  400788:	19d4      	adds	r4, r2, r7
  40078a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40078c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4007b8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400790:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400792:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4007bc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400796:	4621      	mov	r1, r4
  400798:	4628      	mov	r0, r5
  40079a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40079c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007a0:	2300      	movs	r3, #0
  4007a2:	b2d2      	uxtb	r2, r2
  4007a4:	4621      	mov	r1, r4
  4007a6:	4628      	mov	r0, r5
  4007a8:	47c8      	blx	r9
  4007aa:	3c01      	subs	r4, #1
  4007ac:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007ae:	42bc      	cmp	r4, r7
  4007b0:	d1f1      	bne.n	400796 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007b6:	bf00      	nop
  4007b8:	00400bad 	.word	0x00400bad
  4007bc:	00400aa9 	.word	0x00400aa9

004007c0 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4007c0:	2a00      	cmp	r2, #0
  4007c2:	d048      	beq.n	400856 <gfx_mono_generic_draw_vertical_line+0x96>
{
  4007c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4007c8:	4614      	mov	r4, r2
  4007ca:	461f      	mov	r7, r3
  4007cc:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4007ce:	1e4a      	subs	r2, r1, #1
  4007d0:	4422      	add	r2, r4
  4007d2:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4007d4:	4291      	cmp	r1, r2
  4007d6:	d031      	beq.n	40083c <gfx_mono_generic_draw_vertical_line+0x7c>
  4007d8:	2a1f      	cmp	r2, #31
  4007da:	bf28      	it	cs
  4007dc:	221f      	movcs	r2, #31
  4007de:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  4007e0:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  4007e2:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  4007e6:	f001 0207 	and.w	r2, r1, #7
  4007ea:	23ff      	movs	r3, #255	; 0xff
  4007ec:	fa03 f202 	lsl.w	r2, r3, r2
  4007f0:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  4007f2:	f005 0507 	and.w	r5, r5, #7
  4007f6:	f1c5 0507 	rsb	r5, r5, #7
  4007fa:	fa43 f505 	asr.w	r5, r3, r5
  4007fe:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400800:	4544      	cmp	r4, r8
  400802:	d020      	beq.n	400846 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400804:	463b      	mov	r3, r7
  400806:	4601      	mov	r1, r0
  400808:	4620      	mov	r0, r4
  40080a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400858 <gfx_mono_generic_draw_vertical_line+0x98>
  40080e:	47c8      	blx	r9

		while (++y1page < y2page) {
  400810:	3401      	adds	r4, #1
  400812:	45a0      	cmp	r8, r4
  400814:	d90a      	bls.n	40082c <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  400816:	f04f 0aff 	mov.w	sl, #255	; 0xff
  40081a:	463b      	mov	r3, r7
  40081c:	4652      	mov	r2, sl
  40081e:	4631      	mov	r1, r6
  400820:	4620      	mov	r0, r4
  400822:	47c8      	blx	r9
		while (++y1page < y2page) {
  400824:	3401      	adds	r4, #1
  400826:	b2e4      	uxtb	r4, r4
  400828:	45a0      	cmp	r8, r4
  40082a:	d8f6      	bhi.n	40081a <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  40082c:	463b      	mov	r3, r7
  40082e:	462a      	mov	r2, r5
  400830:	4631      	mov	r1, r6
  400832:	4640      	mov	r0, r8
  400834:	4c08      	ldr	r4, [pc, #32]	; (400858 <gfx_mono_generic_draw_vertical_line+0x98>)
  400836:	47a0      	blx	r4
  400838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  40083c:	461a      	mov	r2, r3
  40083e:	4b07      	ldr	r3, [pc, #28]	; (40085c <gfx_mono_generic_draw_vertical_line+0x9c>)
  400840:	4798      	blx	r3
		return;
  400842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400846:	463b      	mov	r3, r7
  400848:	402a      	ands	r2, r5
  40084a:	4601      	mov	r1, r0
  40084c:	4620      	mov	r0, r4
  40084e:	4c02      	ldr	r4, [pc, #8]	; (400858 <gfx_mono_generic_draw_vertical_line+0x98>)
  400850:	47a0      	blx	r4
  400852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400856:	4770      	bx	lr
  400858:	00400bb9 	.word	0x00400bb9
  40085c:	00400b49 	.word	0x00400b49

00400860 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400864:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400868:	b18b      	cbz	r3, 40088e <gfx_mono_generic_draw_filled_rect+0x2e>
  40086a:	461c      	mov	r4, r3
  40086c:	4690      	mov	r8, r2
  40086e:	4606      	mov	r6, r0
  400870:	1e4d      	subs	r5, r1, #1
  400872:	b2ed      	uxtb	r5, r5
  400874:	442c      	add	r4, r5
  400876:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400878:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400894 <gfx_mono_generic_draw_filled_rect+0x34>
  40087c:	463b      	mov	r3, r7
  40087e:	4642      	mov	r2, r8
  400880:	4621      	mov	r1, r4
  400882:	4630      	mov	r0, r6
  400884:	47c8      	blx	r9
  400886:	3c01      	subs	r4, #1
  400888:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40088a:	42ac      	cmp	r4, r5
  40088c:	d1f6      	bne.n	40087c <gfx_mono_generic_draw_filled_rect+0x1c>
  40088e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400892:	bf00      	nop
  400894:	004006f1 	.word	0x004006f1

00400898 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  400898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40089c:	b085      	sub	sp, #20
  40089e:	4681      	mov	r9, r0
  4008a0:	9100      	str	r1, [sp, #0]
  4008a2:	9301      	str	r3, [sp, #4]
  4008a4:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  4008a8:	b17a      	cbz	r2, 4008ca <gfx_mono_generic_draw_filled_circle+0x32>
  4008aa:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  4008ac:	0055      	lsls	r5, r2, #1
  4008ae:	f1c5 0503 	rsb	r5, r5, #3
  4008b2:	2701      	movs	r7, #1
  4008b4:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4008b8:	f00b 0303 	and.w	r3, fp, #3
  4008bc:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4008be:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 4009b0 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4008c2:	f00b 030c 	and.w	r3, fp, #12
  4008c6:	9303      	str	r3, [sp, #12]
  4008c8:	e04d      	b.n	400966 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4008ca:	461a      	mov	r2, r3
  4008cc:	4b37      	ldr	r3, [pc, #220]	; (4009ac <gfx_mono_generic_draw_filled_circle+0x114>)
  4008ce:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4008d0:	b005      	add	sp, #20
  4008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  4008d6:	9b00      	ldr	r3, [sp, #0]
  4008d8:	1b19      	subs	r1, r3, r4
  4008da:	eb09 0006 	add.w	r0, r9, r6
  4008de:	9b01      	ldr	r3, [sp, #4]
  4008e0:	463a      	mov	r2, r7
  4008e2:	b2c9      	uxtb	r1, r1
  4008e4:	b2c0      	uxtb	r0, r0
  4008e6:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4008e8:	1c72      	adds	r2, r6, #1
  4008ea:	9900      	ldr	r1, [sp, #0]
  4008ec:	1b89      	subs	r1, r1, r6
  4008ee:	eb09 0004 	add.w	r0, r9, r4
  4008f2:	9b01      	ldr	r3, [sp, #4]
  4008f4:	b2d2      	uxtb	r2, r2
  4008f6:	b2c9      	uxtb	r1, r1
  4008f8:	b2c0      	uxtb	r0, r0
  4008fa:	47d0      	blx	sl
  4008fc:	e038      	b.n	400970 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  4008fe:	9b00      	ldr	r3, [sp, #0]
  400900:	1b19      	subs	r1, r3, r4
  400902:	eba9 0006 	sub.w	r0, r9, r6
  400906:	9b01      	ldr	r3, [sp, #4]
  400908:	463a      	mov	r2, r7
  40090a:	b2c9      	uxtb	r1, r1
  40090c:	b2c0      	uxtb	r0, r0
  40090e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400910:	1c72      	adds	r2, r6, #1
  400912:	9900      	ldr	r1, [sp, #0]
  400914:	1b89      	subs	r1, r1, r6
  400916:	eba9 0004 	sub.w	r0, r9, r4
  40091a:	9b01      	ldr	r3, [sp, #4]
  40091c:	b2d2      	uxtb	r2, r2
  40091e:	b2c9      	uxtb	r1, r1
  400920:	b2c0      	uxtb	r0, r0
  400922:	47d0      	blx	sl
  400924:	e027      	b.n	400976 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400926:	eba9 0006 	sub.w	r0, r9, r6
  40092a:	9b01      	ldr	r3, [sp, #4]
  40092c:	463a      	mov	r2, r7
  40092e:	9900      	ldr	r1, [sp, #0]
  400930:	b2c0      	uxtb	r0, r0
  400932:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400934:	1c72      	adds	r2, r6, #1
  400936:	eba9 0004 	sub.w	r0, r9, r4
  40093a:	9b01      	ldr	r3, [sp, #4]
  40093c:	b2d2      	uxtb	r2, r2
  40093e:	9900      	ldr	r1, [sp, #0]
  400940:	b2c0      	uxtb	r0, r0
  400942:	47d0      	blx	sl
  400944:	e01a      	b.n	40097c <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400946:	2d00      	cmp	r5, #0
  400948:	db2b      	blt.n	4009a2 <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  40094a:	1ba4      	subs	r4, r4, r6
  40094c:	350a      	adds	r5, #10
  40094e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400952:	b225      	sxth	r5, r4
			--offset_y;
  400954:	3e01      	subs	r6, #1
  400956:	b2f6      	uxtb	r6, r6
  400958:	f108 0801 	add.w	r8, r8, #1
  40095c:	1c7b      	adds	r3, r7, #1
  40095e:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400960:	42be      	cmp	r6, r7
  400962:	d3b5      	bcc.n	4008d0 <gfx_mono_generic_draw_filled_circle+0x38>
  400964:	461f      	mov	r7, r3
  400966:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  40096a:	9b02      	ldr	r3, [sp, #8]
  40096c:	2b00      	cmp	r3, #0
  40096e:	d1b2      	bne.n	4008d6 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  400970:	9b03      	ldr	r3, [sp, #12]
  400972:	2b00      	cmp	r3, #0
  400974:	d1c3      	bne.n	4008fe <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400976:	f01b 0f30 	tst.w	fp, #48	; 0x30
  40097a:	d1d4      	bne.n	400926 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  40097c:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  400980:	d0e1      	beq.n	400946 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  400982:	eb09 0006 	add.w	r0, r9, r6
  400986:	9b01      	ldr	r3, [sp, #4]
  400988:	463a      	mov	r2, r7
  40098a:	9900      	ldr	r1, [sp, #0]
  40098c:	b2c0      	uxtb	r0, r0
  40098e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400990:	1c72      	adds	r2, r6, #1
  400992:	eb09 0004 	add.w	r0, r9, r4
  400996:	9b01      	ldr	r3, [sp, #4]
  400998:	b2d2      	uxtb	r2, r2
  40099a:	9900      	ldr	r1, [sp, #0]
  40099c:	b2c0      	uxtb	r0, r0
  40099e:	47d0      	blx	sl
  4009a0:	e7d1      	b.n	400946 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  4009a2:	3506      	adds	r5, #6
  4009a4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  4009a8:	b22d      	sxth	r5, r5
  4009aa:	e7d5      	b.n	400958 <gfx_mono_generic_draw_filled_circle+0xc0>
  4009ac:	00400b49 	.word	0x00400b49
  4009b0:	004007c1 	.word	0x004007c1

004009b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4009b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009b8:	b083      	sub	sp, #12
  4009ba:	4604      	mov	r4, r0
  4009bc:	4688      	mov	r8, r1
  4009be:	4691      	mov	r9, r2
  4009c0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009c2:	7a5b      	ldrb	r3, [r3, #9]
  4009c4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009c8:	2100      	movs	r1, #0
  4009ca:	9100      	str	r1, [sp, #0]
  4009cc:	4649      	mov	r1, r9
  4009ce:	4640      	mov	r0, r8
  4009d0:	4d21      	ldr	r5, [pc, #132]	; (400a58 <gfx_mono_draw_char+0xa4>)
  4009d2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009d4:	f89b 3000 	ldrb.w	r3, [fp]
  4009d8:	b113      	cbz	r3, 4009e0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4009da:	b003      	add	sp, #12
  4009dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4009e0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009e4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4009e6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4009ea:	bf18      	it	ne
  4009ec:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4009ee:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4009f2:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4009f6:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4009f8:	fb17 f70a 	smulbb	r7, r7, sl
  4009fc:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400a00:	f8db 3004 	ldr.w	r3, [fp, #4]
  400a04:	fa13 f787 	uxtah	r7, r3, r7
  400a08:	e01f      	b.n	400a4a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400a0a:	0064      	lsls	r4, r4, #1
  400a0c:	b2e4      	uxtb	r4, r4
  400a0e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400a10:	b2eb      	uxtb	r3, r5
  400a12:	429e      	cmp	r6, r3
  400a14:	d910      	bls.n	400a38 <gfx_mono_draw_char+0x84>
  400a16:	b2eb      	uxtb	r3, r5
  400a18:	eb08 0003 	add.w	r0, r8, r3
  400a1c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400a1e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400a22:	bf08      	it	eq
  400a24:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400a28:	f014 0f80 	tst.w	r4, #128	; 0x80
  400a2c:	d0ed      	beq.n	400a0a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400a2e:	2201      	movs	r2, #1
  400a30:	4649      	mov	r1, r9
  400a32:	4b0a      	ldr	r3, [pc, #40]	; (400a5c <gfx_mono_draw_char+0xa8>)
  400a34:	4798      	blx	r3
  400a36:	e7e8      	b.n	400a0a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400a38:	f109 0901 	add.w	r9, r9, #1
  400a3c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400a40:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400a44:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400a48:	d0c7      	beq.n	4009da <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400a4a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400a4e:	2e00      	cmp	r6, #0
  400a50:	d0f2      	beq.n	400a38 <gfx_mono_draw_char+0x84>
  400a52:	2500      	movs	r5, #0
  400a54:	462c      	mov	r4, r5
  400a56:	e7de      	b.n	400a16 <gfx_mono_draw_char+0x62>
  400a58:	00400861 	.word	0x00400861
  400a5c:	00400b49 	.word	0x00400b49

00400a60 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a64:	4604      	mov	r4, r0
  400a66:	4690      	mov	r8, r2
  400a68:	461d      	mov	r5, r3
  400a6a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a6c:	4f0d      	ldr	r7, [pc, #52]	; (400aa4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400a6e:	460e      	mov	r6, r1
  400a70:	e008      	b.n	400a84 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400a72:	7a6a      	ldrb	r2, [r5, #9]
  400a74:	3201      	adds	r2, #1
  400a76:	4442      	add	r2, r8
  400a78:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400a7c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400a7e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400a82:	b16b      	cbz	r3, 400aa0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400a84:	7820      	ldrb	r0, [r4, #0]
  400a86:	280a      	cmp	r0, #10
  400a88:	d0f3      	beq.n	400a72 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400a8a:	280d      	cmp	r0, #13
  400a8c:	d0f7      	beq.n	400a7e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400a8e:	462b      	mov	r3, r5
  400a90:	4642      	mov	r2, r8
  400a92:	4649      	mov	r1, r9
  400a94:	47b8      	blx	r7
			x += font->width;
  400a96:	7a2b      	ldrb	r3, [r5, #8]
  400a98:	4499      	add	r9, r3
  400a9a:	fa5f f989 	uxtb.w	r9, r9
  400a9e:	e7ee      	b.n	400a7e <gfx_mono_draw_string+0x1e>
}
  400aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400aa4:	004009b5 	.word	0x004009b5

00400aa8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400aa8:	b570      	push	{r4, r5, r6, lr}
  400aaa:	4604      	mov	r4, r0
  400aac:	460d      	mov	r5, r1
  400aae:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400ab0:	b91b      	cbnz	r3, 400aba <gfx_mono_ssd1306_put_byte+0x12>
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <gfx_mono_ssd1306_put_byte+0x40>)
  400ab4:	4798      	blx	r3
  400ab6:	42b0      	cmp	r0, r6
  400ab8:	d015      	beq.n	400ae6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400aba:	4632      	mov	r2, r6
  400abc:	4629      	mov	r1, r5
  400abe:	4620      	mov	r0, r4
  400ac0:	4b0a      	ldr	r3, [pc, #40]	; (400aec <gfx_mono_ssd1306_put_byte+0x44>)
  400ac2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400ac4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ac8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400acc:	4c08      	ldr	r4, [pc, #32]	; (400af0 <gfx_mono_ssd1306_put_byte+0x48>)
  400ace:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400ad0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400ad4:	f040 0010 	orr.w	r0, r0, #16
  400ad8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400ada:	f005 000f 	and.w	r0, r5, #15
  400ade:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400ae0:	4630      	mov	r0, r6
  400ae2:	4b04      	ldr	r3, [pc, #16]	; (400af4 <gfx_mono_ssd1306_put_byte+0x4c>)
  400ae4:	4798      	blx	r3
  400ae6:	bd70      	pop	{r4, r5, r6, pc}
  400ae8:	004006e1 	.word	0x004006e1
  400aec:	004006d1 	.word	0x004006d1
  400af0:	00400bfd 	.word	0x00400bfd
  400af4:	00400e1d 	.word	0x00400e1d

00400af8 <gfx_mono_ssd1306_init>:
{
  400af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400afc:	480d      	ldr	r0, [pc, #52]	; (400b34 <gfx_mono_ssd1306_init+0x3c>)
  400afe:	4b0e      	ldr	r3, [pc, #56]	; (400b38 <gfx_mono_ssd1306_init+0x40>)
  400b00:	4798      	blx	r3
	ssd1306_init();
  400b02:	4b0e      	ldr	r3, [pc, #56]	; (400b3c <gfx_mono_ssd1306_init+0x44>)
  400b04:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400b06:	2040      	movs	r0, #64	; 0x40
  400b08:	4b0d      	ldr	r3, [pc, #52]	; (400b40 <gfx_mono_ssd1306_init+0x48>)
  400b0a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b0c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b0e:	f04f 0801 	mov.w	r8, #1
  400b12:	462f      	mov	r7, r5
  400b14:	4e0b      	ldr	r6, [pc, #44]	; (400b44 <gfx_mono_ssd1306_init+0x4c>)
{
  400b16:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b18:	4643      	mov	r3, r8
  400b1a:	463a      	mov	r2, r7
  400b1c:	b2e1      	uxtb	r1, r4
  400b1e:	4628      	mov	r0, r5
  400b20:	47b0      	blx	r6
  400b22:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b24:	2c80      	cmp	r4, #128	; 0x80
  400b26:	d1f7      	bne.n	400b18 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b28:	3501      	adds	r5, #1
  400b2a:	b2ed      	uxtb	r5, r5
  400b2c:	2d04      	cmp	r5, #4
  400b2e:	d1f2      	bne.n	400b16 <gfx_mono_ssd1306_init+0x1e>
  400b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b34:	20400470 	.word	0x20400470
  400b38:	004006c5 	.word	0x004006c5
  400b3c:	00400c3d 	.word	0x00400c3d
  400b40:	00400bfd 	.word	0x00400bfd
  400b44:	00400aa9 	.word	0x00400aa9

00400b48 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b48:	09c3      	lsrs	r3, r0, #7
  400b4a:	d12a      	bne.n	400ba2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400b4c:	291f      	cmp	r1, #31
  400b4e:	d828      	bhi.n	400ba2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b54:	4614      	mov	r4, r2
  400b56:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b58:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400b5a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400b5e:	2201      	movs	r2, #1
  400b60:	fa02 f701 	lsl.w	r7, r2, r1
  400b64:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400b68:	4601      	mov	r1, r0
  400b6a:	4630      	mov	r0, r6
  400b6c:	4b0d      	ldr	r3, [pc, #52]	; (400ba4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400b6e:	4798      	blx	r3
  400b70:	4602      	mov	r2, r0
	switch (color) {
  400b72:	2c01      	cmp	r4, #1
  400b74:	d009      	beq.n	400b8a <gfx_mono_ssd1306_draw_pixel+0x42>
  400b76:	b164      	cbz	r4, 400b92 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400b78:	2c02      	cmp	r4, #2
  400b7a:	d00e      	beq.n	400b9a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400b7c:	2300      	movs	r3, #0
  400b7e:	4629      	mov	r1, r5
  400b80:	4630      	mov	r0, r6
  400b82:	4c09      	ldr	r4, [pc, #36]	; (400ba8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400b84:	47a0      	blx	r4
  400b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400b8a:	ea48 0200 	orr.w	r2, r8, r0
  400b8e:	b2d2      	uxtb	r2, r2
		break;
  400b90:	e7f4      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400b92:	ea20 0207 	bic.w	r2, r0, r7
  400b96:	b2d2      	uxtb	r2, r2
		break;
  400b98:	e7f0      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400b9a:	ea88 0200 	eor.w	r2, r8, r0
  400b9e:	b2d2      	uxtb	r2, r2
		break;
  400ba0:	e7ec      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
  400ba2:	4770      	bx	lr
  400ba4:	004006e1 	.word	0x004006e1
  400ba8:	00400aa9 	.word	0x00400aa9

00400bac <gfx_mono_ssd1306_get_byte>:
{
  400bac:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400bae:	4b01      	ldr	r3, [pc, #4]	; (400bb4 <gfx_mono_ssd1306_get_byte+0x8>)
  400bb0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400bb2:	bd08      	pop	{r3, pc}
  400bb4:	004006e1 	.word	0x004006e1

00400bb8 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bba:	4605      	mov	r5, r0
  400bbc:	460e      	mov	r6, r1
  400bbe:	4617      	mov	r7, r2
  400bc0:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400bc2:	4b0c      	ldr	r3, [pc, #48]	; (400bf4 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400bc4:	4798      	blx	r3
  400bc6:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400bc8:	2c01      	cmp	r4, #1
  400bca:	d008      	beq.n	400bde <gfx_mono_ssd1306_mask_byte+0x26>
  400bcc:	b154      	cbz	r4, 400be4 <gfx_mono_ssd1306_mask_byte+0x2c>
  400bce:	2c02      	cmp	r4, #2
  400bd0:	d00c      	beq.n	400bec <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400bd2:	2300      	movs	r3, #0
  400bd4:	4631      	mov	r1, r6
  400bd6:	4628      	mov	r0, r5
  400bd8:	4c07      	ldr	r4, [pc, #28]	; (400bf8 <gfx_mono_ssd1306_mask_byte+0x40>)
  400bda:	47a0      	blx	r4
  400bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400bde:	433a      	orrs	r2, r7
  400be0:	b2d2      	uxtb	r2, r2
		break;
  400be2:	e7f6      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400be4:	ea20 0207 	bic.w	r2, r0, r7
  400be8:	b2d2      	uxtb	r2, r2
		break;
  400bea:	e7f2      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400bec:	407a      	eors	r2, r7
  400bee:	b2d2      	uxtb	r2, r2
		break;
  400bf0:	e7ef      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
  400bf2:	bf00      	nop
  400bf4:	004006e1 	.word	0x004006e1
  400bf8:	00400aa9 	.word	0x00400aa9

00400bfc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400bfc:	b538      	push	{r3, r4, r5, lr}
  400bfe:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c00:	2208      	movs	r2, #8
  400c02:	4b09      	ldr	r3, [pc, #36]	; (400c28 <ssd1306_write_command+0x2c>)
  400c04:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c06:	4c09      	ldr	r4, [pc, #36]	; (400c2c <ssd1306_write_command+0x30>)
  400c08:	2101      	movs	r1, #1
  400c0a:	4620      	mov	r0, r4
  400c0c:	4b08      	ldr	r3, [pc, #32]	; (400c30 <ssd1306_write_command+0x34>)
  400c0e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400c10:	2301      	movs	r3, #1
  400c12:	461a      	mov	r2, r3
  400c14:	4629      	mov	r1, r5
  400c16:	4620      	mov	r0, r4
  400c18:	4c06      	ldr	r4, [pc, #24]	; (400c34 <ssd1306_write_command+0x38>)
  400c1a:	47a0      	blx	r4
	delay_us(10);
  400c1c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c20:	4b05      	ldr	r3, [pc, #20]	; (400c38 <ssd1306_write_command+0x3c>)
  400c22:	4798      	blx	r3
  400c24:	bd38      	pop	{r3, r4, r5, pc}
  400c26:	bf00      	nop
  400c28:	400e1000 	.word	0x400e1000
  400c2c:	40008000 	.word	0x40008000
  400c30:	004004fd 	.word	0x004004fd
  400c34:	00400513 	.word	0x00400513
  400c38:	20400001 	.word	0x20400001

00400c3c <ssd1306_init>:
{
  400c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c40:	4d66      	ldr	r5, [pc, #408]	; (400ddc <ssd1306_init+0x1a0>)
  400c42:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400c46:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c48:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c4c:	4b64      	ldr	r3, [pc, #400]	; (400de0 <ssd1306_init+0x1a4>)
  400c4e:	2708      	movs	r7, #8
  400c50:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c52:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400c56:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c58:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c5c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c5e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c60:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400c66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c6a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c6c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400c6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c72:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400c74:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c76:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c7a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c7c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c7e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c84:	f022 0208 	bic.w	r2, r2, #8
  400c88:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c8c:	f022 0208 	bic.w	r2, r2, #8
  400c90:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400c92:	601f      	str	r7, [r3, #0]
  400c94:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c96:	631f      	str	r7, [r3, #48]	; 0x30
  400c98:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400c9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400e18 <ssd1306_init+0x1dc>
  400c9e:	2300      	movs	r3, #0
  400ca0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400ca4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ca8:	4640      	mov	r0, r8
  400caa:	4c4e      	ldr	r4, [pc, #312]	; (400de4 <ssd1306_init+0x1a8>)
  400cac:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400cae:	2300      	movs	r3, #0
  400cb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400cb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cb8:	4640      	mov	r0, r8
  400cba:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400cbc:	2300      	movs	r3, #0
  400cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400cc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cc6:	4640      	mov	r0, r8
  400cc8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400cca:	2300      	movs	r3, #0
  400ccc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400cd0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cd4:	4640      	mov	r0, r8
  400cd6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400cd8:	2300      	movs	r3, #0
  400cda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400cde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ce2:	4640      	mov	r0, r8
  400ce4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400ce6:	2300      	movs	r3, #0
  400ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400cec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cf0:	4640      	mov	r0, r8
  400cf2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400cf4:	4c3c      	ldr	r4, [pc, #240]	; (400de8 <ssd1306_init+0x1ac>)
  400cf6:	f04f 0902 	mov.w	r9, #2
  400cfa:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400cfe:	f04f 0880 	mov.w	r8, #128	; 0x80
  400d02:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400d06:	6863      	ldr	r3, [r4, #4]
  400d08:	f043 0301 	orr.w	r3, r3, #1
  400d0c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400d0e:	463a      	mov	r2, r7
  400d10:	2101      	movs	r1, #1
  400d12:	4620      	mov	r0, r4
  400d14:	4b35      	ldr	r3, [pc, #212]	; (400dec <ssd1306_init+0x1b0>)
  400d16:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400d18:	2200      	movs	r2, #0
  400d1a:	2101      	movs	r1, #1
  400d1c:	4620      	mov	r0, r4
  400d1e:	4b34      	ldr	r3, [pc, #208]	; (400df0 <ssd1306_init+0x1b4>)
  400d20:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400d22:	2200      	movs	r2, #0
  400d24:	2101      	movs	r1, #1
  400d26:	4620      	mov	r0, r4
  400d28:	4b32      	ldr	r3, [pc, #200]	; (400df4 <ssd1306_init+0x1b8>)
  400d2a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400d2c:	6863      	ldr	r3, [r4, #4]
  400d2e:	f023 0302 	bic.w	r3, r3, #2
  400d32:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400d34:	2200      	movs	r2, #0
  400d36:	2101      	movs	r1, #1
  400d38:	4620      	mov	r0, r4
  400d3a:	4b2f      	ldr	r3, [pc, #188]	; (400df8 <ssd1306_init+0x1bc>)
  400d3c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400d3e:	6863      	ldr	r3, [r4, #4]
  400d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400d44:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400d46:	6863      	ldr	r3, [r4, #4]
  400d48:	f043 0310 	orr.w	r3, r3, #16
  400d4c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400d4e:	492b      	ldr	r1, [pc, #172]	; (400dfc <ssd1306_init+0x1c0>)
  400d50:	482b      	ldr	r0, [pc, #172]	; (400e00 <ssd1306_init+0x1c4>)
  400d52:	4b2c      	ldr	r3, [pc, #176]	; (400e04 <ssd1306_init+0x1c8>)
  400d54:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400d56:	b2c2      	uxtb	r2, r0
  400d58:	2101      	movs	r1, #1
  400d5a:	4620      	mov	r0, r4
  400d5c:	4b2a      	ldr	r3, [pc, #168]	; (400e08 <ssd1306_init+0x1cc>)
  400d5e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400d60:	4620      	mov	r0, r4
  400d62:	4b2a      	ldr	r3, [pc, #168]	; (400e0c <ssd1306_init+0x1d0>)
  400d64:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400d66:	2301      	movs	r3, #1
  400d68:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d6a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400d6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d70:	4c27      	ldr	r4, [pc, #156]	; (400e10 <ssd1306_init+0x1d4>)
  400d72:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d74:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400d76:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d7a:	47a0      	blx	r4
  400d7c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400d7e:	20a8      	movs	r0, #168	; 0xa8
  400d80:	4c24      	ldr	r4, [pc, #144]	; (400e14 <ssd1306_init+0x1d8>)
  400d82:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400d84:	201f      	movs	r0, #31
  400d86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400d88:	20d3      	movs	r0, #211	; 0xd3
  400d8a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400d8c:	2000      	movs	r0, #0
  400d8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400d90:	2040      	movs	r0, #64	; 0x40
  400d92:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400d94:	20a1      	movs	r0, #161	; 0xa1
  400d96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400d98:	20c8      	movs	r0, #200	; 0xc8
  400d9a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400d9c:	20da      	movs	r0, #218	; 0xda
  400d9e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400da0:	4648      	mov	r0, r9
  400da2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400da4:	2081      	movs	r0, #129	; 0x81
  400da6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400da8:	208f      	movs	r0, #143	; 0x8f
  400daa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400dac:	20a4      	movs	r0, #164	; 0xa4
  400dae:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400db0:	20a6      	movs	r0, #166	; 0xa6
  400db2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400db4:	20d5      	movs	r0, #213	; 0xd5
  400db6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400db8:	4640      	mov	r0, r8
  400dba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400dbc:	208d      	movs	r0, #141	; 0x8d
  400dbe:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400dc0:	2014      	movs	r0, #20
  400dc2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400dc4:	20db      	movs	r0, #219	; 0xdb
  400dc6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400dc8:	2040      	movs	r0, #64	; 0x40
  400dca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400dcc:	20d9      	movs	r0, #217	; 0xd9
  400dce:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400dd0:	20f1      	movs	r0, #241	; 0xf1
  400dd2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400dd4:	20af      	movs	r0, #175	; 0xaf
  400dd6:	47a0      	blx	r4
  400dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ddc:	400e1200 	.word	0x400e1200
  400de0:	400e1000 	.word	0x400e1000
  400de4:	00401105 	.word	0x00401105
  400de8:	40008000 	.word	0x40008000
  400dec:	00400583 	.word	0x00400583
  400df0:	00400547 	.word	0x00400547
  400df4:	00400565 	.word	0x00400565
  400df8:	004005c9 	.word	0x004005c9
  400dfc:	08f0d180 	.word	0x08f0d180
  400e00:	000f4240 	.word	0x000f4240
  400e04:	004005dd 	.word	0x004005dd
  400e08:	004005f3 	.word	0x004005f3
  400e0c:	004004d1 	.word	0x004004d1
  400e10:	20400001 	.word	0x20400001
  400e14:	00400bfd 	.word	0x00400bfd
  400e18:	400e1400 	.word	0x400e1400

00400e1c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400e1c:	b538      	push	{r3, r4, r5, lr}
  400e1e:	4605      	mov	r5, r0
  400e20:	2208      	movs	r2, #8
  400e22:	4b09      	ldr	r3, [pc, #36]	; (400e48 <ssd1306_write_data+0x2c>)
  400e24:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400e26:	4c09      	ldr	r4, [pc, #36]	; (400e4c <ssd1306_write_data+0x30>)
  400e28:	2101      	movs	r1, #1
  400e2a:	4620      	mov	r0, r4
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <ssd1306_write_data+0x34>)
  400e2e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400e30:	2301      	movs	r3, #1
  400e32:	461a      	mov	r2, r3
  400e34:	4629      	mov	r1, r5
  400e36:	4620      	mov	r0, r4
  400e38:	4c06      	ldr	r4, [pc, #24]	; (400e54 <ssd1306_write_data+0x38>)
  400e3a:	47a0      	blx	r4
	delay_us(10);
  400e3c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400e40:	4b05      	ldr	r3, [pc, #20]	; (400e58 <ssd1306_write_data+0x3c>)
  400e42:	4798      	blx	r3
  400e44:	bd38      	pop	{r3, r4, r5, pc}
  400e46:	bf00      	nop
  400e48:	400e1000 	.word	0x400e1000
  400e4c:	40008000 	.word	0x40008000
  400e50:	004004fd 	.word	0x004004fd
  400e54:	00400513 	.word	0x00400513
  400e58:	20400001 	.word	0x20400001

00400e5c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e5c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e5e:	4810      	ldr	r0, [pc, #64]	; (400ea0 <sysclk_init+0x44>)
  400e60:	4b10      	ldr	r3, [pc, #64]	; (400ea4 <sysclk_init+0x48>)
  400e62:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e64:	213e      	movs	r1, #62	; 0x3e
  400e66:	2000      	movs	r0, #0
  400e68:	4b0f      	ldr	r3, [pc, #60]	; (400ea8 <sysclk_init+0x4c>)
  400e6a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e6c:	4c0f      	ldr	r4, [pc, #60]	; (400eac <sysclk_init+0x50>)
  400e6e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400e70:	2800      	cmp	r0, #0
  400e72:	d0fc      	beq.n	400e6e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e74:	4b0e      	ldr	r3, [pc, #56]	; (400eb0 <sysclk_init+0x54>)
  400e76:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e78:	4a0e      	ldr	r2, [pc, #56]	; (400eb4 <sysclk_init+0x58>)
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <sysclk_init+0x5c>)
  400e7c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400e7e:	4c0f      	ldr	r4, [pc, #60]	; (400ebc <sysclk_init+0x60>)
  400e80:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e82:	2800      	cmp	r0, #0
  400e84:	d0fc      	beq.n	400e80 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400e86:	2002      	movs	r0, #2
  400e88:	4b0d      	ldr	r3, [pc, #52]	; (400ec0 <sysclk_init+0x64>)
  400e8a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e8c:	2000      	movs	r0, #0
  400e8e:	4b0d      	ldr	r3, [pc, #52]	; (400ec4 <sysclk_init+0x68>)
  400e90:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e92:	4b0d      	ldr	r3, [pc, #52]	; (400ec8 <sysclk_init+0x6c>)
  400e94:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e96:	4802      	ldr	r0, [pc, #8]	; (400ea0 <sysclk_init+0x44>)
  400e98:	4b02      	ldr	r3, [pc, #8]	; (400ea4 <sysclk_init+0x48>)
  400e9a:	4798      	blx	r3
  400e9c:	bd10      	pop	{r4, pc}
  400e9e:	bf00      	nop
  400ea0:	11e1a300 	.word	0x11e1a300
  400ea4:	004015a9 	.word	0x004015a9
  400ea8:	004012f9 	.word	0x004012f9
  400eac:	0040134d 	.word	0x0040134d
  400eb0:	0040135d 	.word	0x0040135d
  400eb4:	20183f01 	.word	0x20183f01
  400eb8:	400e0600 	.word	0x400e0600
  400ebc:	0040136d 	.word	0x0040136d
  400ec0:	0040125d 	.word	0x0040125d
  400ec4:	00401295 	.word	0x00401295
  400ec8:	0040149d 	.word	0x0040149d

00400ecc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ed2:	4b48      	ldr	r3, [pc, #288]	; (400ff4 <board_init+0x128>)
  400ed4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eda:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400ede:	4b46      	ldr	r3, [pc, #280]	; (400ff8 <board_init+0x12c>)
  400ee0:	2200      	movs	r2, #0
  400ee2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400ee6:	695a      	ldr	r2, [r3, #20]
  400ee8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400eec:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ef2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ef6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400efa:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400efe:	f007 0007 	and.w	r0, r7, #7
  400f02:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400f04:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400f08:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400f0c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400f10:	f3bf 8f4f 	dsb	sy
  400f14:	f04f 34ff 	mov.w	r4, #4294967295
  400f18:	fa04 fc00 	lsl.w	ip, r4, r0
  400f1c:	fa06 f000 	lsl.w	r0, r6, r0
  400f20:	fa04 f40e 	lsl.w	r4, r4, lr
  400f24:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400f28:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400f2a:	463a      	mov	r2, r7
  400f2c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400f2e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400f32:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400f36:	3a01      	subs	r2, #1
  400f38:	4423      	add	r3, r4
  400f3a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f3e:	d1f6      	bne.n	400f2e <board_init+0x62>
        } while(sets--);
  400f40:	3e01      	subs	r6, #1
  400f42:	4460      	add	r0, ip
  400f44:	f1b6 3fff 	cmp.w	r6, #4294967295
  400f48:	d1ef      	bne.n	400f2a <board_init+0x5e>
  400f4a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400f4e:	4b2a      	ldr	r3, [pc, #168]	; (400ff8 <board_init+0x12c>)
  400f50:	695a      	ldr	r2, [r3, #20]
  400f52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400f56:	615a      	str	r2, [r3, #20]
  400f58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f5c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f60:	4a26      	ldr	r2, [pc, #152]	; (400ffc <board_init+0x130>)
  400f62:	4927      	ldr	r1, [pc, #156]	; (401000 <board_init+0x134>)
  400f64:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f66:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400f6a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400f6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f70:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400f74:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400f78:	f022 0201 	bic.w	r2, r2, #1
  400f7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400f80:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400f84:	f022 0201 	bic.w	r2, r2, #1
  400f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f90:	f3bf 8f6f 	isb	sy
  400f94:	200a      	movs	r0, #10
  400f96:	4c1b      	ldr	r4, [pc, #108]	; (401004 <board_init+0x138>)
  400f98:	47a0      	blx	r4
  400f9a:	200b      	movs	r0, #11
  400f9c:	47a0      	blx	r4
  400f9e:	200c      	movs	r0, #12
  400fa0:	47a0      	blx	r4
  400fa2:	2010      	movs	r0, #16
  400fa4:	47a0      	blx	r4
  400fa6:	2011      	movs	r0, #17
  400fa8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400faa:	4b17      	ldr	r3, [pc, #92]	; (401008 <board_init+0x13c>)
  400fac:	f44f 7280 	mov.w	r2, #256	; 0x100
  400fb0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fb6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400fb8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fc0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400fc6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400fcc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400fce:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400fd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400fd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400fdc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400fde:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fe2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400fe4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400fe8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400fec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff2:	bf00      	nop
  400ff4:	400e1850 	.word	0x400e1850
  400ff8:	e000ed00 	.word	0xe000ed00
  400ffc:	400e0c00 	.word	0x400e0c00
  401000:	5a00080c 	.word	0x5a00080c
  401004:	0040137d 	.word	0x0040137d
  401008:	400e1200 	.word	0x400e1200

0040100c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40100c:	6301      	str	r1, [r0, #48]	; 0x30
  40100e:	4770      	bx	lr

00401010 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401010:	6341      	str	r1, [r0, #52]	; 0x34
  401012:	4770      	bx	lr

00401014 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401014:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401016:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40101a:	d03a      	beq.n	401092 <pio_set_peripheral+0x7e>
  40101c:	d813      	bhi.n	401046 <pio_set_peripheral+0x32>
  40101e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401022:	d025      	beq.n	401070 <pio_set_peripheral+0x5c>
  401024:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401028:	d10a      	bne.n	401040 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40102a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102c:	4313      	orrs	r3, r2
  40102e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401030:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401032:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401034:	400b      	ands	r3, r1
  401036:	ea23 0302 	bic.w	r3, r3, r2
  40103a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40103c:	6042      	str	r2, [r0, #4]
  40103e:	4770      	bx	lr
	switch (ul_type) {
  401040:	2900      	cmp	r1, #0
  401042:	d1fb      	bne.n	40103c <pio_set_peripheral+0x28>
  401044:	4770      	bx	lr
  401046:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40104a:	d021      	beq.n	401090 <pio_set_peripheral+0x7c>
  40104c:	d809      	bhi.n	401062 <pio_set_peripheral+0x4e>
  40104e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401052:	d1f3      	bne.n	40103c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401054:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401056:	4313      	orrs	r3, r2
  401058:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40105a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40105c:	4313      	orrs	r3, r2
  40105e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401060:	e7ec      	b.n	40103c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401062:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401066:	d013      	beq.n	401090 <pio_set_peripheral+0x7c>
  401068:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40106c:	d010      	beq.n	401090 <pio_set_peripheral+0x7c>
  40106e:	e7e5      	b.n	40103c <pio_set_peripheral+0x28>
{
  401070:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401072:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401074:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401076:	43d3      	mvns	r3, r2
  401078:	4021      	ands	r1, r4
  40107a:	461c      	mov	r4, r3
  40107c:	4019      	ands	r1, r3
  40107e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401080:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401082:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401084:	400b      	ands	r3, r1
  401086:	4023      	ands	r3, r4
  401088:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40108a:	6042      	str	r2, [r0, #4]
}
  40108c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401090:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401092:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401094:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401096:	400b      	ands	r3, r1
  401098:	ea23 0302 	bic.w	r3, r3, r2
  40109c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40109e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010a0:	4313      	orrs	r3, r2
  4010a2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010a4:	e7ca      	b.n	40103c <pio_set_peripheral+0x28>

004010a6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4010a6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010a8:	f012 0f01 	tst.w	r2, #1
  4010ac:	d10d      	bne.n	4010ca <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4010ae:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4010b0:	f012 0f0a 	tst.w	r2, #10
  4010b4:	d00b      	beq.n	4010ce <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4010b6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4010b8:	f012 0f02 	tst.w	r2, #2
  4010bc:	d109      	bne.n	4010d2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4010be:	f012 0f08 	tst.w	r2, #8
  4010c2:	d008      	beq.n	4010d6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4010c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4010c8:	e005      	b.n	4010d6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4010ca:	6641      	str	r1, [r0, #100]	; 0x64
  4010cc:	e7f0      	b.n	4010b0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4010ce:	6241      	str	r1, [r0, #36]	; 0x24
  4010d0:	e7f2      	b.n	4010b8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4010d2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4010d6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4010d8:	6001      	str	r1, [r0, #0]
  4010da:	4770      	bx	lr

004010dc <pio_set_output>:
{
  4010dc:	b410      	push	{r4}
  4010de:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4010e0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010e2:	b94c      	cbnz	r4, 4010f8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4010e4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4010e6:	b14b      	cbz	r3, 4010fc <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4010e8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4010ea:	b94a      	cbnz	r2, 401100 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4010ec:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4010ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4010f0:	6001      	str	r1, [r0, #0]
}
  4010f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010f6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4010f8:	6641      	str	r1, [r0, #100]	; 0x64
  4010fa:	e7f4      	b.n	4010e6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4010fc:	6541      	str	r1, [r0, #84]	; 0x54
  4010fe:	e7f4      	b.n	4010ea <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401100:	6301      	str	r1, [r0, #48]	; 0x30
  401102:	e7f4      	b.n	4010ee <pio_set_output+0x12>

00401104 <pio_configure>:
{
  401104:	b570      	push	{r4, r5, r6, lr}
  401106:	b082      	sub	sp, #8
  401108:	4605      	mov	r5, r0
  40110a:	4616      	mov	r6, r2
  40110c:	461c      	mov	r4, r3
	switch (ul_type) {
  40110e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401112:	d014      	beq.n	40113e <pio_configure+0x3a>
  401114:	d90a      	bls.n	40112c <pio_configure+0x28>
  401116:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40111a:	d024      	beq.n	401166 <pio_configure+0x62>
  40111c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401120:	d021      	beq.n	401166 <pio_configure+0x62>
  401122:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401126:	d017      	beq.n	401158 <pio_configure+0x54>
		return 0;
  401128:	2000      	movs	r0, #0
  40112a:	e01a      	b.n	401162 <pio_configure+0x5e>
	switch (ul_type) {
  40112c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401130:	d005      	beq.n	40113e <pio_configure+0x3a>
  401132:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401136:	d002      	beq.n	40113e <pio_configure+0x3a>
  401138:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40113c:	d1f4      	bne.n	401128 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40113e:	4632      	mov	r2, r6
  401140:	4628      	mov	r0, r5
  401142:	4b11      	ldr	r3, [pc, #68]	; (401188 <pio_configure+0x84>)
  401144:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401146:	f014 0f01 	tst.w	r4, #1
  40114a:	d102      	bne.n	401152 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40114c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40114e:	2001      	movs	r0, #1
  401150:	e007      	b.n	401162 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401152:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401154:	2001      	movs	r0, #1
  401156:	e004      	b.n	401162 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401158:	461a      	mov	r2, r3
  40115a:	4631      	mov	r1, r6
  40115c:	4b0b      	ldr	r3, [pc, #44]	; (40118c <pio_configure+0x88>)
  40115e:	4798      	blx	r3
	return 1;
  401160:	2001      	movs	r0, #1
}
  401162:	b002      	add	sp, #8
  401164:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401166:	f004 0301 	and.w	r3, r4, #1
  40116a:	9300      	str	r3, [sp, #0]
  40116c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401170:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401174:	bf14      	ite	ne
  401176:	2200      	movne	r2, #0
  401178:	2201      	moveq	r2, #1
  40117a:	4631      	mov	r1, r6
  40117c:	4628      	mov	r0, r5
  40117e:	4c04      	ldr	r4, [pc, #16]	; (401190 <pio_configure+0x8c>)
  401180:	47a0      	blx	r4
	return 1;
  401182:	2001      	movs	r0, #1
		break;
  401184:	e7ed      	b.n	401162 <pio_configure+0x5e>
  401186:	bf00      	nop
  401188:	00401015 	.word	0x00401015
  40118c:	004010a7 	.word	0x004010a7
  401190:	004010dd 	.word	0x004010dd

00401194 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401194:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401196:	420b      	tst	r3, r1
}
  401198:	bf14      	ite	ne
  40119a:	2001      	movne	r0, #1
  40119c:	2000      	moveq	r0, #0
  40119e:	4770      	bx	lr

004011a0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4011a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4011a2:	4770      	bx	lr

004011a4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4011a4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4011a6:	4770      	bx	lr

004011a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011ac:	4604      	mov	r4, r0
  4011ae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011b0:	4b0e      	ldr	r3, [pc, #56]	; (4011ec <pio_handler_process+0x44>)
  4011b2:	4798      	blx	r3
  4011b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4011b6:	4620      	mov	r0, r4
  4011b8:	4b0d      	ldr	r3, [pc, #52]	; (4011f0 <pio_handler_process+0x48>)
  4011ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4011bc:	4005      	ands	r5, r0
  4011be:	d013      	beq.n	4011e8 <pio_handler_process+0x40>
  4011c0:	4c0c      	ldr	r4, [pc, #48]	; (4011f4 <pio_handler_process+0x4c>)
  4011c2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4011c6:	e003      	b.n	4011d0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011c8:	42b4      	cmp	r4, r6
  4011ca:	d00d      	beq.n	4011e8 <pio_handler_process+0x40>
  4011cc:	3410      	adds	r4, #16
		while (status != 0) {
  4011ce:	b15d      	cbz	r5, 4011e8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4011d0:	6820      	ldr	r0, [r4, #0]
  4011d2:	4540      	cmp	r0, r8
  4011d4:	d1f8      	bne.n	4011c8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4011d6:	6861      	ldr	r1, [r4, #4]
  4011d8:	4229      	tst	r1, r5
  4011da:	d0f5      	beq.n	4011c8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011dc:	68e3      	ldr	r3, [r4, #12]
  4011de:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4011e0:	6863      	ldr	r3, [r4, #4]
  4011e2:	ea25 0503 	bic.w	r5, r5, r3
  4011e6:	e7ef      	b.n	4011c8 <pio_handler_process+0x20>
  4011e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011ec:	004011a1 	.word	0x004011a1
  4011f0:	004011a5 	.word	0x004011a5
  4011f4:	20400670 	.word	0x20400670

004011f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4011f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4011fa:	210a      	movs	r1, #10
  4011fc:	4801      	ldr	r0, [pc, #4]	; (401204 <PIOA_Handler+0xc>)
  4011fe:	4b02      	ldr	r3, [pc, #8]	; (401208 <PIOA_Handler+0x10>)
  401200:	4798      	blx	r3
  401202:	bd08      	pop	{r3, pc}
  401204:	400e0e00 	.word	0x400e0e00
  401208:	004011a9 	.word	0x004011a9

0040120c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40120c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40120e:	210b      	movs	r1, #11
  401210:	4801      	ldr	r0, [pc, #4]	; (401218 <PIOB_Handler+0xc>)
  401212:	4b02      	ldr	r3, [pc, #8]	; (40121c <PIOB_Handler+0x10>)
  401214:	4798      	blx	r3
  401216:	bd08      	pop	{r3, pc}
  401218:	400e1000 	.word	0x400e1000
  40121c:	004011a9 	.word	0x004011a9

00401220 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401220:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401222:	210c      	movs	r1, #12
  401224:	4801      	ldr	r0, [pc, #4]	; (40122c <PIOC_Handler+0xc>)
  401226:	4b02      	ldr	r3, [pc, #8]	; (401230 <PIOC_Handler+0x10>)
  401228:	4798      	blx	r3
  40122a:	bd08      	pop	{r3, pc}
  40122c:	400e1200 	.word	0x400e1200
  401230:	004011a9 	.word	0x004011a9

00401234 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401234:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401236:	2110      	movs	r1, #16
  401238:	4801      	ldr	r0, [pc, #4]	; (401240 <PIOD_Handler+0xc>)
  40123a:	4b02      	ldr	r3, [pc, #8]	; (401244 <PIOD_Handler+0x10>)
  40123c:	4798      	blx	r3
  40123e:	bd08      	pop	{r3, pc}
  401240:	400e1400 	.word	0x400e1400
  401244:	004011a9 	.word	0x004011a9

00401248 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401248:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40124a:	2111      	movs	r1, #17
  40124c:	4801      	ldr	r0, [pc, #4]	; (401254 <PIOE_Handler+0xc>)
  40124e:	4b02      	ldr	r3, [pc, #8]	; (401258 <PIOE_Handler+0x10>)
  401250:	4798      	blx	r3
  401252:	bd08      	pop	{r3, pc}
  401254:	400e1600 	.word	0x400e1600
  401258:	004011a9 	.word	0x004011a9

0040125c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40125c:	2803      	cmp	r0, #3
  40125e:	d011      	beq.n	401284 <pmc_mck_set_division+0x28>
  401260:	2804      	cmp	r0, #4
  401262:	d012      	beq.n	40128a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401264:	2802      	cmp	r0, #2
  401266:	bf0c      	ite	eq
  401268:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40126c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40126e:	4a08      	ldr	r2, [pc, #32]	; (401290 <pmc_mck_set_division+0x34>)
  401270:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401276:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401278:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40127a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40127c:	f013 0f08 	tst.w	r3, #8
  401280:	d0fb      	beq.n	40127a <pmc_mck_set_division+0x1e>
}
  401282:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401284:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401288:	e7f1      	b.n	40126e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40128a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40128e:	e7ee      	b.n	40126e <pmc_mck_set_division+0x12>
  401290:	400e0600 	.word	0x400e0600

00401294 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401294:	4a17      	ldr	r2, [pc, #92]	; (4012f4 <pmc_switch_mck_to_pllack+0x60>)
  401296:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40129c:	4318      	orrs	r0, r3
  40129e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012a2:	f013 0f08 	tst.w	r3, #8
  4012a6:	d10a      	bne.n	4012be <pmc_switch_mck_to_pllack+0x2a>
  4012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4012ac:	4911      	ldr	r1, [pc, #68]	; (4012f4 <pmc_switch_mck_to_pllack+0x60>)
  4012ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012b0:	f012 0f08 	tst.w	r2, #8
  4012b4:	d103      	bne.n	4012be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012b6:	3b01      	subs	r3, #1
  4012b8:	d1f9      	bne.n	4012ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4012ba:	2001      	movs	r0, #1
  4012bc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4012be:	4a0d      	ldr	r2, [pc, #52]	; (4012f4 <pmc_switch_mck_to_pllack+0x60>)
  4012c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012c2:	f023 0303 	bic.w	r3, r3, #3
  4012c6:	f043 0302 	orr.w	r3, r3, #2
  4012ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ce:	f013 0f08 	tst.w	r3, #8
  4012d2:	d10a      	bne.n	4012ea <pmc_switch_mck_to_pllack+0x56>
  4012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4012d8:	4906      	ldr	r1, [pc, #24]	; (4012f4 <pmc_switch_mck_to_pllack+0x60>)
  4012da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012dc:	f012 0f08 	tst.w	r2, #8
  4012e0:	d105      	bne.n	4012ee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012e2:	3b01      	subs	r3, #1
  4012e4:	d1f9      	bne.n	4012da <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4012e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4012e8:	4770      	bx	lr
	return 0;
  4012ea:	2000      	movs	r0, #0
  4012ec:	4770      	bx	lr
  4012ee:	2000      	movs	r0, #0
  4012f0:	4770      	bx	lr
  4012f2:	bf00      	nop
  4012f4:	400e0600 	.word	0x400e0600

004012f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012f8:	b9a0      	cbnz	r0, 401324 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012fa:	480e      	ldr	r0, [pc, #56]	; (401334 <pmc_switch_mainck_to_xtal+0x3c>)
  4012fc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4012fe:	0209      	lsls	r1, r1, #8
  401300:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401302:	4a0d      	ldr	r2, [pc, #52]	; (401338 <pmc_switch_mainck_to_xtal+0x40>)
  401304:	401a      	ands	r2, r3
  401306:	4b0d      	ldr	r3, [pc, #52]	; (40133c <pmc_switch_mainck_to_xtal+0x44>)
  401308:	4313      	orrs	r3, r2
  40130a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40130c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40130e:	4602      	mov	r2, r0
  401310:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401312:	f013 0f01 	tst.w	r3, #1
  401316:	d0fb      	beq.n	401310 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401318:	4a06      	ldr	r2, [pc, #24]	; (401334 <pmc_switch_mainck_to_xtal+0x3c>)
  40131a:	6a11      	ldr	r1, [r2, #32]
  40131c:	4b08      	ldr	r3, [pc, #32]	; (401340 <pmc_switch_mainck_to_xtal+0x48>)
  40131e:	430b      	orrs	r3, r1
  401320:	6213      	str	r3, [r2, #32]
  401322:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401324:	4903      	ldr	r1, [pc, #12]	; (401334 <pmc_switch_mainck_to_xtal+0x3c>)
  401326:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401328:	4a06      	ldr	r2, [pc, #24]	; (401344 <pmc_switch_mainck_to_xtal+0x4c>)
  40132a:	401a      	ands	r2, r3
  40132c:	4b06      	ldr	r3, [pc, #24]	; (401348 <pmc_switch_mainck_to_xtal+0x50>)
  40132e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401330:	620b      	str	r3, [r1, #32]
  401332:	4770      	bx	lr
  401334:	400e0600 	.word	0x400e0600
  401338:	ffc8fffc 	.word	0xffc8fffc
  40133c:	00370001 	.word	0x00370001
  401340:	01370000 	.word	0x01370000
  401344:	fec8fffc 	.word	0xfec8fffc
  401348:	01370002 	.word	0x01370002

0040134c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40134c:	4b02      	ldr	r3, [pc, #8]	; (401358 <pmc_osc_is_ready_mainck+0xc>)
  40134e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401350:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401354:	4770      	bx	lr
  401356:	bf00      	nop
  401358:	400e0600 	.word	0x400e0600

0040135c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40135c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401360:	4b01      	ldr	r3, [pc, #4]	; (401368 <pmc_disable_pllack+0xc>)
  401362:	629a      	str	r2, [r3, #40]	; 0x28
  401364:	4770      	bx	lr
  401366:	bf00      	nop
  401368:	400e0600 	.word	0x400e0600

0040136c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40136c:	4b02      	ldr	r3, [pc, #8]	; (401378 <pmc_is_locked_pllack+0xc>)
  40136e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401370:	f000 0002 	and.w	r0, r0, #2
  401374:	4770      	bx	lr
  401376:	bf00      	nop
  401378:	400e0600 	.word	0x400e0600

0040137c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40137c:	283f      	cmp	r0, #63	; 0x3f
  40137e:	d81e      	bhi.n	4013be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401380:	281f      	cmp	r0, #31
  401382:	d80c      	bhi.n	40139e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401384:	4b11      	ldr	r3, [pc, #68]	; (4013cc <pmc_enable_periph_clk+0x50>)
  401386:	699a      	ldr	r2, [r3, #24]
  401388:	2301      	movs	r3, #1
  40138a:	4083      	lsls	r3, r0
  40138c:	4393      	bics	r3, r2
  40138e:	d018      	beq.n	4013c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401390:	2301      	movs	r3, #1
  401392:	fa03 f000 	lsl.w	r0, r3, r0
  401396:	4b0d      	ldr	r3, [pc, #52]	; (4013cc <pmc_enable_periph_clk+0x50>)
  401398:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40139a:	2000      	movs	r0, #0
  40139c:	4770      	bx	lr
		ul_id -= 32;
  40139e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4013a0:	4b0a      	ldr	r3, [pc, #40]	; (4013cc <pmc_enable_periph_clk+0x50>)
  4013a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4013a6:	2301      	movs	r3, #1
  4013a8:	4083      	lsls	r3, r0
  4013aa:	4393      	bics	r3, r2
  4013ac:	d00b      	beq.n	4013c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4013ae:	2301      	movs	r3, #1
  4013b0:	fa03 f000 	lsl.w	r0, r3, r0
  4013b4:	4b05      	ldr	r3, [pc, #20]	; (4013cc <pmc_enable_periph_clk+0x50>)
  4013b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4013ba:	2000      	movs	r0, #0
  4013bc:	4770      	bx	lr
		return 1;
  4013be:	2001      	movs	r0, #1
  4013c0:	4770      	bx	lr
	return 0;
  4013c2:	2000      	movs	r0, #0
  4013c4:	4770      	bx	lr
  4013c6:	2000      	movs	r0, #0
}
  4013c8:	4770      	bx	lr
  4013ca:	bf00      	nop
  4013cc:	400e0600 	.word	0x400e0600

004013d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013d0:	e7fe      	b.n	4013d0 <Dummy_Handler>
	...

004013d4 <Reset_Handler>:
{
  4013d4:	b500      	push	{lr}
  4013d6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4013d8:	4b25      	ldr	r3, [pc, #148]	; (401470 <Reset_Handler+0x9c>)
  4013da:	4a26      	ldr	r2, [pc, #152]	; (401474 <Reset_Handler+0xa0>)
  4013dc:	429a      	cmp	r2, r3
  4013de:	d010      	beq.n	401402 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4013e0:	4b25      	ldr	r3, [pc, #148]	; (401478 <Reset_Handler+0xa4>)
  4013e2:	4a23      	ldr	r2, [pc, #140]	; (401470 <Reset_Handler+0x9c>)
  4013e4:	429a      	cmp	r2, r3
  4013e6:	d20c      	bcs.n	401402 <Reset_Handler+0x2e>
  4013e8:	3b01      	subs	r3, #1
  4013ea:	1a9b      	subs	r3, r3, r2
  4013ec:	f023 0303 	bic.w	r3, r3, #3
  4013f0:	3304      	adds	r3, #4
  4013f2:	4413      	add	r3, r2
  4013f4:	491f      	ldr	r1, [pc, #124]	; (401474 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4013f6:	f851 0b04 	ldr.w	r0, [r1], #4
  4013fa:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4013fe:	429a      	cmp	r2, r3
  401400:	d1f9      	bne.n	4013f6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401402:	4b1e      	ldr	r3, [pc, #120]	; (40147c <Reset_Handler+0xa8>)
  401404:	4a1e      	ldr	r2, [pc, #120]	; (401480 <Reset_Handler+0xac>)
  401406:	429a      	cmp	r2, r3
  401408:	d20a      	bcs.n	401420 <Reset_Handler+0x4c>
  40140a:	3b01      	subs	r3, #1
  40140c:	1a9b      	subs	r3, r3, r2
  40140e:	f023 0303 	bic.w	r3, r3, #3
  401412:	3304      	adds	r3, #4
  401414:	4413      	add	r3, r2
                *pDest++ = 0;
  401416:	2100      	movs	r1, #0
  401418:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40141c:	4293      	cmp	r3, r2
  40141e:	d1fb      	bne.n	401418 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401420:	4a18      	ldr	r2, [pc, #96]	; (401484 <Reset_Handler+0xb0>)
  401422:	4b19      	ldr	r3, [pc, #100]	; (401488 <Reset_Handler+0xb4>)
  401424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401428:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40142a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40142e:	fab3 f383 	clz	r3, r3
  401432:	095b      	lsrs	r3, r3, #5
  401434:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401436:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401438:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40143c:	2200      	movs	r2, #0
  40143e:	4b13      	ldr	r3, [pc, #76]	; (40148c <Reset_Handler+0xb8>)
  401440:	701a      	strb	r2, [r3, #0]
	return flags;
  401442:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401444:	4a12      	ldr	r2, [pc, #72]	; (401490 <Reset_Handler+0xbc>)
  401446:	6813      	ldr	r3, [r2, #0]
  401448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40144c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40144e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401452:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401456:	b129      	cbz	r1, 401464 <Reset_Handler+0x90>
		cpu_irq_enable();
  401458:	2201      	movs	r2, #1
  40145a:	4b0c      	ldr	r3, [pc, #48]	; (40148c <Reset_Handler+0xb8>)
  40145c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40145e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401462:	b662      	cpsie	i
        __libc_init_array();
  401464:	4b0b      	ldr	r3, [pc, #44]	; (401494 <Reset_Handler+0xc0>)
  401466:	4798      	blx	r3
        main();
  401468:	4b0b      	ldr	r3, [pc, #44]	; (401498 <Reset_Handler+0xc4>)
  40146a:	4798      	blx	r3
  40146c:	e7fe      	b.n	40146c <Reset_Handler+0x98>
  40146e:	bf00      	nop
  401470:	20400000 	.word	0x20400000
  401474:	00402a80 	.word	0x00402a80
  401478:	2040044c 	.word	0x2040044c
  40147c:	20400708 	.word	0x20400708
  401480:	2040044c 	.word	0x2040044c
  401484:	e000ed00 	.word	0xe000ed00
  401488:	00400000 	.word	0x00400000
  40148c:	20400018 	.word	0x20400018
  401490:	e000ed88 	.word	0xe000ed88
  401494:	00401e75 	.word	0x00401e75
  401498:	004019c1 	.word	0x004019c1

0040149c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40149c:	4b3b      	ldr	r3, [pc, #236]	; (40158c <SystemCoreClockUpdate+0xf0>)
  40149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014a0:	f003 0303 	and.w	r3, r3, #3
  4014a4:	2b01      	cmp	r3, #1
  4014a6:	d01d      	beq.n	4014e4 <SystemCoreClockUpdate+0x48>
  4014a8:	b183      	cbz	r3, 4014cc <SystemCoreClockUpdate+0x30>
  4014aa:	2b02      	cmp	r3, #2
  4014ac:	d036      	beq.n	40151c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4014ae:	4b37      	ldr	r3, [pc, #220]	; (40158c <SystemCoreClockUpdate+0xf0>)
  4014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014b6:	2b70      	cmp	r3, #112	; 0x70
  4014b8:	d05f      	beq.n	40157a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4014ba:	4b34      	ldr	r3, [pc, #208]	; (40158c <SystemCoreClockUpdate+0xf0>)
  4014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014be:	4934      	ldr	r1, [pc, #208]	; (401590 <SystemCoreClockUpdate+0xf4>)
  4014c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4014c4:	680b      	ldr	r3, [r1, #0]
  4014c6:	40d3      	lsrs	r3, r2
  4014c8:	600b      	str	r3, [r1, #0]
  4014ca:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4014cc:	4b31      	ldr	r3, [pc, #196]	; (401594 <SystemCoreClockUpdate+0xf8>)
  4014ce:	695b      	ldr	r3, [r3, #20]
  4014d0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4014d4:	bf14      	ite	ne
  4014d6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4014da:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4014de:	4b2c      	ldr	r3, [pc, #176]	; (401590 <SystemCoreClockUpdate+0xf4>)
  4014e0:	601a      	str	r2, [r3, #0]
  4014e2:	e7e4      	b.n	4014ae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014e4:	4b29      	ldr	r3, [pc, #164]	; (40158c <SystemCoreClockUpdate+0xf0>)
  4014e6:	6a1b      	ldr	r3, [r3, #32]
  4014e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014ec:	d003      	beq.n	4014f6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4014ee:	4a2a      	ldr	r2, [pc, #168]	; (401598 <SystemCoreClockUpdate+0xfc>)
  4014f0:	4b27      	ldr	r3, [pc, #156]	; (401590 <SystemCoreClockUpdate+0xf4>)
  4014f2:	601a      	str	r2, [r3, #0]
  4014f4:	e7db      	b.n	4014ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014f6:	4a29      	ldr	r2, [pc, #164]	; (40159c <SystemCoreClockUpdate+0x100>)
  4014f8:	4b25      	ldr	r3, [pc, #148]	; (401590 <SystemCoreClockUpdate+0xf4>)
  4014fa:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4014fc:	4b23      	ldr	r3, [pc, #140]	; (40158c <SystemCoreClockUpdate+0xf0>)
  4014fe:	6a1b      	ldr	r3, [r3, #32]
  401500:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401504:	2b10      	cmp	r3, #16
  401506:	d005      	beq.n	401514 <SystemCoreClockUpdate+0x78>
  401508:	2b20      	cmp	r3, #32
  40150a:	d1d0      	bne.n	4014ae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40150c:	4a22      	ldr	r2, [pc, #136]	; (401598 <SystemCoreClockUpdate+0xfc>)
  40150e:	4b20      	ldr	r3, [pc, #128]	; (401590 <SystemCoreClockUpdate+0xf4>)
  401510:	601a      	str	r2, [r3, #0]
          break;
  401512:	e7cc      	b.n	4014ae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401514:	4a22      	ldr	r2, [pc, #136]	; (4015a0 <SystemCoreClockUpdate+0x104>)
  401516:	4b1e      	ldr	r3, [pc, #120]	; (401590 <SystemCoreClockUpdate+0xf4>)
  401518:	601a      	str	r2, [r3, #0]
          break;
  40151a:	e7c8      	b.n	4014ae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40151c:	4b1b      	ldr	r3, [pc, #108]	; (40158c <SystemCoreClockUpdate+0xf0>)
  40151e:	6a1b      	ldr	r3, [r3, #32]
  401520:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401524:	d016      	beq.n	401554 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401526:	4a1c      	ldr	r2, [pc, #112]	; (401598 <SystemCoreClockUpdate+0xfc>)
  401528:	4b19      	ldr	r3, [pc, #100]	; (401590 <SystemCoreClockUpdate+0xf4>)
  40152a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40152c:	4b17      	ldr	r3, [pc, #92]	; (40158c <SystemCoreClockUpdate+0xf0>)
  40152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401530:	f003 0303 	and.w	r3, r3, #3
  401534:	2b02      	cmp	r3, #2
  401536:	d1ba      	bne.n	4014ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401538:	4a14      	ldr	r2, [pc, #80]	; (40158c <SystemCoreClockUpdate+0xf0>)
  40153a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40153c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40153e:	4814      	ldr	r0, [pc, #80]	; (401590 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401540:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401544:	6803      	ldr	r3, [r0, #0]
  401546:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40154a:	b2d2      	uxtb	r2, r2
  40154c:	fbb3 f3f2 	udiv	r3, r3, r2
  401550:	6003      	str	r3, [r0, #0]
  401552:	e7ac      	b.n	4014ae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401554:	4a11      	ldr	r2, [pc, #68]	; (40159c <SystemCoreClockUpdate+0x100>)
  401556:	4b0e      	ldr	r3, [pc, #56]	; (401590 <SystemCoreClockUpdate+0xf4>)
  401558:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40155a:	4b0c      	ldr	r3, [pc, #48]	; (40158c <SystemCoreClockUpdate+0xf0>)
  40155c:	6a1b      	ldr	r3, [r3, #32]
  40155e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401562:	2b10      	cmp	r3, #16
  401564:	d005      	beq.n	401572 <SystemCoreClockUpdate+0xd6>
  401566:	2b20      	cmp	r3, #32
  401568:	d1e0      	bne.n	40152c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40156a:	4a0b      	ldr	r2, [pc, #44]	; (401598 <SystemCoreClockUpdate+0xfc>)
  40156c:	4b08      	ldr	r3, [pc, #32]	; (401590 <SystemCoreClockUpdate+0xf4>)
  40156e:	601a      	str	r2, [r3, #0]
          break;
  401570:	e7dc      	b.n	40152c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401572:	4a0b      	ldr	r2, [pc, #44]	; (4015a0 <SystemCoreClockUpdate+0x104>)
  401574:	4b06      	ldr	r3, [pc, #24]	; (401590 <SystemCoreClockUpdate+0xf4>)
  401576:	601a      	str	r2, [r3, #0]
          break;
  401578:	e7d8      	b.n	40152c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40157a:	4a05      	ldr	r2, [pc, #20]	; (401590 <SystemCoreClockUpdate+0xf4>)
  40157c:	6813      	ldr	r3, [r2, #0]
  40157e:	4909      	ldr	r1, [pc, #36]	; (4015a4 <SystemCoreClockUpdate+0x108>)
  401580:	fba1 1303 	umull	r1, r3, r1, r3
  401584:	085b      	lsrs	r3, r3, #1
  401586:	6013      	str	r3, [r2, #0]
  401588:	4770      	bx	lr
  40158a:	bf00      	nop
  40158c:	400e0600 	.word	0x400e0600
  401590:	2040001c 	.word	0x2040001c
  401594:	400e1810 	.word	0x400e1810
  401598:	00b71b00 	.word	0x00b71b00
  40159c:	003d0900 	.word	0x003d0900
  4015a0:	007a1200 	.word	0x007a1200
  4015a4:	aaaaaaab 	.word	0xaaaaaaab

004015a8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015a8:	4b16      	ldr	r3, [pc, #88]	; (401604 <system_init_flash+0x5c>)
  4015aa:	4298      	cmp	r0, r3
  4015ac:	d913      	bls.n	4015d6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4015ae:	4b16      	ldr	r3, [pc, #88]	; (401608 <system_init_flash+0x60>)
  4015b0:	4298      	cmp	r0, r3
  4015b2:	d915      	bls.n	4015e0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4015b4:	4b15      	ldr	r3, [pc, #84]	; (40160c <system_init_flash+0x64>)
  4015b6:	4298      	cmp	r0, r3
  4015b8:	d916      	bls.n	4015e8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4015ba:	4b15      	ldr	r3, [pc, #84]	; (401610 <system_init_flash+0x68>)
  4015bc:	4298      	cmp	r0, r3
  4015be:	d917      	bls.n	4015f0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4015c0:	4b14      	ldr	r3, [pc, #80]	; (401614 <system_init_flash+0x6c>)
  4015c2:	4298      	cmp	r0, r3
  4015c4:	d918      	bls.n	4015f8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4015c6:	4b14      	ldr	r3, [pc, #80]	; (401618 <system_init_flash+0x70>)
  4015c8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4015ca:	bf94      	ite	ls
  4015cc:	4a13      	ldrls	r2, [pc, #76]	; (40161c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4015ce:	4a14      	ldrhi	r2, [pc, #80]	; (401620 <system_init_flash+0x78>)
  4015d0:	4b14      	ldr	r3, [pc, #80]	; (401624 <system_init_flash+0x7c>)
  4015d2:	601a      	str	r2, [r3, #0]
  4015d4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4015d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4015da:	4b12      	ldr	r3, [pc, #72]	; (401624 <system_init_flash+0x7c>)
  4015dc:	601a      	str	r2, [r3, #0]
  4015de:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4015e0:	4a11      	ldr	r2, [pc, #68]	; (401628 <system_init_flash+0x80>)
  4015e2:	4b10      	ldr	r3, [pc, #64]	; (401624 <system_init_flash+0x7c>)
  4015e4:	601a      	str	r2, [r3, #0]
  4015e6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4015e8:	4a10      	ldr	r2, [pc, #64]	; (40162c <system_init_flash+0x84>)
  4015ea:	4b0e      	ldr	r3, [pc, #56]	; (401624 <system_init_flash+0x7c>)
  4015ec:	601a      	str	r2, [r3, #0]
  4015ee:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4015f0:	4a0f      	ldr	r2, [pc, #60]	; (401630 <system_init_flash+0x88>)
  4015f2:	4b0c      	ldr	r3, [pc, #48]	; (401624 <system_init_flash+0x7c>)
  4015f4:	601a      	str	r2, [r3, #0]
  4015f6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4015f8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4015fc:	4b09      	ldr	r3, [pc, #36]	; (401624 <system_init_flash+0x7c>)
  4015fe:	601a      	str	r2, [r3, #0]
  401600:	4770      	bx	lr
  401602:	bf00      	nop
  401604:	015ef3bf 	.word	0x015ef3bf
  401608:	02bde77f 	.word	0x02bde77f
  40160c:	041cdb3f 	.word	0x041cdb3f
  401610:	057bceff 	.word	0x057bceff
  401614:	06dac2bf 	.word	0x06dac2bf
  401618:	0839b67f 	.word	0x0839b67f
  40161c:	04000500 	.word	0x04000500
  401620:	04000600 	.word	0x04000600
  401624:	400e0c00 	.word	0x400e0c00
  401628:	04000100 	.word	0x04000100
  40162c:	04000200 	.word	0x04000200
  401630:	04000300 	.word	0x04000300

00401634 <pisca_led>:
  uint32_t minute;
  uint32_t seccond;
} calendar;


void pisca_led(int n, int t, char led){
  401634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401638:	4606      	mov	r6, r0
  40163a:	460d      	mov	r5, r1

	switch (led) {
  40163c:	2a01      	cmp	r2, #1
  40163e:	d020      	beq.n	401682 <pisca_led+0x4e>
  401640:	2a02      	cmp	r2, #2
  401642:	d16f      	bne.n	401724 <pisca_led+0xf0>
    			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
    			delay_ms(t);
				}
			break;
		case 2:
			for (int i=0;i<n;i++){
  401644:	2800      	cmp	r0, #0
  401646:	dd1a      	ble.n	40167e <pisca_led+0x4a>
    			pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
	    		delay_ms(t);
  401648:	4c37      	ldr	r4, [pc, #220]	; (401728 <pisca_led+0xf4>)
  40164a:	fba1 0104 	umull	r0, r1, r1, r4
  40164e:	17eb      	asrs	r3, r5, #31
  401650:	fb04 1103 	mla	r1, r4, r3, r1
  401654:	f241 722c 	movw	r2, #5932	; 0x172c
  401658:	2300      	movs	r3, #0
  40165a:	f241 782b 	movw	r8, #5931	; 0x172b
  40165e:	f04f 0900 	mov.w	r9, #0
  401662:	eb10 0008 	adds.w	r0, r0, r8
  401666:	eb41 0109 	adc.w	r1, r1, r9
  40166a:	4c30      	ldr	r4, [pc, #192]	; (40172c <pisca_led+0xf8>)
  40166c:	47a0      	blx	r4
  40166e:	4682      	mov	sl, r0
  401670:	2400      	movs	r4, #0
    			pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401672:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401738 <pisca_led+0x104>
  401676:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 40173c <pisca_led+0x108>
	    		delay_ms(t);
  40167a:	4f2d      	ldr	r7, [pc, #180]	; (401730 <pisca_led+0xfc>)
  40167c:	e044      	b.n	401708 <pisca_led+0xd4>
  40167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			for (int i=0;i<n;i++){
  401682:	2800      	cmp	r0, #0
  401684:	dd4e      	ble.n	401724 <pisca_led+0xf0>
	    		delay_ms(t);
  401686:	4c28      	ldr	r4, [pc, #160]	; (401728 <pisca_led+0xf4>)
  401688:	fba1 0104 	umull	r0, r1, r1, r4
  40168c:	17eb      	asrs	r3, r5, #31
  40168e:	fb04 1103 	mla	r1, r4, r3, r1
  401692:	f241 722c 	movw	r2, #5932	; 0x172c
  401696:	2300      	movs	r3, #0
  401698:	f241 782b 	movw	r8, #5931	; 0x172b
  40169c:	f04f 0900 	mov.w	r9, #0
  4016a0:	eb10 0008 	adds.w	r0, r0, r8
  4016a4:	eb41 0109 	adc.w	r1, r1, r9
  4016a8:	4c20      	ldr	r4, [pc, #128]	; (40172c <pisca_led+0xf8>)
  4016aa:	47a0      	blx	r4
  4016ac:	4682      	mov	sl, r0
  4016ae:	2400      	movs	r4, #0
    			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4016b0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401740 <pisca_led+0x10c>
  4016b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40173c <pisca_led+0x108>
	    		delay_ms(t);
  4016b8:	4f1d      	ldr	r7, [pc, #116]	; (401730 <pisca_led+0xfc>)
  4016ba:	e00a      	b.n	4016d2 <pisca_led+0x9e>
  4016bc:	2033      	movs	r0, #51	; 0x33
  4016be:	47b8      	blx	r7
    			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4016c0:	2101      	movs	r1, #1
  4016c2:	4640      	mov	r0, r8
  4016c4:	4b1b      	ldr	r3, [pc, #108]	; (401734 <pisca_led+0x100>)
  4016c6:	4798      	blx	r3
    			delay_ms(t);
  4016c8:	2033      	movs	r0, #51	; 0x33
  4016ca:	47b8      	blx	r7
			for (int i=0;i<n;i++){
  4016cc:	3401      	adds	r4, #1
  4016ce:	42a6      	cmp	r6, r4
  4016d0:	d00d      	beq.n	4016ee <pisca_led+0xba>
    			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4016d2:	2101      	movs	r1, #1
  4016d4:	4640      	mov	r0, r8
  4016d6:	47c8      	blx	r9
	    		delay_ms(t);
  4016d8:	2d00      	cmp	r5, #0
  4016da:	d0ef      	beq.n	4016bc <pisca_led+0x88>
  4016dc:	4650      	mov	r0, sl
  4016de:	47b8      	blx	r7
    			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4016e0:	2101      	movs	r1, #1
  4016e2:	4640      	mov	r0, r8
  4016e4:	4b13      	ldr	r3, [pc, #76]	; (401734 <pisca_led+0x100>)
  4016e6:	4798      	blx	r3
    			delay_ms(t);
  4016e8:	4650      	mov	r0, sl
  4016ea:	47b8      	blx	r7
  4016ec:	e7ee      	b.n	4016cc <pisca_led+0x98>
  4016ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    		delay_ms(t);
  4016f2:	2033      	movs	r0, #51	; 0x33
  4016f4:	47b8      	blx	r7
    			pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4016f6:	2104      	movs	r1, #4
  4016f8:	4640      	mov	r0, r8
  4016fa:	4b0e      	ldr	r3, [pc, #56]	; (401734 <pisca_led+0x100>)
  4016fc:	4798      	blx	r3
    			delay_ms(t);
  4016fe:	2033      	movs	r0, #51	; 0x33
  401700:	47b8      	blx	r7
			for (int i=0;i<n;i++){
  401702:	3401      	adds	r4, #1
  401704:	42a6      	cmp	r6, r4
  401706:	d00d      	beq.n	401724 <pisca_led+0xf0>
    			pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401708:	2104      	movs	r1, #4
  40170a:	4640      	mov	r0, r8
  40170c:	47c8      	blx	r9
	    		delay_ms(t);
  40170e:	2d00      	cmp	r5, #0
  401710:	d0ef      	beq.n	4016f2 <pisca_led+0xbe>
  401712:	4650      	mov	r0, sl
  401714:	47b8      	blx	r7
    			pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401716:	2104      	movs	r1, #4
  401718:	4640      	mov	r0, r8
  40171a:	4b06      	ldr	r3, [pc, #24]	; (401734 <pisca_led+0x100>)
  40171c:	4798      	blx	r3
    			delay_ms(t);
  40171e:	4650      	mov	r0, sl
  401720:	47b8      	blx	r7
  401722:	e7ee      	b.n	401702 <pisca_led+0xce>
  401724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401728:	11e1a300 	.word	0x11e1a300
  40172c:	00401b65 	.word	0x00401b65
  401730:	20400001 	.word	0x20400001
  401734:	0040100d 	.word	0x0040100d
  401738:	400e1000 	.word	0x400e1000
  40173c:	00401011 	.word	0x00401011
  401740:	400e0e00 	.word	0x400e0e00

00401744 <pin_toggle>:
				}
		default:
			break;
		}
}
void pin_toggle(Pio *pio, uint32_t mask){
  401744:	b538      	push	{r3, r4, r5, lr}
  401746:	4604      	mov	r4, r0
  401748:	460d      	mov	r5, r1
  if(pio_get_output_data_status(pio, mask))
  40174a:	4b06      	ldr	r3, [pc, #24]	; (401764 <pin_toggle+0x20>)
  40174c:	4798      	blx	r3
  40174e:	b920      	cbnz	r0, 40175a <pin_toggle+0x16>
    pio_clear(pio, mask);
  else
    pio_set(pio,mask);
  401750:	4629      	mov	r1, r5
  401752:	4620      	mov	r0, r4
  401754:	4b04      	ldr	r3, [pc, #16]	; (401768 <pin_toggle+0x24>)
  401756:	4798      	blx	r3
  401758:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  40175a:	4629      	mov	r1, r5
  40175c:	4620      	mov	r0, r4
  40175e:	4b03      	ldr	r3, [pc, #12]	; (40176c <pin_toggle+0x28>)
  401760:	4798      	blx	r3
  401762:	bd38      	pop	{r3, r4, r5, pc}
  401764:	00401195 	.word	0x00401195
  401768:	0040100d 	.word	0x0040100d
  40176c:	00401011 	.word	0x00401011

00401770 <LED_init>:
}
void LED_init(int estado){
  401770:	b5f0      	push	{r4, r5, r6, r7, lr}
  401772:	b083      	sub	sp, #12
  401774:	4606      	mov	r6, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  401776:	200a      	movs	r0, #10
  401778:	4f0e      	ldr	r7, [pc, #56]	; (4017b4 <LED_init+0x44>)
  40177a:	47b8      	blx	r7
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0 );
  40177c:	2400      	movs	r4, #0
  40177e:	9400      	str	r4, [sp, #0]
  401780:	4623      	mov	r3, r4
  401782:	4632      	mov	r2, r6
  401784:	2101      	movs	r1, #1
  401786:	480c      	ldr	r0, [pc, #48]	; (4017b8 <LED_init+0x48>)
  401788:	4d0c      	ldr	r5, [pc, #48]	; (4017bc <LED_init+0x4c>)
  40178a:	47a8      	blx	r5

	pmc_enable_periph_clk(LED2_PIO_ID);
  40178c:	200c      	movs	r0, #12
  40178e:	47b8      	blx	r7
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, estado, 0, 0 );
  401790:	9400      	str	r4, [sp, #0]
  401792:	4623      	mov	r3, r4
  401794:	4632      	mov	r2, r6
  401796:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40179a:	4809      	ldr	r0, [pc, #36]	; (4017c0 <LED_init+0x50>)
  40179c:	47a8      	blx	r5
	
	pmc_enable_periph_clk(LED3_PIO_ID);
  40179e:	200b      	movs	r0, #11
  4017a0:	47b8      	blx	r7
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, estado, 0, 0 );
  4017a2:	9400      	str	r4, [sp, #0]
  4017a4:	4623      	mov	r3, r4
  4017a6:	4632      	mov	r2, r6
  4017a8:	2104      	movs	r1, #4
  4017aa:	4806      	ldr	r0, [pc, #24]	; (4017c4 <LED_init+0x54>)
  4017ac:	47a8      	blx	r5
};
  4017ae:	b003      	add	sp, #12
  4017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017b2:	bf00      	nop
  4017b4:	0040137d 	.word	0x0040137d
  4017b8:	400e0e00 	.word	0x400e0e00
  4017bc:	004010dd 	.word	0x004010dd
  4017c0:	400e1200 	.word	0x400e1200
  4017c4:	400e1000 	.word	0x400e1000

004017c8 <TC1_Handler>:

void TC1_Handler(void){
  4017c8:	b500      	push	{lr}
  4017ca:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  4017cc:	2101      	movs	r1, #1
  4017ce:	4805      	ldr	r0, [pc, #20]	; (4017e4 <TC1_Handler+0x1c>)
  4017d0:	4b05      	ldr	r3, [pc, #20]	; (4017e8 <TC1_Handler+0x20>)
  4017d2:	4798      	blx	r3
  4017d4:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4017d6:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	flag_tc = 1;
  4017d8:	2201      	movs	r2, #1
  4017da:	4b04      	ldr	r3, [pc, #16]	; (4017ec <TC1_Handler+0x24>)
  4017dc:	701a      	strb	r2, [r3, #0]
}
  4017de:	b003      	add	sp, #12
  4017e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4017e4:	4000c000 	.word	0x4000c000
  4017e8:	0040064d 	.word	0x0040064d
  4017ec:	204006e2 	.word	0x204006e2

004017f0 <TC_init>:

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4017f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4017f4:	b085      	sub	sp, #20
  4017f6:	4606      	mov	r6, r0
  4017f8:	460c      	mov	r4, r1
  4017fa:	4617      	mov	r7, r2
  4017fc:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  4017fe:	4608      	mov	r0, r1
  401800:	4b18      	ldr	r3, [pc, #96]	; (401864 <TC_init+0x74>)
  401802:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401804:	4d18      	ldr	r5, [pc, #96]	; (401868 <TC_init+0x78>)
  401806:	9500      	str	r5, [sp, #0]
  401808:	ab02      	add	r3, sp, #8
  40180a:	aa03      	add	r2, sp, #12
  40180c:	4629      	mov	r1, r5
  40180e:	4640      	mov	r0, r8
  401810:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401880 <TC_init+0x90>
  401814:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401816:	9a02      	ldr	r2, [sp, #8]
  401818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40181c:	4639      	mov	r1, r7
  40181e:	4630      	mov	r0, r6
  401820:	4b12      	ldr	r3, [pc, #72]	; (40186c <TC_init+0x7c>)
  401822:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401824:	9a03      	ldr	r2, [sp, #12]
  401826:	fbb5 f2f2 	udiv	r2, r5, r2
  40182a:	fbb2 f2f8 	udiv	r2, r2, r8
  40182e:	4639      	mov	r1, r7
  401830:	4630      	mov	r0, r6
  401832:	4b0f      	ldr	r3, [pc, #60]	; (401870 <TC_init+0x80>)
  401834:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401836:	b263      	sxtb	r3, r4
  401838:	095b      	lsrs	r3, r3, #5
  40183a:	f004 041f 	and.w	r4, r4, #31
  40183e:	2201      	movs	r2, #1
  401840:	fa02 f404 	lsl.w	r4, r2, r4
  401844:	4a0b      	ldr	r2, [pc, #44]	; (401874 <TC_init+0x84>)
  401846:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrupçcão no TC canal 0 */
	/* Interrupção no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  40184a:	2210      	movs	r2, #16
  40184c:	4639      	mov	r1, r7
  40184e:	4630      	mov	r0, r6
  401850:	4b09      	ldr	r3, [pc, #36]	; (401878 <TC_init+0x88>)
  401852:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  401854:	4639      	mov	r1, r7
  401856:	4630      	mov	r0, r6
  401858:	4b08      	ldr	r3, [pc, #32]	; (40187c <TC_init+0x8c>)
  40185a:	4798      	blx	r3
}
  40185c:	b005      	add	sp, #20
  40185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401862:	bf00      	nop
  401864:	0040137d 	.word	0x0040137d
  401868:	11e1a300 	.word	0x11e1a300
  40186c:	0040061b 	.word	0x0040061b
  401870:	0040063d 	.word	0x0040063d
  401874:	e000e100 	.word	0xe000e100
  401878:	00400645 	.word	0x00400645
  40187c:	00400635 	.word	0x00400635
  401880:	00400655 	.word	0x00400655

00401884 <RTC_Handler>:

void RTC_Handler(void)
{
  401884:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  401886:	4813      	ldr	r0, [pc, #76]	; (4018d4 <RTC_Handler+0x50>)
  401888:	4b13      	ldr	r3, [pc, #76]	; (4018d8 <RTC_Handler+0x54>)
  40188a:	4798      	blx	r3
  40188c:	4604      	mov	r4, r0
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  40188e:	f010 0f04 	tst.w	r0, #4
  401892:	d111      	bne.n	4018b8 <RTC_Handler+0x34>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401894:	f014 0f02 	tst.w	r4, #2
  401898:	d113      	bne.n	4018c2 <RTC_Handler+0x3e>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
      flag_rtc = 1;
	}
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40189a:	4d0e      	ldr	r5, [pc, #56]	; (4018d4 <RTC_Handler+0x50>)
  40189c:	2101      	movs	r1, #1
  40189e:	4628      	mov	r0, r5
  4018a0:	4c0e      	ldr	r4, [pc, #56]	; (4018dc <RTC_Handler+0x58>)
  4018a2:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4018a4:	2108      	movs	r1, #8
  4018a6:	4628      	mov	r0, r5
  4018a8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4018aa:	2110      	movs	r1, #16
  4018ac:	4628      	mov	r0, r5
  4018ae:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  4018b0:	2120      	movs	r1, #32
  4018b2:	4628      	mov	r0, r5
  4018b4:	47a0      	blx	r4
  4018b6:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  4018b8:	2104      	movs	r1, #4
  4018ba:	4806      	ldr	r0, [pc, #24]	; (4018d4 <RTC_Handler+0x50>)
  4018bc:	4b07      	ldr	r3, [pc, #28]	; (4018dc <RTC_Handler+0x58>)
  4018be:	4798      	blx	r3
  4018c0:	e7e8      	b.n	401894 <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  4018c2:	2102      	movs	r1, #2
  4018c4:	4803      	ldr	r0, [pc, #12]	; (4018d4 <RTC_Handler+0x50>)
  4018c6:	4b05      	ldr	r3, [pc, #20]	; (4018dc <RTC_Handler+0x58>)
  4018c8:	4798      	blx	r3
      flag_rtc = 1;
  4018ca:	2201      	movs	r2, #1
  4018cc:	4b04      	ldr	r3, [pc, #16]	; (4018e0 <RTC_Handler+0x5c>)
  4018ce:	701a      	strb	r2, [r3, #0]
  4018d0:	e7e3      	b.n	40189a <RTC_Handler+0x16>
  4018d2:	bf00      	nop
  4018d4:	400e1860 	.word	0x400e1860
  4018d8:	00400405 	.word	0x00400405
  4018dc:	00400409 	.word	0x00400409
  4018e0:	204006e1 	.word	0x204006e1

004018e4 <RTC_init>:
}

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  4018e4:	b082      	sub	sp, #8
  4018e6:	b570      	push	{r4, r5, r6, lr}
  4018e8:	b082      	sub	sp, #8
  4018ea:	4605      	mov	r5, r0
  4018ec:	460c      	mov	r4, r1
  4018ee:	a906      	add	r1, sp, #24
  4018f0:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  4018f4:	2002      	movs	r0, #2
  4018f6:	4b1d      	ldr	r3, [pc, #116]	; (40196c <RTC_init+0x88>)
  4018f8:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  4018fa:	2100      	movs	r1, #0
  4018fc:	4628      	mov	r0, r5
  4018fe:	4b1c      	ldr	r3, [pc, #112]	; (401970 <RTC_init+0x8c>)
  401900:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401904:	9300      	str	r3, [sp, #0]
  401906:	9b08      	ldr	r3, [sp, #32]
  401908:	9a07      	ldr	r2, [sp, #28]
  40190a:	9906      	ldr	r1, [sp, #24]
  40190c:	4628      	mov	r0, r5
  40190e:	4e19      	ldr	r6, [pc, #100]	; (401974 <RTC_init+0x90>)
  401910:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  401912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401916:	990a      	ldr	r1, [sp, #40]	; 0x28
  401918:	4628      	mov	r0, r5
  40191a:	4e17      	ldr	r6, [pc, #92]	; (401978 <RTC_init+0x94>)
  40191c:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  40191e:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401920:	b2e4      	uxtb	r4, r4
  401922:	f004 011f 	and.w	r1, r4, #31
  401926:	2301      	movs	r3, #1
  401928:	408b      	lsls	r3, r1
  40192a:	0956      	lsrs	r6, r2, #5
  40192c:	4813      	ldr	r0, [pc, #76]	; (40197c <RTC_init+0x98>)
  40192e:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401932:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401936:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  40193a:	2a00      	cmp	r2, #0
  40193c:	db0f      	blt.n	40195e <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40193e:	490f      	ldr	r1, [pc, #60]	; (40197c <RTC_init+0x98>)
  401940:	4411      	add	r1, r2
  401942:	2200      	movs	r2, #0
  401944:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401948:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 0);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  40194c:	990d      	ldr	r1, [sp, #52]	; 0x34
  40194e:	4628      	mov	r0, r5
  401950:	4b0b      	ldr	r3, [pc, #44]	; (401980 <RTC_init+0x9c>)
  401952:	4798      	blx	r3
}
  401954:	b002      	add	sp, #8
  401956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40195a:	b002      	add	sp, #8
  40195c:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40195e:	f004 040f 	and.w	r4, r4, #15
  401962:	4a08      	ldr	r2, [pc, #32]	; (401984 <RTC_init+0xa0>)
  401964:	2100      	movs	r1, #0
  401966:	5511      	strb	r1, [r2, r4]
  401968:	e7ee      	b.n	401948 <RTC_init+0x64>
  40196a:	bf00      	nop
  40196c:	0040137d 	.word	0x0040137d
  401970:	004001ad 	.word	0x004001ad
  401974:	004002ed 	.word	0x004002ed
  401978:	004001c9 	.word	0x004001c9
  40197c:	e000e100 	.word	0xe000e100
  401980:	004001c3 	.word	0x004001c3
  401984:	e000ed14 	.word	0xe000ed14

00401988 <RTT_Handler>:
  NVIC_SetPriority(RTT_IRQn, 0);
  NVIC_EnableIRQ(RTT_IRQn);
  rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
}
void RTT_Handler(void)
{
  401988:	b508      	push	{r3, lr}
  uint32_t ul_status;

  /* Get RTT status - ACK */
  ul_status = rtt_get_status(RTT);
  40198a:	4808      	ldr	r0, [pc, #32]	; (4019ac <RTT_Handler+0x24>)
  40198c:	4b08      	ldr	r3, [pc, #32]	; (4019b0 <RTT_Handler+0x28>)
  40198e:	4798      	blx	r3

  /* IRQ due to Time has changed */
  if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

  /* IRQ due to Alarm */
  if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401990:	f010 0f01 	tst.w	r0, #1
  401994:	d100      	bne.n	401998 <RTT_Handler+0x10>
  401996:	bd08      	pop	{r3, pc}
      pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
  401998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40199c:	4805      	ldr	r0, [pc, #20]	; (4019b4 <RTT_Handler+0x2c>)
  40199e:	4b06      	ldr	r3, [pc, #24]	; (4019b8 <RTT_Handler+0x30>)
  4019a0:	4798      	blx	r3
      f_rtt_alarme = true;                  // flag RTT alarme
  4019a2:	2201      	movs	r2, #1
  4019a4:	4b05      	ldr	r3, [pc, #20]	; (4019bc <RTT_Handler+0x34>)
  4019a6:	701a      	strb	r2, [r3, #0]
   }  
}
  4019a8:	e7f5      	b.n	401996 <RTT_Handler+0xe>
  4019aa:	bf00      	nop
  4019ac:	400e1830 	.word	0x400e1830
  4019b0:	00400489 	.word	0x00400489
  4019b4:	400e1200 	.word	0x400e1200
  4019b8:	00401745 	.word	0x00401745
  4019bc:	204006e0 	.word	0x204006e0

004019c0 <main>:



int main (void)
{
  4019c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019c4:	b08f      	sub	sp, #60	; 0x3c
	board_init();
  4019c6:	4b4c      	ldr	r3, [pc, #304]	; (401af8 <main+0x138>)
  4019c8:	4798      	blx	r3
	sysclk_init();
  4019ca:	4b4c      	ldr	r3, [pc, #304]	; (401afc <main+0x13c>)
  4019cc:	4798      	blx	r3
	delay_init();
	LED_init(1);
  4019ce:	2001      	movs	r0, #1
  4019d0:	4b4b      	ldr	r3, [pc, #300]	; (401b00 <main+0x140>)
  4019d2:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  4019d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4019d8:	4b4a      	ldr	r3, [pc, #296]	; (401b04 <main+0x144>)
  4019da:	605a      	str	r2, [r3, #4]

	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  4019dc:	ac07      	add	r4, sp, #28
  4019de:	4d4a      	ldr	r5, [pc, #296]	; (401b08 <main+0x148>)
  4019e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4019e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4019e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4019e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  4019ec:	4e47      	ldr	r6, [pc, #284]	; (401b0c <main+0x14c>)
  4019ee:	2702      	movs	r7, #2
  4019f0:	9705      	str	r7, [sp, #20]
  4019f2:	466c      	mov	r4, sp
  4019f4:	ad09      	add	r5, sp, #36	; 0x24
  4019f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4019f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4019fa:	682b      	ldr	r3, [r5, #0]
  4019fc:	6023      	str	r3, [r4, #0]
  4019fe:	ab07      	add	r3, sp, #28
  401a00:	cb0c      	ldmia	r3, {r2, r3}
  401a02:	4639      	mov	r1, r7
  401a04:	4630      	mov	r0, r6
  401a06:	4c42      	ldr	r4, [pc, #264]	; (401b10 <main+0x150>)
  401a08:	47a0      	blx	r4
  

  // Init OLED
	gfx_mono_ssd1306_init();
  401a0a:	4b42      	ldr	r3, [pc, #264]	; (401b14 <main+0x154>)
  401a0c:	4798      	blx	r3
  	gfx_mono_draw_filled_circle(20, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
  401a0e:	23ff      	movs	r3, #255	; 0xff
  401a10:	9300      	str	r3, [sp, #0]
  401a12:	2301      	movs	r3, #1
  401a14:	2210      	movs	r2, #16
  401a16:	4611      	mov	r1, r2
  401a18:	2014      	movs	r0, #20
  401a1a:	4c3f      	ldr	r4, [pc, #252]	; (401b18 <main+0x158>)
  401a1c:	47a0      	blx	r4
  	gfx_mono_draw_string("mundo", 50,16, &sysfont);
  401a1e:	4b3f      	ldr	r3, [pc, #252]	; (401b1c <main+0x15c>)
  401a20:	2210      	movs	r2, #16
  401a22:	2132      	movs	r1, #50	; 0x32
  401a24:	483e      	ldr	r0, [pc, #248]	; (401b20 <main+0x160>)
  401a26:	4c3f      	ldr	r4, [pc, #252]	; (401b24 <main+0x164>)
  401a28:	47a0      	blx	r4

	f_rtt_alarme = true;
  401a2a:	2401      	movs	r4, #1
  401a2c:	4b3e      	ldr	r3, [pc, #248]	; (401b28 <main+0x168>)
  401a2e:	701c      	strb	r4, [r3, #0]
  

	rtc_set_date_alarm(RTC, 1, rtc_initial.month, 1, rtc_initial.day);
  401a30:	2313      	movs	r3, #19
  401a32:	9300      	str	r3, [sp, #0]
  401a34:	4623      	mov	r3, r4
  401a36:	2203      	movs	r2, #3
  401a38:	4621      	mov	r1, r4
  401a3a:	4630      	mov	r0, r6
  401a3c:	4d3b      	ldr	r5, [pc, #236]	; (401b2c <main+0x16c>)
  401a3e:	47a8      	blx	r5
	rtc_set_time_alarm(RTC, 1, rtc_initial.hour, 1, rtc_initial.minute, 1, rtc_initial.seccond + 20);
  401a40:	2315      	movs	r3, #21
  401a42:	9302      	str	r3, [sp, #8]
  401a44:	9401      	str	r4, [sp, #4]
  401a46:	232d      	movs	r3, #45	; 0x2d
  401a48:	9300      	str	r3, [sp, #0]
  401a4a:	4623      	mov	r3, r4
  401a4c:	220f      	movs	r2, #15
  401a4e:	4621      	mov	r1, r4
  401a50:	4630      	mov	r0, r6
  401a52:	4d37      	ldr	r5, [pc, #220]	; (401b30 <main+0x170>)
  401a54:	47a8      	blx	r5

	TC_init(TC0, ID_TC1, 1, 4);
  401a56:	2304      	movs	r3, #4
  401a58:	4622      	mov	r2, r4
  401a5a:	2118      	movs	r1, #24
  401a5c:	4835      	ldr	r0, [pc, #212]	; (401b34 <main+0x174>)
  401a5e:	4c36      	ldr	r4, [pc, #216]	; (401b38 <main+0x178>)
  401a60:	47a0      	blx	r4


  /* Insert application code here, after the board has been initialized. */
	while (1) {
		/* Entrar em modo sleep */
    if(flag_rtc){
  401a62:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 401b5c <main+0x19c>
		pisca_led(5, 200,1);
  401a66:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 401b60 <main+0x1a0>
      	flag_rtc = 0;
    }
	if (f_rtt_alarme){
  401a6a:	4f2f      	ldr	r7, [pc, #188]	; (401b28 <main+0x168>)
  rtt_sel_source(RTT, false);
  401a6c:	4c33      	ldr	r4, [pc, #204]	; (401b3c <main+0x17c>)
  401a6e:	e00b      	b.n	401a88 <main+0xc8>
		pisca_led(5, 200,1);
  401a70:	2201      	movs	r2, #1
  401a72:	21c8      	movs	r1, #200	; 0xc8
  401a74:	2005      	movs	r0, #5
  401a76:	47c8      	blx	r9
      	flag_rtc = 0;
  401a78:	2300      	movs	r3, #0
  401a7a:	f888 3000 	strb.w	r3, [r8]
  401a7e:	e007      	b.n	401a90 <main+0xd0>
      // reinicia RTT para gerar um novo IRQ
      RTT_init(pllPreScale, irqRTTvalue);         
      
      f_rtt_alarme = false;
    }
    if(flag_tc){
  401a80:	4b2f      	ldr	r3, [pc, #188]	; (401b40 <main+0x180>)
  401a82:	781b      	ldrb	r3, [r3, #0]
  401a84:	2b00      	cmp	r3, #0
  401a86:	d12e      	bne.n	401ae6 <main+0x126>
    if(flag_rtc){
  401a88:	f898 3000 	ldrb.w	r3, [r8]
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	d1ef      	bne.n	401a70 <main+0xb0>
	if (f_rtt_alarme){
  401a90:	783b      	ldrb	r3, [r7, #0]
  401a92:	2b00      	cmp	r3, #0
  401a94:	d0f4      	beq.n	401a80 <main+0xc0>
  rtt_sel_source(RTT, false);
  401a96:	2100      	movs	r1, #0
  401a98:	4620      	mov	r0, r4
  401a9a:	4b2a      	ldr	r3, [pc, #168]	; (401b44 <main+0x184>)
  401a9c:	4798      	blx	r3
  rtt_init(RTT, pllPreScale);
  401a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401aa2:	4620      	mov	r0, r4
  401aa4:	4b28      	ldr	r3, [pc, #160]	; (401b48 <main+0x188>)
  401aa6:	4798      	blx	r3
  ul_previous_time = rtt_read_timer_value(RTT);
  401aa8:	4620      	mov	r0, r4
  401aaa:	4b28      	ldr	r3, [pc, #160]	; (401b4c <main+0x18c>)
  401aac:	4798      	blx	r3
  401aae:	4605      	mov	r5, r0
  while (ul_previous_time == rtt_read_timer_value(RTT));
  401ab0:	4e26      	ldr	r6, [pc, #152]	; (401b4c <main+0x18c>)
  401ab2:	4620      	mov	r0, r4
  401ab4:	47b0      	blx	r6
  401ab6:	4285      	cmp	r5, r0
  401ab8:	d0fb      	beq.n	401ab2 <main+0xf2>
  rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401aba:	f105 0108 	add.w	r1, r5, #8
  401abe:	4620      	mov	r0, r4
  401ac0:	4b23      	ldr	r3, [pc, #140]	; (401b50 <main+0x190>)
  401ac2:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401ac4:	4b23      	ldr	r3, [pc, #140]	; (401b54 <main+0x194>)
  401ac6:	2208      	movs	r2, #8
  401ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401acc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ad0:	2500      	movs	r5, #0
  401ad2:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ad6:	601a      	str	r2, [r3, #0]
  rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401ad8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401adc:	4620      	mov	r0, r4
  401ade:	4b1e      	ldr	r3, [pc, #120]	; (401b58 <main+0x198>)
  401ae0:	4798      	blx	r3
      f_rtt_alarme = false;
  401ae2:	703d      	strb	r5, [r7, #0]
  401ae4:	e7cc      	b.n	401a80 <main+0xc0>
		pisca_led(1,10,2);
  401ae6:	2202      	movs	r2, #2
  401ae8:	210a      	movs	r1, #10
  401aea:	2001      	movs	r0, #1
  401aec:	47c8      	blx	r9
		flag_tc = 0;
  401aee:	2200      	movs	r2, #0
  401af0:	4b13      	ldr	r3, [pc, #76]	; (401b40 <main+0x180>)
  401af2:	701a      	strb	r2, [r3, #0]
  401af4:	e7c8      	b.n	401a88 <main+0xc8>
  401af6:	bf00      	nop
  401af8:	00400ecd 	.word	0x00400ecd
  401afc:	00400e5d 	.word	0x00400e5d
  401b00:	00401771 	.word	0x00401771
  401b04:	400e1850 	.word	0x400e1850
  401b08:	00402a2c 	.word	0x00402a2c
  401b0c:	400e1860 	.word	0x400e1860
  401b10:	004018e5 	.word	0x004018e5
  401b14:	00400af9 	.word	0x00400af9
  401b18:	00400899 	.word	0x00400899
  401b1c:	2040000c 	.word	0x2040000c
  401b20:	00402a48 	.word	0x00402a48
  401b24:	00400a61 	.word	0x00400a61
  401b28:	204006e0 	.word	0x204006e0
  401b2c:	004003a5 	.word	0x004003a5
  401b30:	00400259 	.word	0x00400259
  401b34:	4000c000 	.word	0x4000c000
  401b38:	004017f1 	.word	0x004017f1
  401b3c:	400e1830 	.word	0x400e1830
  401b40:	204006e2 	.word	0x204006e2
  401b44:	00400421 	.word	0x00400421
  401b48:	0040040d 	.word	0x0040040d
  401b4c:	00400475 	.word	0x00400475
  401b50:	0040048d 	.word	0x0040048d
  401b54:	e000e100 	.word	0xe000e100
  401b58:	0040044d 	.word	0x0040044d
  401b5c:	204006e1 	.word	0x204006e1
  401b60:	00401635 	.word	0x00401635

00401b64 <__aeabi_uldivmod>:
  401b64:	b953      	cbnz	r3, 401b7c <__aeabi_uldivmod+0x18>
  401b66:	b94a      	cbnz	r2, 401b7c <__aeabi_uldivmod+0x18>
  401b68:	2900      	cmp	r1, #0
  401b6a:	bf08      	it	eq
  401b6c:	2800      	cmpeq	r0, #0
  401b6e:	bf1c      	itt	ne
  401b70:	f04f 31ff 	movne.w	r1, #4294967295
  401b74:	f04f 30ff 	movne.w	r0, #4294967295
  401b78:	f000 b97a 	b.w	401e70 <__aeabi_idiv0>
  401b7c:	f1ad 0c08 	sub.w	ip, sp, #8
  401b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401b84:	f000 f806 	bl	401b94 <__udivmoddi4>
  401b88:	f8dd e004 	ldr.w	lr, [sp, #4]
  401b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401b90:	b004      	add	sp, #16
  401b92:	4770      	bx	lr

00401b94 <__udivmoddi4>:
  401b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b98:	468c      	mov	ip, r1
  401b9a:	460d      	mov	r5, r1
  401b9c:	4604      	mov	r4, r0
  401b9e:	9e08      	ldr	r6, [sp, #32]
  401ba0:	2b00      	cmp	r3, #0
  401ba2:	d151      	bne.n	401c48 <__udivmoddi4+0xb4>
  401ba4:	428a      	cmp	r2, r1
  401ba6:	4617      	mov	r7, r2
  401ba8:	d96d      	bls.n	401c86 <__udivmoddi4+0xf2>
  401baa:	fab2 fe82 	clz	lr, r2
  401bae:	f1be 0f00 	cmp.w	lr, #0
  401bb2:	d00b      	beq.n	401bcc <__udivmoddi4+0x38>
  401bb4:	f1ce 0c20 	rsb	ip, lr, #32
  401bb8:	fa01 f50e 	lsl.w	r5, r1, lr
  401bbc:	fa20 fc0c 	lsr.w	ip, r0, ip
  401bc0:	fa02 f70e 	lsl.w	r7, r2, lr
  401bc4:	ea4c 0c05 	orr.w	ip, ip, r5
  401bc8:	fa00 f40e 	lsl.w	r4, r0, lr
  401bcc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401bd0:	0c25      	lsrs	r5, r4, #16
  401bd2:	fbbc f8fa 	udiv	r8, ip, sl
  401bd6:	fa1f f987 	uxth.w	r9, r7
  401bda:	fb0a cc18 	mls	ip, sl, r8, ip
  401bde:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401be2:	fb08 f309 	mul.w	r3, r8, r9
  401be6:	42ab      	cmp	r3, r5
  401be8:	d90a      	bls.n	401c00 <__udivmoddi4+0x6c>
  401bea:	19ed      	adds	r5, r5, r7
  401bec:	f108 32ff 	add.w	r2, r8, #4294967295
  401bf0:	f080 8123 	bcs.w	401e3a <__udivmoddi4+0x2a6>
  401bf4:	42ab      	cmp	r3, r5
  401bf6:	f240 8120 	bls.w	401e3a <__udivmoddi4+0x2a6>
  401bfa:	f1a8 0802 	sub.w	r8, r8, #2
  401bfe:	443d      	add	r5, r7
  401c00:	1aed      	subs	r5, r5, r3
  401c02:	b2a4      	uxth	r4, r4
  401c04:	fbb5 f0fa 	udiv	r0, r5, sl
  401c08:	fb0a 5510 	mls	r5, sl, r0, r5
  401c0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401c10:	fb00 f909 	mul.w	r9, r0, r9
  401c14:	45a1      	cmp	r9, r4
  401c16:	d909      	bls.n	401c2c <__udivmoddi4+0x98>
  401c18:	19e4      	adds	r4, r4, r7
  401c1a:	f100 33ff 	add.w	r3, r0, #4294967295
  401c1e:	f080 810a 	bcs.w	401e36 <__udivmoddi4+0x2a2>
  401c22:	45a1      	cmp	r9, r4
  401c24:	f240 8107 	bls.w	401e36 <__udivmoddi4+0x2a2>
  401c28:	3802      	subs	r0, #2
  401c2a:	443c      	add	r4, r7
  401c2c:	eba4 0409 	sub.w	r4, r4, r9
  401c30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401c34:	2100      	movs	r1, #0
  401c36:	2e00      	cmp	r6, #0
  401c38:	d061      	beq.n	401cfe <__udivmoddi4+0x16a>
  401c3a:	fa24 f40e 	lsr.w	r4, r4, lr
  401c3e:	2300      	movs	r3, #0
  401c40:	6034      	str	r4, [r6, #0]
  401c42:	6073      	str	r3, [r6, #4]
  401c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c48:	428b      	cmp	r3, r1
  401c4a:	d907      	bls.n	401c5c <__udivmoddi4+0xc8>
  401c4c:	2e00      	cmp	r6, #0
  401c4e:	d054      	beq.n	401cfa <__udivmoddi4+0x166>
  401c50:	2100      	movs	r1, #0
  401c52:	e886 0021 	stmia.w	r6, {r0, r5}
  401c56:	4608      	mov	r0, r1
  401c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c5c:	fab3 f183 	clz	r1, r3
  401c60:	2900      	cmp	r1, #0
  401c62:	f040 808e 	bne.w	401d82 <__udivmoddi4+0x1ee>
  401c66:	42ab      	cmp	r3, r5
  401c68:	d302      	bcc.n	401c70 <__udivmoddi4+0xdc>
  401c6a:	4282      	cmp	r2, r0
  401c6c:	f200 80fa 	bhi.w	401e64 <__udivmoddi4+0x2d0>
  401c70:	1a84      	subs	r4, r0, r2
  401c72:	eb65 0503 	sbc.w	r5, r5, r3
  401c76:	2001      	movs	r0, #1
  401c78:	46ac      	mov	ip, r5
  401c7a:	2e00      	cmp	r6, #0
  401c7c:	d03f      	beq.n	401cfe <__udivmoddi4+0x16a>
  401c7e:	e886 1010 	stmia.w	r6, {r4, ip}
  401c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c86:	b912      	cbnz	r2, 401c8e <__udivmoddi4+0xfa>
  401c88:	2701      	movs	r7, #1
  401c8a:	fbb7 f7f2 	udiv	r7, r7, r2
  401c8e:	fab7 fe87 	clz	lr, r7
  401c92:	f1be 0f00 	cmp.w	lr, #0
  401c96:	d134      	bne.n	401d02 <__udivmoddi4+0x16e>
  401c98:	1beb      	subs	r3, r5, r7
  401c9a:	0c3a      	lsrs	r2, r7, #16
  401c9c:	fa1f fc87 	uxth.w	ip, r7
  401ca0:	2101      	movs	r1, #1
  401ca2:	fbb3 f8f2 	udiv	r8, r3, r2
  401ca6:	0c25      	lsrs	r5, r4, #16
  401ca8:	fb02 3318 	mls	r3, r2, r8, r3
  401cac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401cb0:	fb0c f308 	mul.w	r3, ip, r8
  401cb4:	42ab      	cmp	r3, r5
  401cb6:	d907      	bls.n	401cc8 <__udivmoddi4+0x134>
  401cb8:	19ed      	adds	r5, r5, r7
  401cba:	f108 30ff 	add.w	r0, r8, #4294967295
  401cbe:	d202      	bcs.n	401cc6 <__udivmoddi4+0x132>
  401cc0:	42ab      	cmp	r3, r5
  401cc2:	f200 80d1 	bhi.w	401e68 <__udivmoddi4+0x2d4>
  401cc6:	4680      	mov	r8, r0
  401cc8:	1aed      	subs	r5, r5, r3
  401cca:	b2a3      	uxth	r3, r4
  401ccc:	fbb5 f0f2 	udiv	r0, r5, r2
  401cd0:	fb02 5510 	mls	r5, r2, r0, r5
  401cd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401cd8:	fb0c fc00 	mul.w	ip, ip, r0
  401cdc:	45a4      	cmp	ip, r4
  401cde:	d907      	bls.n	401cf0 <__udivmoddi4+0x15c>
  401ce0:	19e4      	adds	r4, r4, r7
  401ce2:	f100 33ff 	add.w	r3, r0, #4294967295
  401ce6:	d202      	bcs.n	401cee <__udivmoddi4+0x15a>
  401ce8:	45a4      	cmp	ip, r4
  401cea:	f200 80b8 	bhi.w	401e5e <__udivmoddi4+0x2ca>
  401cee:	4618      	mov	r0, r3
  401cf0:	eba4 040c 	sub.w	r4, r4, ip
  401cf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401cf8:	e79d      	b.n	401c36 <__udivmoddi4+0xa2>
  401cfa:	4631      	mov	r1, r6
  401cfc:	4630      	mov	r0, r6
  401cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d02:	f1ce 0420 	rsb	r4, lr, #32
  401d06:	fa05 f30e 	lsl.w	r3, r5, lr
  401d0a:	fa07 f70e 	lsl.w	r7, r7, lr
  401d0e:	fa20 f804 	lsr.w	r8, r0, r4
  401d12:	0c3a      	lsrs	r2, r7, #16
  401d14:	fa25 f404 	lsr.w	r4, r5, r4
  401d18:	ea48 0803 	orr.w	r8, r8, r3
  401d1c:	fbb4 f1f2 	udiv	r1, r4, r2
  401d20:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401d24:	fb02 4411 	mls	r4, r2, r1, r4
  401d28:	fa1f fc87 	uxth.w	ip, r7
  401d2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401d30:	fb01 f30c 	mul.w	r3, r1, ip
  401d34:	42ab      	cmp	r3, r5
  401d36:	fa00 f40e 	lsl.w	r4, r0, lr
  401d3a:	d909      	bls.n	401d50 <__udivmoddi4+0x1bc>
  401d3c:	19ed      	adds	r5, r5, r7
  401d3e:	f101 30ff 	add.w	r0, r1, #4294967295
  401d42:	f080 808a 	bcs.w	401e5a <__udivmoddi4+0x2c6>
  401d46:	42ab      	cmp	r3, r5
  401d48:	f240 8087 	bls.w	401e5a <__udivmoddi4+0x2c6>
  401d4c:	3902      	subs	r1, #2
  401d4e:	443d      	add	r5, r7
  401d50:	1aeb      	subs	r3, r5, r3
  401d52:	fa1f f588 	uxth.w	r5, r8
  401d56:	fbb3 f0f2 	udiv	r0, r3, r2
  401d5a:	fb02 3310 	mls	r3, r2, r0, r3
  401d5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401d62:	fb00 f30c 	mul.w	r3, r0, ip
  401d66:	42ab      	cmp	r3, r5
  401d68:	d907      	bls.n	401d7a <__udivmoddi4+0x1e6>
  401d6a:	19ed      	adds	r5, r5, r7
  401d6c:	f100 38ff 	add.w	r8, r0, #4294967295
  401d70:	d26f      	bcs.n	401e52 <__udivmoddi4+0x2be>
  401d72:	42ab      	cmp	r3, r5
  401d74:	d96d      	bls.n	401e52 <__udivmoddi4+0x2be>
  401d76:	3802      	subs	r0, #2
  401d78:	443d      	add	r5, r7
  401d7a:	1aeb      	subs	r3, r5, r3
  401d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401d80:	e78f      	b.n	401ca2 <__udivmoddi4+0x10e>
  401d82:	f1c1 0720 	rsb	r7, r1, #32
  401d86:	fa22 f807 	lsr.w	r8, r2, r7
  401d8a:	408b      	lsls	r3, r1
  401d8c:	fa05 f401 	lsl.w	r4, r5, r1
  401d90:	ea48 0303 	orr.w	r3, r8, r3
  401d94:	fa20 fe07 	lsr.w	lr, r0, r7
  401d98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401d9c:	40fd      	lsrs	r5, r7
  401d9e:	ea4e 0e04 	orr.w	lr, lr, r4
  401da2:	fbb5 f9fc 	udiv	r9, r5, ip
  401da6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401daa:	fb0c 5519 	mls	r5, ip, r9, r5
  401dae:	fa1f f883 	uxth.w	r8, r3
  401db2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401db6:	fb09 f408 	mul.w	r4, r9, r8
  401dba:	42ac      	cmp	r4, r5
  401dbc:	fa02 f201 	lsl.w	r2, r2, r1
  401dc0:	fa00 fa01 	lsl.w	sl, r0, r1
  401dc4:	d908      	bls.n	401dd8 <__udivmoddi4+0x244>
  401dc6:	18ed      	adds	r5, r5, r3
  401dc8:	f109 30ff 	add.w	r0, r9, #4294967295
  401dcc:	d243      	bcs.n	401e56 <__udivmoddi4+0x2c2>
  401dce:	42ac      	cmp	r4, r5
  401dd0:	d941      	bls.n	401e56 <__udivmoddi4+0x2c2>
  401dd2:	f1a9 0902 	sub.w	r9, r9, #2
  401dd6:	441d      	add	r5, r3
  401dd8:	1b2d      	subs	r5, r5, r4
  401dda:	fa1f fe8e 	uxth.w	lr, lr
  401dde:	fbb5 f0fc 	udiv	r0, r5, ip
  401de2:	fb0c 5510 	mls	r5, ip, r0, r5
  401de6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401dea:	fb00 f808 	mul.w	r8, r0, r8
  401dee:	45a0      	cmp	r8, r4
  401df0:	d907      	bls.n	401e02 <__udivmoddi4+0x26e>
  401df2:	18e4      	adds	r4, r4, r3
  401df4:	f100 35ff 	add.w	r5, r0, #4294967295
  401df8:	d229      	bcs.n	401e4e <__udivmoddi4+0x2ba>
  401dfa:	45a0      	cmp	r8, r4
  401dfc:	d927      	bls.n	401e4e <__udivmoddi4+0x2ba>
  401dfe:	3802      	subs	r0, #2
  401e00:	441c      	add	r4, r3
  401e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401e06:	eba4 0408 	sub.w	r4, r4, r8
  401e0a:	fba0 8902 	umull	r8, r9, r0, r2
  401e0e:	454c      	cmp	r4, r9
  401e10:	46c6      	mov	lr, r8
  401e12:	464d      	mov	r5, r9
  401e14:	d315      	bcc.n	401e42 <__udivmoddi4+0x2ae>
  401e16:	d012      	beq.n	401e3e <__udivmoddi4+0x2aa>
  401e18:	b156      	cbz	r6, 401e30 <__udivmoddi4+0x29c>
  401e1a:	ebba 030e 	subs.w	r3, sl, lr
  401e1e:	eb64 0405 	sbc.w	r4, r4, r5
  401e22:	fa04 f707 	lsl.w	r7, r4, r7
  401e26:	40cb      	lsrs	r3, r1
  401e28:	431f      	orrs	r7, r3
  401e2a:	40cc      	lsrs	r4, r1
  401e2c:	6037      	str	r7, [r6, #0]
  401e2e:	6074      	str	r4, [r6, #4]
  401e30:	2100      	movs	r1, #0
  401e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e36:	4618      	mov	r0, r3
  401e38:	e6f8      	b.n	401c2c <__udivmoddi4+0x98>
  401e3a:	4690      	mov	r8, r2
  401e3c:	e6e0      	b.n	401c00 <__udivmoddi4+0x6c>
  401e3e:	45c2      	cmp	sl, r8
  401e40:	d2ea      	bcs.n	401e18 <__udivmoddi4+0x284>
  401e42:	ebb8 0e02 	subs.w	lr, r8, r2
  401e46:	eb69 0503 	sbc.w	r5, r9, r3
  401e4a:	3801      	subs	r0, #1
  401e4c:	e7e4      	b.n	401e18 <__udivmoddi4+0x284>
  401e4e:	4628      	mov	r0, r5
  401e50:	e7d7      	b.n	401e02 <__udivmoddi4+0x26e>
  401e52:	4640      	mov	r0, r8
  401e54:	e791      	b.n	401d7a <__udivmoddi4+0x1e6>
  401e56:	4681      	mov	r9, r0
  401e58:	e7be      	b.n	401dd8 <__udivmoddi4+0x244>
  401e5a:	4601      	mov	r1, r0
  401e5c:	e778      	b.n	401d50 <__udivmoddi4+0x1bc>
  401e5e:	3802      	subs	r0, #2
  401e60:	443c      	add	r4, r7
  401e62:	e745      	b.n	401cf0 <__udivmoddi4+0x15c>
  401e64:	4608      	mov	r0, r1
  401e66:	e708      	b.n	401c7a <__udivmoddi4+0xe6>
  401e68:	f1a8 0802 	sub.w	r8, r8, #2
  401e6c:	443d      	add	r5, r7
  401e6e:	e72b      	b.n	401cc8 <__udivmoddi4+0x134>

00401e70 <__aeabi_idiv0>:
  401e70:	4770      	bx	lr
  401e72:	bf00      	nop

00401e74 <__libc_init_array>:
  401e74:	b570      	push	{r4, r5, r6, lr}
  401e76:	4e0f      	ldr	r6, [pc, #60]	; (401eb4 <__libc_init_array+0x40>)
  401e78:	4d0f      	ldr	r5, [pc, #60]	; (401eb8 <__libc_init_array+0x44>)
  401e7a:	1b76      	subs	r6, r6, r5
  401e7c:	10b6      	asrs	r6, r6, #2
  401e7e:	bf18      	it	ne
  401e80:	2400      	movne	r4, #0
  401e82:	d005      	beq.n	401e90 <__libc_init_array+0x1c>
  401e84:	3401      	adds	r4, #1
  401e86:	f855 3b04 	ldr.w	r3, [r5], #4
  401e8a:	4798      	blx	r3
  401e8c:	42a6      	cmp	r6, r4
  401e8e:	d1f9      	bne.n	401e84 <__libc_init_array+0x10>
  401e90:	4e0a      	ldr	r6, [pc, #40]	; (401ebc <__libc_init_array+0x48>)
  401e92:	4d0b      	ldr	r5, [pc, #44]	; (401ec0 <__libc_init_array+0x4c>)
  401e94:	1b76      	subs	r6, r6, r5
  401e96:	f000 fddd 	bl	402a54 <_init>
  401e9a:	10b6      	asrs	r6, r6, #2
  401e9c:	bf18      	it	ne
  401e9e:	2400      	movne	r4, #0
  401ea0:	d006      	beq.n	401eb0 <__libc_init_array+0x3c>
  401ea2:	3401      	adds	r4, #1
  401ea4:	f855 3b04 	ldr.w	r3, [r5], #4
  401ea8:	4798      	blx	r3
  401eaa:	42a6      	cmp	r6, r4
  401eac:	d1f9      	bne.n	401ea2 <__libc_init_array+0x2e>
  401eae:	bd70      	pop	{r4, r5, r6, pc}
  401eb0:	bd70      	pop	{r4, r5, r6, pc}
  401eb2:	bf00      	nop
  401eb4:	00402a60 	.word	0x00402a60
  401eb8:	00402a60 	.word	0x00402a60
  401ebc:	00402a68 	.word	0x00402a68
  401ec0:	00402a60 	.word	0x00402a60

00401ec4 <register_fini>:
  401ec4:	4b02      	ldr	r3, [pc, #8]	; (401ed0 <register_fini+0xc>)
  401ec6:	b113      	cbz	r3, 401ece <register_fini+0xa>
  401ec8:	4802      	ldr	r0, [pc, #8]	; (401ed4 <register_fini+0x10>)
  401eca:	f000 b805 	b.w	401ed8 <atexit>
  401ece:	4770      	bx	lr
  401ed0:	00000000 	.word	0x00000000
  401ed4:	00401ee5 	.word	0x00401ee5

00401ed8 <atexit>:
  401ed8:	2300      	movs	r3, #0
  401eda:	4601      	mov	r1, r0
  401edc:	461a      	mov	r2, r3
  401ede:	4618      	mov	r0, r3
  401ee0:	f000 b81e 	b.w	401f20 <__register_exitproc>

00401ee4 <__libc_fini_array>:
  401ee4:	b538      	push	{r3, r4, r5, lr}
  401ee6:	4c0a      	ldr	r4, [pc, #40]	; (401f10 <__libc_fini_array+0x2c>)
  401ee8:	4d0a      	ldr	r5, [pc, #40]	; (401f14 <__libc_fini_array+0x30>)
  401eea:	1b64      	subs	r4, r4, r5
  401eec:	10a4      	asrs	r4, r4, #2
  401eee:	d00a      	beq.n	401f06 <__libc_fini_array+0x22>
  401ef0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401ef4:	3b01      	subs	r3, #1
  401ef6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401efa:	3c01      	subs	r4, #1
  401efc:	f855 3904 	ldr.w	r3, [r5], #-4
  401f00:	4798      	blx	r3
  401f02:	2c00      	cmp	r4, #0
  401f04:	d1f9      	bne.n	401efa <__libc_fini_array+0x16>
  401f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401f0a:	f000 bdad 	b.w	402a68 <_fini>
  401f0e:	bf00      	nop
  401f10:	00402a78 	.word	0x00402a78
  401f14:	00402a74 	.word	0x00402a74

00401f18 <__retarget_lock_acquire_recursive>:
  401f18:	4770      	bx	lr
  401f1a:	bf00      	nop

00401f1c <__retarget_lock_release_recursive>:
  401f1c:	4770      	bx	lr
  401f1e:	bf00      	nop

00401f20 <__register_exitproc>:
  401f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f24:	4d2c      	ldr	r5, [pc, #176]	; (401fd8 <__register_exitproc+0xb8>)
  401f26:	4606      	mov	r6, r0
  401f28:	6828      	ldr	r0, [r5, #0]
  401f2a:	4698      	mov	r8, r3
  401f2c:	460f      	mov	r7, r1
  401f2e:	4691      	mov	r9, r2
  401f30:	f7ff fff2 	bl	401f18 <__retarget_lock_acquire_recursive>
  401f34:	4b29      	ldr	r3, [pc, #164]	; (401fdc <__register_exitproc+0xbc>)
  401f36:	681c      	ldr	r4, [r3, #0]
  401f38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d03e      	beq.n	401fbe <__register_exitproc+0x9e>
  401f40:	685a      	ldr	r2, [r3, #4]
  401f42:	2a1f      	cmp	r2, #31
  401f44:	dc1c      	bgt.n	401f80 <__register_exitproc+0x60>
  401f46:	f102 0e01 	add.w	lr, r2, #1
  401f4a:	b176      	cbz	r6, 401f6a <__register_exitproc+0x4a>
  401f4c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401f50:	2401      	movs	r4, #1
  401f52:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401f56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401f5a:	4094      	lsls	r4, r2
  401f5c:	4320      	orrs	r0, r4
  401f5e:	2e02      	cmp	r6, #2
  401f60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401f64:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401f68:	d023      	beq.n	401fb2 <__register_exitproc+0x92>
  401f6a:	3202      	adds	r2, #2
  401f6c:	f8c3 e004 	str.w	lr, [r3, #4]
  401f70:	6828      	ldr	r0, [r5, #0]
  401f72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401f76:	f7ff ffd1 	bl	401f1c <__retarget_lock_release_recursive>
  401f7a:	2000      	movs	r0, #0
  401f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f80:	4b17      	ldr	r3, [pc, #92]	; (401fe0 <__register_exitproc+0xc0>)
  401f82:	b30b      	cbz	r3, 401fc8 <__register_exitproc+0xa8>
  401f84:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401f88:	f3af 8000 	nop.w
  401f8c:	4603      	mov	r3, r0
  401f8e:	b1d8      	cbz	r0, 401fc8 <__register_exitproc+0xa8>
  401f90:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401f94:	6002      	str	r2, [r0, #0]
  401f96:	2100      	movs	r1, #0
  401f98:	6041      	str	r1, [r0, #4]
  401f9a:	460a      	mov	r2, r1
  401f9c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401fa0:	f04f 0e01 	mov.w	lr, #1
  401fa4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401fa8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401fac:	2e00      	cmp	r6, #0
  401fae:	d0dc      	beq.n	401f6a <__register_exitproc+0x4a>
  401fb0:	e7cc      	b.n	401f4c <__register_exitproc+0x2c>
  401fb2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401fb6:	430c      	orrs	r4, r1
  401fb8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401fbc:	e7d5      	b.n	401f6a <__register_exitproc+0x4a>
  401fbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401fc2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401fc6:	e7bb      	b.n	401f40 <__register_exitproc+0x20>
  401fc8:	6828      	ldr	r0, [r5, #0]
  401fca:	f7ff ffa7 	bl	401f1c <__retarget_lock_release_recursive>
  401fce:	f04f 30ff 	mov.w	r0, #4294967295
  401fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fd6:	bf00      	nop
  401fd8:	20400448 	.word	0x20400448
  401fdc:	00402a50 	.word	0x00402a50
  401fe0:	00000000 	.word	0x00000000

00401fe4 <sysfont_glyphs>:
	...
  402004:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  402014:	00000030 00000000 00000000 006c006c     0...........l.l.
  402024:	006c006c 00000000 00000000 00000000     l.l.............
	...
  40203c:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  40204c:	00000028 00000000 00000000 003c0010     (.............<.
  40205c:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402074:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402084:	00000088 00000000 00000000 00900060     ............`...
  402094:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4020ac:	00100010 00000010 00000000 00000000     ................
	...
  4020c8:	00100008 00200020 00200020 00200020     .... . . . . . .
  4020d8:	00080010 00000000 00000000 00100020     ............ ...
  4020e8:	00080008 00080008 00080008 00200010     .............. .
  4020f8:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  402120:	00100010 00fe0010 00100010 00000010     ................
	...
  402148:	00300010 00000020 00000000 00000000     ..0. ...........
  402158:	00000000 007c0000 00000000 00000000     ......|.........
	...
  40217c:	00300000 00000030 00000000 00000000     ..0.0...........
  40218c:	00080000 00100008 00200010 00400020     .......... . .@.
  40219c:	00000040 00000000 00000000 00780000     @.............x.
  4021ac:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  4021c4:	00100000 00500030 00100010 00100010     ....0.P.........
  4021d4:	0000007c 00000000 00000000 00700000     |.............p.
  4021e4:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  4021fc:	00700000 00080088 00080030 00880008     ..p.....0.......
  40220c:	00000070 00000000 00000000 00080000     p...............
  40221c:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  402234:	00780000 00800080 000800f0 00080008     ..x.............
  402244:	000000f0 00000000 00000000 00300000     ..............0.
  402254:	00800040 008800f0 00880088 00000070     @...........p...
	...
  40226c:	00f80000 00100008 00200010 00400020     .......... . .@.
  40227c:	00000040 00000000 00000000 00700000     @.............p.
  40228c:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  4022a4:	00700000 00880088 00780088 00100008     ..p.......x.....
  4022b4:	00000060 00000000 00000000 00000000     `...............
  4022c4:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  4022e0:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  4022f0:	00000040 00000000 00000000 00100008     @...............
  402300:	00400020 00100020 00000008 00000000      .@. ...........
	...
  40231c:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  402334:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  40234c:	00300000 00080048 00200010 00000000     ..0.H..... .....
  40235c:	00000020 00000000 00000000 00000000      ...............
  40236c:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  402384:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  402394:	00000044 00000000 00000000 00f80000     D...............
  4023a4:	00840084 008400f8 00840084 000000f8     ................
	...
  4023bc:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  4023cc:	0000003c 00000000 00000000 00f00000     <...............
  4023dc:	00840088 00840084 00880084 000000f0     ................
	...
  4023f4:	00f80000 00800080 008000f0 00800080     ................
  402404:	000000f8 00000000 00000000 00f80000     ................
  402414:	00800080 008000f8 00800080 00000080     ................
	...
  40242c:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  40243c:	00000038 00000000 00000000 00880000     8...............
  40244c:	00880088 008800f8 00880088 00000088     ................
	...
  402464:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402474:	000000f8 00000000 00000000 00f80000     ................
  402484:	00080008 00080008 00080008 000000f0     ................
	...
  40249c:	00840000 00900088 00d000a0 00840088     ................
  4024ac:	00000084 00000000 00000000 00800000     ................
  4024bc:	00800080 00800080 00800080 000000fc     ................
	...
  4024d4:	00840000 00cc00cc 00b400b4 00840084     ................
  4024e4:	00000084 00000000 00000000 00840000     ................
  4024f4:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  40250c:	00780000 00840084 00840084 00840084     ..x.............
  40251c:	00000078 00000000 00000000 00f80000     x...............
  40252c:	00840084 00f80084 00800080 00000080     ................
	...
  402544:	00780000 00840084 00840084 00840084     ..x.............
  402554:	00200078 00000018 00000000 00f80000     x. .............
  402564:	00840084 00f80084 00840088 00000084     ................
	...
  40257c:	007c0000 00800080 00180060 00040004     ..|.....`.......
  40258c:	000000f8 00000000 00000000 00f80000     ................
  40259c:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4025b4:	00840000 00840084 00840084 00840084     ................
  4025c4:	00000078 00000000 00000000 00840000     x...............
  4025d4:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4025ec:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4025fc:	00000050 00000000 00000000 00880000     P...............
  40260c:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  402624:	00880000 00880088 00500050 00200020     ........P.P. . .
  402634:	00000020 00000000 00000000 00fc0000      ...............
  402644:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  40265c:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  40266c:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  40267c:	00200020 00100020 00100010 00080008      . . ...........
	...
  402694:	00080038 00080008 00080008 00080008     8...............
  4026a4:	00080008 00000038 00000000 00280010     ....8.........(.
  4026b4:	00000044 00000000 00000000 00000000     D...............
	...
  4026dc:	00000038 00000000 00000000 00200000     8............. .
  4026ec:	00000010 00000000 00000000 00000000     ................
	...
  402708:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  402720:	00800080 00f80080 00840084 00840084     ................
  402730:	000000f8 00000000 00000000 00000000     ................
  402740:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402758:	00040004 007c0004 00840084 008c0084     ......|.........
  402768:	00000074 00000000 00000000 00000000     t...............
  402778:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402790:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  4027a0:	000000fc 00000000 00000000 00000000     ................
  4027b0:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4027c0:	00000078 00000000 00800080 00b80080     x...............
  4027d0:	008400c4 00840084 00000084 00000000     ................
  4027e0:	00000000 00100000 00700000 00100010     ..........p.....
  4027f0:	00100010 0000007c 00000000 00000000     ....|...........
  402800:	00080000 00780000 00080008 00080008     ......x.........
  402810:	00080008 00700008 00000000 00800080     ......p.........
  402820:	00880080 00a00090 008800d0 00000088     ................
	...
  402838:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402848:	000000f8 00000000 00000000 00000000     ................
  402858:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402874:	00b80000 008400c4 00840084 00000084     ................
	...
  402890:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4028ac:	00b80000 008400c4 00840084 008000f8     ................
  4028bc:	00000080 00000000 00000000 007c0000     ..............|.
  4028cc:	00840084 00840084 0004007c 00000004     ........|.......
	...
  4028e4:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402900:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  40291c:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402938:	00880000 00880088 00880088 0000007c     ............|...
	...
  402954:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402970:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  40298c:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4029a8:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4029b8:	00000040 00000000 00000000 00f80000     @...............
  4029c8:	00100008 00400020 000000f8 00000000     .... .@.........
  4029d8:	00000000 00200010 00100020 00200020     ...... . ... . .
  4029e8:	00200010 00100020 00000000 00000000     .. . ...........
  4029f8:	00100010 00100010 00000000 00100010     ................
  402a08:	00100010 00000000 00000000 00100020     ............ ...
  402a18:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402a28:	00000000 000007e2 00000003 00000013     ................
  402a38:	0000000c 0000000f 0000002d 00000001     ........-.......
  402a48:	646e756d 0000006f                       mundo...

00402a50 <_global_impure_ptr>:
  402a50:	20400020                                 .@ 

00402a54 <_init>:
  402a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a56:	bf00      	nop
  402a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a5a:	bc08      	pop	{r3}
  402a5c:	469e      	mov	lr, r3
  402a5e:	4770      	bx	lr

00402a60 <__init_array_start>:
  402a60:	00401ec5 	.word	0x00401ec5

00402a64 <__frame_dummy_init_array_entry>:
  402a64:	00400165                                e.@.

00402a68 <_fini>:
  402a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a6a:	bf00      	nop
  402a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a6e:	bc08      	pop	{r3}
  402a70:	469e      	mov	lr, r3
  402a72:	4770      	bx	lr

00402a74 <__fini_array_start>:
  402a74:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1fe4 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06e4 2040                                   ..@ 
